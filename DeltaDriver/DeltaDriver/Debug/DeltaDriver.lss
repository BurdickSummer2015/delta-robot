
DeltaDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800200  00003956  000039ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003956  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000028c  00800240  00800240  00003a2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003a2a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00003a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000004bb  00000000  00000000  00003b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028a3  00000000  00000000  0000404d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c40  00000000  00000000  000068f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e15  00000000  00000000  00007530  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000088c  00000000  00000000  00009348  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000099a1  00000000  00000000  00009bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000033b1  00000000  00000000  00013575  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00016926  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000380f  00000000  00000000  000169f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	88 c0       	rjmp	.+272    	; 0x112 <__ctors_end>
       2:	00 00       	nop
       4:	a6 c0       	rjmp	.+332    	; 0x152 <__bad_interrupt>
       6:	00 00       	nop
       8:	a4 c0       	rjmp	.+328    	; 0x152 <__bad_interrupt>
       a:	00 00       	nop
       c:	a2 c0       	rjmp	.+324    	; 0x152 <__bad_interrupt>
       e:	00 00       	nop
      10:	a0 c0       	rjmp	.+320    	; 0x152 <__bad_interrupt>
      12:	00 00       	nop
      14:	9e c0       	rjmp	.+316    	; 0x152 <__bad_interrupt>
      16:	00 00       	nop
      18:	9c c0       	rjmp	.+312    	; 0x152 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9a c0       	rjmp	.+308    	; 0x152 <__bad_interrupt>
      1e:	00 00       	nop
      20:	98 c0       	rjmp	.+304    	; 0x152 <__bad_interrupt>
      22:	00 00       	nop
      24:	96 c0       	rjmp	.+300    	; 0x152 <__bad_interrupt>
      26:	00 00       	nop
      28:	94 c0       	rjmp	.+296    	; 0x152 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	92 c0       	rjmp	.+292    	; 0x152 <__bad_interrupt>
      2e:	00 00       	nop
      30:	90 c0       	rjmp	.+288    	; 0x152 <__bad_interrupt>
      32:	00 00       	nop
      34:	8e c0       	rjmp	.+284    	; 0x152 <__bad_interrupt>
      36:	00 00       	nop
      38:	8c c0       	rjmp	.+280    	; 0x152 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8a c0       	rjmp	.+276    	; 0x152 <__bad_interrupt>
      3e:	00 00       	nop
      40:	88 c0       	rjmp	.+272    	; 0x152 <__bad_interrupt>
      42:	00 00       	nop
      44:	86 c0       	rjmp	.+268    	; 0x152 <__bad_interrupt>
      46:	00 00       	nop
      48:	84 c0       	rjmp	.+264    	; 0x152 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	82 c0       	rjmp	.+260    	; 0x152 <__bad_interrupt>
      4e:	00 00       	nop
      50:	80 c0       	rjmp	.+256    	; 0x152 <__bad_interrupt>
      52:	00 00       	nop
      54:	7e c0       	rjmp	.+252    	; 0x152 <__bad_interrupt>
      56:	00 00       	nop
      58:	7c c0       	rjmp	.+248    	; 0x152 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7a c0       	rjmp	.+244    	; 0x152 <__bad_interrupt>
      5e:	00 00       	nop
      60:	78 c0       	rjmp	.+240    	; 0x152 <__bad_interrupt>
      62:	00 00       	nop
      64:	46 c4       	rjmp	.+2188   	; 0x8f2 <__vector_25>
      66:	00 00       	nop
      68:	74 c0       	rjmp	.+232    	; 0x152 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	72 c0       	rjmp	.+228    	; 0x152 <__bad_interrupt>
      6e:	00 00       	nop
      70:	70 c0       	rjmp	.+224    	; 0x152 <__bad_interrupt>
      72:	00 00       	nop
      74:	6e c0       	rjmp	.+220    	; 0x152 <__bad_interrupt>
      76:	00 00       	nop
      78:	6c c0       	rjmp	.+216    	; 0x152 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6a c0       	rjmp	.+212    	; 0x152 <__bad_interrupt>
      7e:	00 00       	nop
      80:	68 c0       	rjmp	.+208    	; 0x152 <__bad_interrupt>
      82:	00 00       	nop
      84:	66 c0       	rjmp	.+204    	; 0x152 <__bad_interrupt>
      86:	00 00       	nop
      88:	64 c0       	rjmp	.+200    	; 0x152 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	62 c0       	rjmp	.+196    	; 0x152 <__bad_interrupt>
      8e:	00 00       	nop
      90:	35 c5       	rjmp	.+2666   	; 0xafc <__vector_36>
      92:	00 00       	nop
      94:	5e c0       	rjmp	.+188    	; 0x152 <__bad_interrupt>
      96:	00 00       	nop
      98:	5c c0       	rjmp	.+184    	; 0x152 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5a c0       	rjmp	.+180    	; 0x152 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	58 c0       	rjmp	.+176    	; 0x152 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	56 c0       	rjmp	.+172    	; 0x152 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	54 c0       	rjmp	.+168    	; 0x152 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	52 c0       	rjmp	.+164    	; 0x152 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	50 c0       	rjmp	.+160    	; 0x152 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4e c0       	rjmp	.+156    	; 0x152 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	4c c0       	rjmp	.+152    	; 0x152 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	4a c0       	rjmp	.+148    	; 0x152 <__bad_interrupt>
      be:	00 00       	nop
      c0:	48 c0       	rjmp	.+144    	; 0x152 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	46 c0       	rjmp	.+140    	; 0x152 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	44 c0       	rjmp	.+136    	; 0x152 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	07 2c       	mov	r0, r7
      ce:	7a a5       	ldd	r23, Y+42	; 0x2a
      d0:	ba 6c       	ori	r27, 0xCA	; 202
      d2:	c5 90       	lpm	r12, Z+
      d4:	da 3b       	cpi	r29, 0xBA	; 186
      d6:	93 65       	ori	r25, 0x53	; 83
      d8:	fc 8b       	std	Y+20, r31	; 0x14
      da:	bc 53       	subi	r27, 0x3C	; 60
      dc:	f8 10       	cpse	r15, r8
      de:	fd 3c       	cpi	r31, 0xCD	; 205
      e0:	56 92       	lac	Z, r5
      e2:	83 4d       	sbci	r24, 0xD3	; 211
      e4:	bd 87       	std	Y+13, r27	; 0x0d
      e6:	9d 3a       	cpi	r25, 0xAD	; 173
      e8:	b6 3d       	cpi	r27, 0xD6	; 214
      ea:	cb c9       	rjmp	.-3178   	; 0xfffff482 <__eeprom_end+0xff7ef482>
      ec:	bf 5b       	subi	r27, 0xBF	; 191
      ee:	be 73       	andi	r27, 0x3E	; 62
      f0:	da 0f       	add	r29, r26
      f2:	c9 3f       	cpi	r28, 0xF9	; 249
      f4:	05 a8       	ldd	r0, Z+53	; 0x35
      f6:	4c cd       	rjmp	.-1384   	; 0xfffffb90 <__eeprom_end+0xff7efb90>
      f8:	b2 d4       	rcall	.+2404   	; 0xa5e <serial_put_queue+0x2>
      fa:	4e b9       	out	0x0e, r20	; 14
      fc:	38 36       	cpi	r19, 0x68	; 104
      fe:	a9 02       	muls	r26, r25
     100:	0c 50       	subi	r16, 0x0C	; 12
     102:	b9 91       	ld	r27, Y+
     104:	86 88       	ldd	r8, Z+22	; 0x16
     106:	08 3c       	cpi	r16, 0xC8	; 200
     108:	a6 aa       	std	Z+54, r10	; 0x36
     10a:	aa 2a       	or	r10, r26
     10c:	be 00       	.word	0x00be	; ????
     10e:	00 00       	nop
     110:	80 3f       	cpi	r24, 0xF0	; 240

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d1 e2       	ldi	r29, 0x21	; 33
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
     122:	12 e0       	ldi	r17, 0x02	; 2
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	e6 e5       	ldi	r30, 0x56	; 86
     12a:	f9 e3       	ldi	r31, 0x39	; 57
     12c:	00 e0       	ldi	r16, 0x00	; 0
     12e:	0b bf       	out	0x3b, r16	; 59
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
     132:	07 90       	elpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	a0 34       	cpi	r26, 0x40	; 64
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
     13c:	24 e0       	ldi	r18, 0x04	; 4
     13e:	a0 e4       	ldi	r26, 0x40	; 64
     140:	b2 e0       	ldi	r27, 0x02	; 2
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	ac 3c       	cpi	r26, 0xCC	; 204
     148:	b2 07       	cpc	r27, r18
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
     14c:	3c d7       	rcall	.+3704   	; 0xfc6 <main>
     14e:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <_exit>

00000152 <__bad_interrupt>:
     152:	56 cf       	rjmp	.-340    	; 0x0 <__vectors>

00000154 <dxl_get_result>:
     154:	80 91 00 02 	lds	r24, 0x0200
     158:	90 91 01 02 	lds	r25, 0x0201
     15c:	08 95       	ret

0000015e <dxl_set_txpacket_id>:
     15e:	80 93 42 02 	sts	0x0242, r24
     162:	08 95       	ret

00000164 <dxl_set_txpacket_instruction>:
     164:	80 93 44 02 	sts	0x0244, r24
     168:	08 95       	ret

0000016a <dxl_set_txpacket_parameter>:
     16a:	fc 01       	movw	r30, r24
     16c:	e0 5c       	subi	r30, 0xC0	; 192
     16e:	fd 4f       	sbci	r31, 0xFD	; 253
     170:	65 83       	std	Z+5, r22	; 0x05
     172:	08 95       	ret

00000174 <dxl_set_txpacket_length>:
     174:	80 93 43 02 	sts	0x0243, r24
     178:	08 95       	ret

0000017a <dxl_get_rxpacket_error>:
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	90 91 e4 02 	lds	r25, 0x02E4
     182:	98 23       	and	r25, r24
     184:	11 f0       	breq	.+4      	; 0x18a <dxl_get_rxpacket_error+0x10>
     186:	21 e0       	ldi	r18, 0x01	; 1
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	c9 01       	movw	r24, r18
     18c:	08 95       	ret

0000018e <dxl_get_rxpacket_length>:
     18e:	80 91 e3 02 	lds	r24, 0x02E3
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	08 95       	ret

00000196 <dxl_get_rxpacket_parameter>:
     196:	fc 01       	movw	r30, r24
     198:	e0 52       	subi	r30, 0x20	; 32
     19a:	fd 4f       	sbci	r31, 0xFD	; 253
     19c:	85 81       	ldd	r24, Z+5	; 0x05
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	08 95       	ret

000001a2 <dxl_makeword>:
     1a2:	36 2f       	mov	r19, r22
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	28 0f       	add	r18, r24
     1a8:	39 1f       	adc	r19, r25
     1aa:	c9 01       	movw	r24, r18
     1ac:	08 95       	ret

000001ae <dxl_get_lowbyte>:
     1ae:	28 2f       	mov	r18, r24
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	c9 01       	movw	r24, r18
     1b4:	08 95       	ret

000001b6 <dxl_get_highbyte>:
     1b6:	80 70       	andi	r24, 0x00	; 0
     1b8:	89 2f       	mov	r24, r25
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	08 95       	ret

000001be <dxl_rx_packet>:
     1be:	0f 93       	push	r16
     1c0:	1f 93       	push	r17
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	80 91 28 03 	lds	r24, 0x0328
     1ca:	90 91 29 03 	lds	r25, 0x0329
     1ce:	89 2b       	or	r24, r25
     1d0:	09 f4       	brne	.+2      	; 0x1d4 <dxl_rx_packet+0x16>
     1d2:	b8 c0       	rjmp	.+368    	; 0x344 <dxl_rx_packet+0x186>
     1d4:	80 91 42 02 	lds	r24, 0x0242
     1d8:	8e 3f       	cpi	r24, 0xFE	; 254
     1da:	09 f4       	brne	.+2      	; 0x1de <dxl_rx_packet+0x20>
     1dc:	a9 c0       	rjmp	.+338    	; 0x330 <dxl_rx_packet+0x172>
     1de:	80 91 00 02 	lds	r24, 0x0200
     1e2:	90 91 01 02 	lds	r25, 0x0201
     1e6:	89 2b       	or	r24, r25
     1e8:	29 f4       	brne	.+10     	; 0x1f4 <dxl_rx_packet+0x36>
     1ea:	10 92 27 03 	sts	0x0327, r1
     1ee:	86 e0       	ldi	r24, 0x06	; 6
     1f0:	80 93 26 03 	sts	0x0326, r24
     1f4:	80 91 27 03 	lds	r24, 0x0327
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	60 91 26 03 	lds	r22, 0x0326
     1fe:	70 e0       	ldi	r23, 0x00	; 0
     200:	68 1b       	sub	r22, r24
     202:	79 0b       	sbc	r23, r25
     204:	80 52       	subi	r24, 0x20	; 32
     206:	9d 4f       	sbci	r25, 0xFD	; 253
     208:	49 d3       	rcall	.+1682   	; 0x89c <dxl_hal_rx>
     20a:	90 91 27 03 	lds	r25, 0x0327
     20e:	98 0f       	add	r25, r24
     210:	90 93 27 03 	sts	0x0327, r25
     214:	80 91 26 03 	lds	r24, 0x0326
     218:	98 17       	cp	r25, r24
     21a:	18 f4       	brcc	.+6      	; 0x222 <dxl_rx_packet+0x64>
     21c:	4a d2       	rcall	.+1172   	; 0x6b2 <dxl_hal_timeout>
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	71 f0       	breq	.+28     	; 0x23e <dxl_rx_packet+0x80>
     222:	70 91 27 03 	lds	r23, 0x0327
     226:	47 2f       	mov	r20, r23
     228:	50 e0       	ldi	r21, 0x00	; 0
     22a:	da 01       	movw	r26, r20
     22c:	11 97       	sbiw	r26, 0x01	; 1
     22e:	8a 01       	movw	r16, r20
     230:	02 50       	subi	r16, 0x02	; 2
     232:	10 40       	sbci	r17, 0x00	; 0
     234:	60 e0       	ldi	r22, 0x00	; 0
     236:	ed 01       	movw	r28, r26
     238:	c0 52       	subi	r28, 0x20	; 32
     23a:	dd 4f       	sbci	r29, 0xFD	; 253
     23c:	18 c0       	rjmp	.+48     	; 0x26e <dxl_rx_packet+0xb0>
     23e:	80 91 27 03 	lds	r24, 0x0327
     242:	88 23       	and	r24, r24
     244:	09 f0       	breq	.+2      	; 0x248 <dxl_rx_packet+0x8a>
     246:	71 c0       	rjmp	.+226    	; 0x32a <dxl_rx_packet+0x16c>
     248:	86 e0       	ldi	r24, 0x06	; 6
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	73 c0       	rjmp	.+230    	; 0x334 <dxl_rx_packet+0x176>
     24e:	f9 01       	movw	r30, r18
     250:	e0 52       	subi	r30, 0x20	; 32
     252:	fd 4f       	sbci	r31, 0xFD	; 253
     254:	80 81       	ld	r24, Z
     256:	8f 3f       	cpi	r24, 0xFF	; 255
     258:	19 f4       	brne	.+6      	; 0x260 <dxl_rx_packet+0xa2>
     25a:	81 81       	ldd	r24, Z+1	; 0x01
     25c:	8f 3f       	cpi	r24, 0xFF	; 255
     25e:	61 f0       	breq	.+24     	; 0x278 <dxl_rx_packet+0xba>
     260:	20 17       	cp	r18, r16
     262:	31 07       	cpc	r19, r17
     264:	19 f4       	brne	.+6      	; 0x26c <dxl_rx_packet+0xae>
     266:	88 81       	ld	r24, Y
     268:	8f 3f       	cpi	r24, 0xFF	; 255
     26a:	31 f0       	breq	.+12     	; 0x278 <dxl_rx_packet+0xba>
     26c:	6f 5f       	subi	r22, 0xFF	; 255
     26e:	26 2f       	mov	r18, r22
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	2a 17       	cp	r18, r26
     274:	3b 07       	cpc	r19, r27
     276:	5c f3       	brlt	.-42     	; 0x24e <dxl_rx_packet+0x90>
     278:	66 23       	and	r22, r22
     27a:	a1 f0       	breq	.+40     	; 0x2a4 <dxl_rx_packet+0xe6>
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	42 1b       	sub	r20, r18
     280:	53 0b       	sbc	r21, r19
     282:	08 c0       	rjmp	.+16     	; 0x294 <dxl_rx_packet+0xd6>
     284:	e0 52       	subi	r30, 0x20	; 32
     286:	fd 4f       	sbci	r31, 0xFD	; 253
     288:	df 01       	movw	r26, r30
     28a:	a2 0f       	add	r26, r18
     28c:	b3 1f       	adc	r27, r19
     28e:	8c 91       	ld	r24, X
     290:	80 83       	st	Z, r24
     292:	9f 5f       	subi	r25, 0xFF	; 255
     294:	e9 2f       	mov	r30, r25
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	e4 17       	cp	r30, r20
     29a:	f5 07       	cpc	r31, r21
     29c:	9c f3       	brlt	.-26     	; 0x284 <dxl_rx_packet+0xc6>
     29e:	76 1b       	sub	r23, r22
     2a0:	70 93 27 03 	sts	0x0327, r23
     2a4:	20 91 27 03 	lds	r18, 0x0327
     2a8:	80 91 26 03 	lds	r24, 0x0326
     2ac:	28 17       	cp	r18, r24
     2ae:	28 f1       	brcs	.+74     	; 0x2fa <dxl_rx_packet+0x13c>
     2b0:	90 91 42 02 	lds	r25, 0x0242
     2b4:	80 91 e2 02 	lds	r24, 0x02E2
     2b8:	98 17       	cp	r25, r24
     2ba:	b9 f5       	brne	.+110    	; 0x32a <dxl_rx_packet+0x16c>
     2bc:	60 91 e3 02 	lds	r22, 0x02E3
     2c0:	6c 5f       	subi	r22, 0xFC	; 252
     2c2:	60 93 26 03 	sts	0x0326, r22
     2c6:	26 17       	cp	r18, r22
     2c8:	88 f4       	brcc	.+34     	; 0x2ec <dxl_rx_packet+0x12e>
     2ca:	82 2f       	mov	r24, r18
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	68 1b       	sub	r22, r24
     2d2:	79 0b       	sbc	r23, r25
     2d4:	80 52       	subi	r24, 0x20	; 32
     2d6:	9d 4f       	sbci	r25, 0xFD	; 253
     2d8:	e1 d2       	rcall	.+1474   	; 0x89c <dxl_hal_rx>
     2da:	90 91 27 03 	lds	r25, 0x0327
     2de:	98 0f       	add	r25, r24
     2e0:	90 93 27 03 	sts	0x0327, r25
     2e4:	80 91 26 03 	lds	r24, 0x0326
     2e8:	98 17       	cp	r25, r24
     2ea:	38 f0       	brcs	.+14     	; 0x2fa <dxl_rx_packet+0x13c>
     2ec:	80 91 e3 02 	lds	r24, 0x02E3
     2f0:	a8 2f       	mov	r26, r24
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0c c0       	rjmp	.+24     	; 0x312 <dxl_rx_packet+0x154>
     2fa:	85 e0       	ldi	r24, 0x05	; 5
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	90 93 01 02 	sts	0x0201, r25
     302:	80 93 00 02 	sts	0x0200, r24
     306:	1e c0       	rjmp	.+60     	; 0x344 <dxl_rx_packet+0x186>
     308:	e0 52       	subi	r30, 0x20	; 32
     30a:	fd 4f       	sbci	r31, 0xFD	; 253
     30c:	82 81       	ldd	r24, Z+2	; 0x02
     30e:	98 0f       	add	r25, r24
     310:	2f 5f       	subi	r18, 0xFF	; 255
     312:	e2 2f       	mov	r30, r18
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	ae 17       	cp	r26, r30
     318:	bf 07       	cpc	r27, r31
     31a:	b4 f7       	brge	.-20     	; 0x308 <dxl_rx_packet+0x14a>
     31c:	a0 52       	subi	r26, 0x20	; 32
     31e:	bd 4f       	sbci	r27, 0xFD	; 253
     320:	90 95       	com	r25
     322:	13 96       	adiw	r26, 0x03	; 3
     324:	8c 91       	ld	r24, X
     326:	89 17       	cp	r24, r25
     328:	19 f0       	breq	.+6      	; 0x330 <dxl_rx_packet+0x172>
     32a:	87 e0       	ldi	r24, 0x07	; 7
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	02 c0       	rjmp	.+4      	; 0x334 <dxl_rx_packet+0x176>
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	90 93 01 02 	sts	0x0201, r25
     338:	80 93 00 02 	sts	0x0200, r24
     33c:	10 92 29 03 	sts	0x0329, r1
     340:	10 92 28 03 	sts	0x0328, r1
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	0f 91       	pop	r16
     34c:	08 95       	ret

0000034e <dxl_tx_packet>:
     34e:	1f 93       	push	r17
     350:	80 91 28 03 	lds	r24, 0x0328
     354:	90 91 29 03 	lds	r25, 0x0329
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	09 f4       	brne	.+2      	; 0x35e <dxl_tx_packet+0x10>
     35c:	5d c0       	rjmp	.+186    	; 0x418 <dxl_tx_packet+0xca>
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	90 93 29 03 	sts	0x0329, r25
     366:	80 93 28 03 	sts	0x0328, r24
     36a:	80 91 43 02 	lds	r24, 0x0243
     36e:	89 39       	cpi	r24, 0x99	; 153
     370:	40 f4       	brcc	.+16     	; 0x382 <dxl_tx_packet+0x34>
     372:	90 91 44 02 	lds	r25, 0x0244
     376:	89 2f       	mov	r24, r25
     378:	81 50       	subi	r24, 0x01	; 1
     37a:	86 30       	cpi	r24, 0x06	; 6
     37c:	28 f0       	brcs	.+10     	; 0x388 <dxl_tx_packet+0x3a>
     37e:	93 38       	cpi	r25, 0x83	; 131
     380:	19 f0       	breq	.+6      	; 0x388 <dxl_tx_packet+0x3a>
     382:	84 e0       	ldi	r24, 0x04	; 4
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	2f c0       	rjmp	.+94     	; 0x3e6 <dxl_tx_packet+0x98>
     388:	8f ef       	ldi	r24, 0xFF	; 255
     38a:	80 93 40 02 	sts	0x0240, r24
     38e:	80 93 41 02 	sts	0x0241, r24
     392:	80 91 43 02 	lds	r24, 0x0243
     396:	a8 2f       	mov	r26, r24
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	05 c0       	rjmp	.+10     	; 0x3aa <dxl_tx_packet+0x5c>
     3a0:	e0 5c       	subi	r30, 0xC0	; 192
     3a2:	fd 4f       	sbci	r31, 0xFD	; 253
     3a4:	82 81       	ldd	r24, Z+2	; 0x02
     3a6:	98 0f       	add	r25, r24
     3a8:	2f 5f       	subi	r18, 0xFF	; 255
     3aa:	e2 2f       	mov	r30, r18
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	ae 17       	cp	r26, r30
     3b0:	bf 07       	cpc	r27, r31
     3b2:	b4 f7       	brge	.-20     	; 0x3a0 <dxl_tx_packet+0x52>
     3b4:	a0 5c       	subi	r26, 0xC0	; 192
     3b6:	bd 4f       	sbci	r27, 0xFD	; 253
     3b8:	90 95       	com	r25
     3ba:	13 96       	adiw	r26, 0x03	; 3
     3bc:	9c 93       	st	X, r25
     3be:	80 91 00 02 	lds	r24, 0x0200
     3c2:	90 91 01 02 	lds	r25, 0x0201
     3c6:	06 97       	sbiw	r24, 0x06	; 6
     3c8:	02 97       	sbiw	r24, 0x02	; 2
     3ca:	08 f4       	brcc	.+2      	; 0x3ce <dxl_tx_packet+0x80>
     3cc:	38 d1       	rcall	.+624    	; 0x63e <dxl_hal_clear>
     3ce:	10 91 43 02 	lds	r17, 0x0243
     3d2:	1c 5f       	subi	r17, 0xFC	; 252
     3d4:	80 e4       	ldi	r24, 0x40	; 64
     3d6:	92 e0       	ldi	r25, 0x02	; 2
     3d8:	61 2f       	mov	r22, r17
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	35 d1       	rcall	.+618    	; 0x648 <dxl_hal_tx>
     3de:	18 17       	cp	r17, r24
     3e0:	59 f0       	breq	.+22     	; 0x3f8 <dxl_tx_packet+0xaa>
     3e2:	82 e0       	ldi	r24, 0x02	; 2
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	90 93 01 02 	sts	0x0201, r25
     3ea:	80 93 00 02 	sts	0x0200, r24
     3ee:	10 92 29 03 	sts	0x0329, r1
     3f2:	10 92 28 03 	sts	0x0328, r1
     3f6:	10 c0       	rjmp	.+32     	; 0x418 <dxl_tx_packet+0xca>
     3f8:	80 91 44 02 	lds	r24, 0x0244
     3fc:	82 30       	cpi	r24, 0x02	; 2
     3fe:	29 f4       	brne	.+10     	; 0x40a <dxl_tx_packet+0xbc>
     400:	80 91 46 02 	lds	r24, 0x0246
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	06 96       	adiw	r24, 0x06	; 6
     408:	02 c0       	rjmp	.+4      	; 0x40e <dxl_tx_packet+0xc0>
     40a:	86 e0       	ldi	r24, 0x06	; 6
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	40 d1       	rcall	.+640    	; 0x690 <dxl_hal_set_timeout>
     410:	10 92 01 02 	sts	0x0201, r1
     414:	10 92 00 02 	sts	0x0200, r1
     418:	1f 91       	pop	r17
     41a:	08 95       	ret

0000041c <dxl_txrx_packet>:
     41c:	98 df       	rcall	.-208    	; 0x34e <dxl_tx_packet>
     41e:	80 91 00 02 	lds	r24, 0x0200
     422:	90 91 01 02 	lds	r25, 0x0201
     426:	89 2b       	or	r24, r25
     428:	39 f4       	brne	.+14     	; 0x438 <dxl_txrx_packet+0x1c>
     42a:	c9 de       	rcall	.-622    	; 0x1be <dxl_rx_packet>
     42c:	80 91 00 02 	lds	r24, 0x0200
     430:	90 91 01 02 	lds	r25, 0x0201
     434:	05 97       	sbiw	r24, 0x05	; 5
     436:	c9 f3       	breq	.-14     	; 0x42a <dxl_txrx_packet+0xe>
     438:	08 95       	ret

0000043a <dxl_write_word>:
     43a:	28 2f       	mov	r18, r24
     43c:	80 91 28 03 	lds	r24, 0x0328
     440:	90 91 29 03 	lds	r25, 0x0329
     444:	89 2b       	or	r24, r25
     446:	91 f4       	brne	.+36     	; 0x46c <dxl_write_word+0x32>
     448:	20 93 42 02 	sts	0x0242, r18
     44c:	83 e0       	ldi	r24, 0x03	; 3
     44e:	80 93 44 02 	sts	0x0244, r24
     452:	60 93 45 02 	sts	0x0245, r22
     456:	ca 01       	movw	r24, r20
     458:	40 93 46 02 	sts	0x0246, r20
     45c:	80 70       	andi	r24, 0x00	; 0
     45e:	90 93 47 02 	sts	0x0247, r25
     462:	85 e0       	ldi	r24, 0x05	; 5
     464:	80 93 43 02 	sts	0x0243, r24
     468:	d9 cf       	rjmp	.-78     	; 0x41c <dxl_txrx_packet>
     46a:	08 95       	ret
     46c:	ff cf       	rjmp	.-2      	; 0x46c <dxl_write_word+0x32>

0000046e <dxl_read_word>:
     46e:	28 2f       	mov	r18, r24
     470:	80 91 28 03 	lds	r24, 0x0328
     474:	90 91 29 03 	lds	r25, 0x0329
     478:	89 2b       	or	r24, r25
     47a:	b1 f4       	brne	.+44     	; 0x4a8 <dxl_read_word+0x3a>
     47c:	20 93 42 02 	sts	0x0242, r18
     480:	82 e0       	ldi	r24, 0x02	; 2
     482:	80 93 44 02 	sts	0x0244, r24
     486:	60 93 45 02 	sts	0x0245, r22
     48a:	80 93 46 02 	sts	0x0246, r24
     48e:	84 e0       	ldi	r24, 0x04	; 4
     490:	80 93 43 02 	sts	0x0243, r24
     494:	c3 df       	rcall	.-122    	; 0x41c <dxl_txrx_packet>
     496:	30 91 e6 02 	lds	r19, 0x02E6
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	80 91 e5 02 	lds	r24, 0x02E5
     4a0:	28 0f       	add	r18, r24
     4a2:	31 1d       	adc	r19, r1
     4a4:	c9 01       	movw	r24, r18
     4a6:	08 95       	ret
     4a8:	ff cf       	rjmp	.-2      	; 0x4a8 <dxl_read_word+0x3a>

000004aa <dxl_write_byte>:
     4aa:	28 2f       	mov	r18, r24
     4ac:	80 91 28 03 	lds	r24, 0x0328
     4b0:	90 91 29 03 	lds	r25, 0x0329
     4b4:	89 2b       	or	r24, r25
     4b6:	71 f4       	brne	.+28     	; 0x4d4 <dxl_write_byte+0x2a>
     4b8:	20 93 42 02 	sts	0x0242, r18
     4bc:	83 e0       	ldi	r24, 0x03	; 3
     4be:	80 93 44 02 	sts	0x0244, r24
     4c2:	60 93 45 02 	sts	0x0245, r22
     4c6:	40 93 46 02 	sts	0x0246, r20
     4ca:	84 e0       	ldi	r24, 0x04	; 4
     4cc:	80 93 43 02 	sts	0x0243, r24
     4d0:	a5 cf       	rjmp	.-182    	; 0x41c <dxl_txrx_packet>
     4d2:	08 95       	ret
     4d4:	ff cf       	rjmp	.-2      	; 0x4d4 <dxl_write_byte+0x2a>

000004d6 <dxl_read_byte>:
     4d6:	28 2f       	mov	r18, r24
     4d8:	80 91 28 03 	lds	r24, 0x0328
     4dc:	90 91 29 03 	lds	r25, 0x0329
     4e0:	89 2b       	or	r24, r25
     4e2:	91 f4       	brne	.+36     	; 0x508 <dxl_read_byte+0x32>
     4e4:	20 93 42 02 	sts	0x0242, r18
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	80 93 44 02 	sts	0x0244, r24
     4ee:	60 93 45 02 	sts	0x0245, r22
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	80 93 46 02 	sts	0x0246, r24
     4f8:	84 e0       	ldi	r24, 0x04	; 4
     4fa:	80 93 43 02 	sts	0x0243, r24
     4fe:	8e df       	rcall	.-228    	; 0x41c <dxl_txrx_packet>
     500:	80 91 e5 02 	lds	r24, 0x02E5
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	08 95       	ret
     508:	ff cf       	rjmp	.-2      	; 0x508 <dxl_read_byte+0x32>

0000050a <dxl_ping>:
     50a:	28 2f       	mov	r18, r24
     50c:	80 91 28 03 	lds	r24, 0x0328
     510:	90 91 29 03 	lds	r25, 0x0329
     514:	89 2b       	or	r24, r25
     516:	51 f4       	brne	.+20     	; 0x52c <dxl_ping+0x22>
     518:	20 93 42 02 	sts	0x0242, r18
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	80 93 44 02 	sts	0x0244, r24
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	80 93 43 02 	sts	0x0243, r24
     528:	79 cf       	rjmp	.-270    	; 0x41c <dxl_txrx_packet>
     52a:	08 95       	ret
     52c:	ff cf       	rjmp	.-2      	; 0x52c <dxl_ping+0x22>

0000052e <dxl_terminate>:
     52e:	86 c0       	rjmp	.+268    	; 0x63c <dxl_hal_close>
     530:	08 95       	ret

00000532 <dxl_initialize>:
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	8c 01       	movw	r16, r24
     538:	6f 5f       	subi	r22, 0xFF	; 255
     53a:	7f 4f       	sbci	r23, 0xFF	; 255
     53c:	88 27       	eor	r24, r24
     53e:	77 fd       	sbrc	r23, 7
     540:	80 95       	com	r24
     542:	98 2f       	mov	r25, r24
     544:	0e 94 40 18 	call	0x3080	; 0x3080 <__floatsisf>
     548:	9b 01       	movw	r18, r22
     54a:	ac 01       	movw	r20, r24
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	74 e2       	ldi	r23, 0x24	; 36
     550:	84 ef       	ldi	r24, 0xF4	; 244
     552:	99 e4       	ldi	r25, 0x49	; 73
     554:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__divsf3>
     558:	ab 01       	movw	r20, r22
     55a:	bc 01       	movw	r22, r24
     55c:	c8 01       	movw	r24, r16
     55e:	15 d0       	rcall	.+42     	; 0x58a <dxl_hal_open>
     560:	89 2b       	or	r24, r25
     562:	19 f4       	brne	.+6      	; 0x56a <dxl_initialize+0x38>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	0c c0       	rjmp	.+24     	; 0x582 <dxl_initialize+0x50>
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	90 93 01 02 	sts	0x0201, r25
     572:	80 93 00 02 	sts	0x0200, r24
     576:	10 92 29 03 	sts	0x0329, r1
     57a:	10 92 28 03 	sts	0x0328, r1
     57e:	21 e0       	ldi	r18, 0x01	; 1
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	c9 01       	movw	r24, r18
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	08 95       	ret

0000058a <dxl_hal_open>:
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	7a 01       	movw	r14, r20
     594:	8b 01       	movw	r16, r22
     596:	82 e4       	ldi	r24, 0x42	; 66
     598:	80 93 c0 00 	sts	0x00C0, r24
     59c:	88 e9       	ldi	r24, 0x98	; 152
     59e:	80 93 c1 00 	sts	0x00C1, r24
     5a2:	86 e0       	ldi	r24, 0x06	; 6
     5a4:	80 93 c2 00 	sts	0x00C2, r24
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	74 e2       	ldi	r23, 0x24	; 36
     5ac:	84 ef       	ldi	r24, 0xF4	; 244
     5ae:	99 e4       	ldi	r25, 0x49	; 73
     5b0:	a8 01       	movw	r20, r16
     5b2:	97 01       	movw	r18, r14
     5b4:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__divsf3>
     5b8:	0e 94 12 18 	call	0x3024	; 0x3024 <__fixunssfsi>
     5bc:	61 50       	subi	r22, 0x01	; 1
     5be:	70 40       	sbci	r23, 0x00	; 0
     5c0:	70 93 c5 00 	sts	0x00C5, r23
     5c4:	60 93 c4 00 	sts	0x00C4, r22
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	74 e2       	ldi	r23, 0x24	; 36
     5cc:	84 e7       	ldi	r24, 0x74	; 116
     5ce:	99 e4       	ldi	r25, 0x49	; 73
     5d0:	a8 01       	movw	r20, r16
     5d2:	97 01       	movw	r18, r14
     5d4:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__divsf3>
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	40 e4       	ldi	r20, 0x40	; 64
     5de:	51 e4       	ldi	r21, 0x41	; 65
     5e0:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
     5e4:	60 93 ba 04 	sts	0x04BA, r22
     5e8:	70 93 bb 04 	sts	0x04BB, r23
     5ec:	80 93 bc 04 	sts	0x04BC, r24
     5f0:	90 93 bd 04 	sts	0x04BD, r25
     5f4:	20 91 ba 04 	lds	r18, 0x04BA
     5f8:	30 91 bb 04 	lds	r19, 0x04BB
     5fc:	40 91 bc 04 	lds	r20, 0x04BC
     600:	50 91 bd 04 	lds	r21, 0x04BD
     604:	60 e0       	ldi	r22, 0x00	; 0
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	8a e7       	ldi	r24, 0x7A	; 122
     60a:	93 e4       	ldi	r25, 0x43	; 67
     60c:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__divsf3>
     610:	0e 94 12 18 	call	0x3024	; 0x3024 <__fixunssfsi>
     614:	70 93 b9 04 	sts	0x04B9, r23
     618:	60 93 b8 04 	sts	0x04B8, r22
     61c:	72 98       	cbi	0x0e, 2	; 14
     61e:	73 9a       	sbi	0x0e, 3	; 14
     620:	8f ef       	ldi	r24, 0xFF	; 255
     622:	80 93 c6 00 	sts	0x00C6, r24
     626:	10 92 2a 04 	sts	0x042A, r1
     62a:	10 92 2b 04 	sts	0x042B, r1
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	1f 91       	pop	r17
     634:	0f 91       	pop	r16
     636:	ff 90       	pop	r15
     638:	ef 90       	pop	r14
     63a:	08 95       	ret

0000063c <dxl_hal_close>:
     63c:	08 95       	ret

0000063e <dxl_hal_clear>:
     63e:	80 91 2b 04 	lds	r24, 0x042B
     642:	80 93 2a 04 	sts	0x042A, r24
     646:	08 95       	ret

00000648 <dxl_hal_tx>:
     648:	ac 01       	movw	r20, r24
     64a:	f8 94       	cli
     64c:	73 98       	cbi	0x0e, 3	; 14
     64e:	72 9a       	sbi	0x0e, 2	; 14
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	11 c0       	rjmp	.+34     	; 0x678 <dxl_hal_tx+0x30>
     656:	80 91 c0 00 	lds	r24, 0x00C0
     65a:	85 ff       	sbrs	r24, 5
     65c:	fc cf       	rjmp	.-8      	; 0x656 <dxl_hal_tx+0xe>
     65e:	80 91 c0 00 	lds	r24, 0x00C0
     662:	80 64       	ori	r24, 0x40	; 64
     664:	80 93 c0 00 	sts	0x00C0, r24
     668:	fa 01       	movw	r30, r20
     66a:	e2 0f       	add	r30, r18
     66c:	f3 1f       	adc	r31, r19
     66e:	80 81       	ld	r24, Z
     670:	80 93 c6 00 	sts	0x00C6, r24
     674:	2f 5f       	subi	r18, 0xFF	; 255
     676:	3f 4f       	sbci	r19, 0xFF	; 255
     678:	26 17       	cp	r18, r22
     67a:	37 07       	cpc	r19, r23
     67c:	64 f3       	brlt	.-40     	; 0x656 <dxl_hal_tx+0xe>
     67e:	80 91 c0 00 	lds	r24, 0x00C0
     682:	86 ff       	sbrs	r24, 6
     684:	fc cf       	rjmp	.-8      	; 0x67e <dxl_hal_tx+0x36>
     686:	72 98       	cbi	0x0e, 2	; 14
     688:	73 9a       	sbi	0x0e, 3	; 14
     68a:	78 94       	sei
     68c:	c9 01       	movw	r24, r18
     68e:	08 95       	ret

00000690 <dxl_hal_set_timeout>:
     690:	10 92 c1 04 	sts	0x04C1, r1
     694:	10 92 c0 04 	sts	0x04C0, r1
     698:	20 91 b8 04 	lds	r18, 0x04B8
     69c:	30 91 b9 04 	lds	r19, 0x04B9
     6a0:	26 5f       	subi	r18, 0xF6	; 246
     6a2:	3f 4f       	sbci	r19, 0xFF	; 255
     6a4:	28 0f       	add	r18, r24
     6a6:	39 1f       	adc	r19, r25
     6a8:	30 93 bf 04 	sts	0x04BF, r19
     6ac:	20 93 be 04 	sts	0x04BE, r18
     6b0:	08 95       	ret

000006b2 <dxl_hal_timeout>:
     6b2:	af 92       	push	r10
     6b4:	bf 92       	push	r11
     6b6:	cf 92       	push	r12
     6b8:	df 92       	push	r13
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
     6c2:	80 91 c0 04 	lds	r24, 0x04C0
     6c6:	90 91 c1 04 	lds	r25, 0x04C1
     6ca:	01 96       	adiw	r24, 0x01	; 1
     6cc:	90 93 c1 04 	sts	0x04C1, r25
     6d0:	80 93 c0 04 	sts	0x04C0, r24
     6d4:	20 91 c0 04 	lds	r18, 0x04C0
     6d8:	30 91 c1 04 	lds	r19, 0x04C1
     6dc:	80 91 be 04 	lds	r24, 0x04BE
     6e0:	90 91 bf 04 	lds	r25, 0x04BF
     6e4:	82 17       	cp	r24, r18
     6e6:	93 07       	cpc	r25, r19
     6e8:	18 f4       	brcc	.+6      	; 0x6f0 <dxl_hal_timeout+0x3e>
     6ea:	21 e0       	ldi	r18, 0x01	; 1
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	74 c0       	rjmp	.+232    	; 0x7d8 <dxl_hal_timeout+0x126>
     6f0:	a0 90 ba 04 	lds	r10, 0x04BA
     6f4:	b0 90 bb 04 	lds	r11, 0x04BB
     6f8:	c0 90 bc 04 	lds	r12, 0x04BC
     6fc:	d0 90 bd 04 	lds	r13, 0x04BD
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     700:	c6 01       	movw	r24, r12
     702:	b5 01       	movw	r22, r10
     704:	2b ea       	ldi	r18, 0xAB	; 171
     706:	3a ea       	ldi	r19, 0xAA	; 170
     708:	4a ea       	ldi	r20, 0xAA	; 170
     70a:	50 e4       	ldi	r21, 0x40	; 64
     70c:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
     710:	7b 01       	movw	r14, r22
     712:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	40 e8       	ldi	r20, 0x80	; 128
     71a:	5f e3       	ldi	r21, 0x3F	; 63
     71c:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
     720:	88 23       	and	r24, r24
     722:	14 f4       	brge	.+4      	; 0x728 <dxl_hal_timeout+0x76>
     724:	61 e0       	ldi	r22, 0x01	; 1
     726:	54 c0       	rjmp	.+168    	; 0x7d0 <dxl_hal_timeout+0x11e>
		__ticks = 1;
	else if (__tmp > 255)
     728:	c8 01       	movw	r24, r16
     72a:	b7 01       	movw	r22, r14
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	4f e7       	ldi	r20, 0x7F	; 127
     732:	53 e4       	ldi	r21, 0x43	; 67
     734:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__gesf2>
     738:	18 16       	cp	r1, r24
     73a:	0c f0       	brlt	.+2      	; 0x73e <dxl_hal_timeout+0x8c>
     73c:	45 c0       	rjmp	.+138    	; 0x7c8 <dxl_hal_timeout+0x116>
	{
		_delay_ms(__us / 1000.0);
     73e:	c6 01       	movw	r24, r12
     740:	b5 01       	movw	r22, r10
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	4a e7       	ldi	r20, 0x7A	; 122
     748:	54 e4       	ldi	r21, 0x44	; 68
     74a:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__divsf3>
     74e:	5b 01       	movw	r10, r22
     750:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	4a e7       	ldi	r20, 0x7A	; 122
     758:	55 e4       	ldi	r21, 0x45	; 69
     75a:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
     75e:	7b 01       	movw	r14, r22
     760:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e8       	ldi	r20, 0x80	; 128
     768:	5f e3       	ldi	r21, 0x3F	; 63
     76a:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
     76e:	88 23       	and	r24, r24
     770:	1c f4       	brge	.+6      	; 0x778 <dxl_hal_timeout+0xc6>
     772:	61 e0       	ldi	r22, 0x01	; 1
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	24 c0       	rjmp	.+72     	; 0x7c0 <dxl_hal_timeout+0x10e>
		__ticks = 1;
	else if (__tmp > 65535)
     778:	c8 01       	movw	r24, r16
     77a:	b7 01       	movw	r22, r14
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	3f ef       	ldi	r19, 0xFF	; 255
     780:	4f e7       	ldi	r20, 0x7F	; 127
     782:	57 e4       	ldi	r21, 0x47	; 71
     784:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__gesf2>
     788:	18 16       	cp	r1, r24
     78a:	b4 f4       	brge	.+44     	; 0x7b8 <dxl_hal_timeout+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     78c:	c6 01       	movw	r24, r12
     78e:	b5 01       	movw	r22, r10
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	40 e2       	ldi	r20, 0x20	; 32
     796:	51 e4       	ldi	r21, 0x41	; 65
     798:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
     79c:	0e 94 12 18 	call	0x3024	; 0x3024 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7a0:	80 e9       	ldi	r24, 0x90	; 144
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <dxl_hal_timeout+0xfe>
     7a6:	fc 01       	movw	r30, r24
     7a8:	31 97       	sbiw	r30, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <dxl_hal_timeout+0xf6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ac:	61 50       	subi	r22, 0x01	; 1
     7ae:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b0:	61 15       	cp	r22, r1
     7b2:	71 05       	cpc	r23, r1
     7b4:	c1 f7       	brne	.-16     	; 0x7a6 <dxl_hal_timeout+0xf4>
     7b6:	0e c0       	rjmp	.+28     	; 0x7d4 <dxl_hal_timeout+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7b8:	c8 01       	movw	r24, r16
     7ba:	b7 01       	movw	r22, r14
     7bc:	0e 94 12 18 	call	0x3024	; 0x3024 <__fixunssfsi>
     7c0:	cb 01       	movw	r24, r22
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	f1 f7       	brne	.-4      	; 0x7c2 <dxl_hal_timeout+0x110>
     7c6:	06 c0       	rjmp	.+12     	; 0x7d4 <dxl_hal_timeout+0x122>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     7c8:	c8 01       	movw	r24, r16
     7ca:	b7 01       	movw	r22, r14
     7cc:	0e 94 12 18 	call	0x3024	; 0x3024 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7d0:	6a 95       	dec	r22
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <dxl_hal_timeout+0x11e>
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	c9 01       	movw	r24, r18
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	ff 90       	pop	r15
     7e0:	ef 90       	pop	r14
     7e2:	df 90       	pop	r13
     7e4:	cf 90       	pop	r12
     7e6:	bf 90       	pop	r11
     7e8:	af 90       	pop	r10
     7ea:	08 95       	ret

000007ec <dxl_hal_get_qstate>:
     7ec:	90 91 2a 04 	lds	r25, 0x042A
     7f0:	80 91 2b 04 	lds	r24, 0x042B
     7f4:	98 17       	cp	r25, r24
     7f6:	19 f4       	brne	.+6      	; 0x7fe <dxl_hal_get_qstate+0x12>
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	17 c0       	rjmp	.+46     	; 0x82c <dxl_hal_get_qstate+0x40>
     7fe:	90 91 2a 04 	lds	r25, 0x042A
     802:	80 91 2b 04 	lds	r24, 0x042B
     806:	98 17       	cp	r25, r24
     808:	38 f4       	brcc	.+14     	; 0x818 <dxl_hal_get_qstate+0x2c>
     80a:	80 91 2b 04 	lds	r24, 0x042B
     80e:	90 91 2a 04 	lds	r25, 0x042A
     812:	28 2f       	mov	r18, r24
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	08 c0       	rjmp	.+16     	; 0x828 <dxl_hal_get_qstate+0x3c>
     818:	80 91 2b 04 	lds	r24, 0x042B
     81c:	90 91 2a 04 	lds	r25, 0x042A
     820:	28 2f       	mov	r18, r24
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	20 50       	subi	r18, 0x00	; 0
     826:	3f 4f       	sbci	r19, 0xFF	; 255
     828:	29 1b       	sub	r18, r25
     82a:	31 09       	sbc	r19, r1
     82c:	c9 01       	movw	r24, r18
     82e:	08 95       	ret

00000830 <dxl_hal_put_queue>:
     830:	1f 93       	push	r17
     832:	18 2f       	mov	r17, r24
     834:	db df       	rcall	.-74     	; 0x7ec <dxl_hal_get_qstate>
     836:	8f 3f       	cpi	r24, 0xFF	; 255
     838:	91 05       	cpc	r25, r1
     83a:	91 f0       	breq	.+36     	; 0x860 <dxl_hal_put_queue+0x30>
     83c:	e0 91 2b 04 	lds	r30, 0x042B
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	e6 5d       	subi	r30, 0xD6	; 214
     844:	fc 4f       	sbci	r31, 0xFC	; 252
     846:	10 83       	st	Z, r17
     848:	80 91 2b 04 	lds	r24, 0x042B
     84c:	8f 3f       	cpi	r24, 0xFF	; 255
     84e:	19 f4       	brne	.+6      	; 0x856 <dxl_hal_put_queue+0x26>
     850:	10 92 2b 04 	sts	0x042B, r1
     854:	05 c0       	rjmp	.+10     	; 0x860 <dxl_hal_put_queue+0x30>
     856:	80 91 2b 04 	lds	r24, 0x042B
     85a:	8f 5f       	subi	r24, 0xFF	; 255
     85c:	80 93 2b 04 	sts	0x042B, r24
     860:	1f 91       	pop	r17
     862:	08 95       	ret

00000864 <dxl_hal_get_queue>:
     864:	90 91 2a 04 	lds	r25, 0x042A
     868:	80 91 2b 04 	lds	r24, 0x042B
     86c:	98 17       	cp	r25, r24
     86e:	11 f4       	brne	.+4      	; 0x874 <dxl_hal_get_queue+0x10>
     870:	ef ef       	ldi	r30, 0xFF	; 255
     872:	12 c0       	rjmp	.+36     	; 0x898 <dxl_hal_get_queue+0x34>
     874:	e0 91 2a 04 	lds	r30, 0x042A
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	e6 5d       	subi	r30, 0xD6	; 214
     87c:	fc 4f       	sbci	r31, 0xFC	; 252
     87e:	e0 81       	ld	r30, Z
     880:	80 91 2a 04 	lds	r24, 0x042A
     884:	8f 3f       	cpi	r24, 0xFF	; 255
     886:	19 f4       	brne	.+6      	; 0x88e <dxl_hal_get_queue+0x2a>
     888:	10 92 2a 04 	sts	0x042A, r1
     88c:	05 c0       	rjmp	.+10     	; 0x898 <dxl_hal_get_queue+0x34>
     88e:	80 91 2a 04 	lds	r24, 0x042A
     892:	8f 5f       	subi	r24, 0xFF	; 255
     894:	80 93 2a 04 	sts	0x042A, r24
     898:	8e 2f       	mov	r24, r30
     89a:	08 95       	ret

0000089c <dxl_hal_rx>:
     89c:	ef 92       	push	r14
     89e:	ff 92       	push	r15
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	7c 01       	movw	r14, r24
     8aa:	eb 01       	movw	r28, r22
     8ac:	90 91 2a 04 	lds	r25, 0x042A
     8b0:	80 91 2b 04 	lds	r24, 0x042B
     8b4:	98 17       	cp	r25, r24
     8b6:	19 f4       	brne	.+6      	; 0x8be <dxl_hal_rx+0x22>
     8b8:	00 e0       	ldi	r16, 0x00	; 0
     8ba:	10 e0       	ldi	r17, 0x00	; 0
     8bc:	12 c0       	rjmp	.+36     	; 0x8e2 <dxl_hal_rx+0x46>
     8be:	96 df       	rcall	.-212    	; 0x7ec <dxl_hal_get_qstate>
     8c0:	8c 01       	movw	r16, r24
     8c2:	c8 17       	cp	r28, r24
     8c4:	d9 07       	cpc	r29, r25
     8c6:	0c f4       	brge	.+2      	; 0x8ca <dxl_hal_rx+0x2e>
     8c8:	8e 01       	movw	r16, r28
     8ca:	c0 e0       	ldi	r28, 0x00	; 0
     8cc:	d0 e0       	ldi	r29, 0x00	; 0
     8ce:	06 c0       	rjmp	.+12     	; 0x8dc <dxl_hal_rx+0x40>
     8d0:	c9 df       	rcall	.-110    	; 0x864 <dxl_hal_get_queue>
     8d2:	f7 01       	movw	r30, r14
     8d4:	ec 0f       	add	r30, r28
     8d6:	fd 1f       	adc	r31, r29
     8d8:	80 83       	st	Z, r24
     8da:	21 96       	adiw	r28, 0x01	; 1
     8dc:	c0 17       	cp	r28, r16
     8de:	d1 07       	cpc	r29, r17
     8e0:	bc f3       	brlt	.-18     	; 0x8d0 <dxl_hal_rx+0x34>
     8e2:	c8 01       	movw	r24, r16
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	0f 91       	pop	r16
     8ec:	ff 90       	pop	r15
     8ee:	ef 90       	pop	r14
     8f0:	08 95       	ret

000008f2 <__vector_25>:
     8f2:	1f 92       	push	r1
     8f4:	0f 92       	push	r0
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	0f 92       	push	r0
     8fa:	0b b6       	in	r0, 0x3b	; 59
     8fc:	0f 92       	push	r0
     8fe:	11 24       	eor	r1, r1
     900:	2f 93       	push	r18
     902:	3f 93       	push	r19
     904:	4f 93       	push	r20
     906:	5f 93       	push	r21
     908:	6f 93       	push	r22
     90a:	7f 93       	push	r23
     90c:	8f 93       	push	r24
     90e:	9f 93       	push	r25
     910:	af 93       	push	r26
     912:	bf 93       	push	r27
     914:	ef 93       	push	r30
     916:	ff 93       	push	r31
     918:	80 91 c6 00 	lds	r24, 0x00C6
     91c:	89 df       	rcall	.-238    	; 0x830 <dxl_hal_put_queue>
     91e:	ff 91       	pop	r31
     920:	ef 91       	pop	r30
     922:	bf 91       	pop	r27
     924:	af 91       	pop	r26
     926:	9f 91       	pop	r25
     928:	8f 91       	pop	r24
     92a:	7f 91       	pop	r23
     92c:	6f 91       	pop	r22
     92e:	5f 91       	pop	r21
     930:	4f 91       	pop	r20
     932:	3f 91       	pop	r19
     934:	2f 91       	pop	r18
     936:	0f 90       	pop	r0
     938:	0b be       	out	0x3b, r0	; 59
     93a:	0f 90       	pop	r0
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	0f 90       	pop	r0
     940:	1f 90       	pop	r1
     942:	18 95       	reti

00000944 <serial_write>:
     944:	ac 01       	movw	r20, r24
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	0c c0       	rjmp	.+24     	; 0x964 <serial_write+0x20>
     94c:	80 91 c8 00 	lds	r24, 0x00C8
     950:	85 ff       	sbrs	r24, 5
     952:	fc cf       	rjmp	.-8      	; 0x94c <serial_write+0x8>
     954:	fa 01       	movw	r30, r20
     956:	e2 0f       	add	r30, r18
     958:	f3 1f       	adc	r31, r19
     95a:	80 81       	ld	r24, Z
     95c:	80 93 ce 00 	sts	0x00CE, r24
     960:	2f 5f       	subi	r18, 0xFF	; 255
     962:	3f 4f       	sbci	r19, 0xFF	; 255
     964:	26 17       	cp	r18, r22
     966:	37 07       	cpc	r19, r23
     968:	8c f3       	brlt	.-30     	; 0x94c <serial_write+0x8>
     96a:	08 95       	ret

0000096c <serial_read>:
     96c:	dc 01       	movw	r26, r24
     96e:	90 91 ac 04 	lds	r25, 0x04AC
     972:	80 91 ad 04 	lds	r24, 0x04AD
     976:	98 17       	cp	r25, r24
     978:	11 f4       	brne	.+4      	; 0x97e <serial_read+0x12>
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	08 95       	ret
     97e:	90 91 ac 04 	lds	r25, 0x04AC
     982:	80 91 ad 04 	lds	r24, 0x04AD
     986:	98 17       	cp	r25, r24
     988:	19 f4       	brne	.+6      	; 0x990 <serial_read+0x24>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	17 c0       	rjmp	.+46     	; 0x9be <serial_read+0x52>
     990:	90 91 ac 04 	lds	r25, 0x04AC
     994:	80 91 ad 04 	lds	r24, 0x04AD
     998:	98 17       	cp	r25, r24
     99a:	38 f4       	brcc	.+14     	; 0x9aa <serial_read+0x3e>
     99c:	80 91 ad 04 	lds	r24, 0x04AD
     9a0:	90 91 ac 04 	lds	r25, 0x04AC
     9a4:	28 2f       	mov	r18, r24
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	08 c0       	rjmp	.+16     	; 0x9ba <serial_read+0x4e>
     9aa:	80 91 ad 04 	lds	r24, 0x04AD
     9ae:	90 91 ac 04 	lds	r25, 0x04AC
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	20 58       	subi	r18, 0x80	; 128
     9b8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ba:	29 1b       	sub	r18, r25
     9bc:	31 09       	sbc	r19, r1
     9be:	a9 01       	movw	r20, r18
     9c0:	62 17       	cp	r22, r18
     9c2:	73 07       	cpc	r23, r19
     9c4:	0c f4       	brge	.+2      	; 0x9c8 <serial_read+0x5c>
     9c6:	ab 01       	movw	r20, r22
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	20 c0       	rjmp	.+64     	; 0xa0e <serial_read+0xa2>
     9ce:	90 91 ac 04 	lds	r25, 0x04AC
     9d2:	80 91 ad 04 	lds	r24, 0x04AD
     9d6:	98 17       	cp	r25, r24
     9d8:	11 f4       	brne	.+4      	; 0x9de <serial_read+0x72>
     9da:	9f ef       	ldi	r25, 0xFF	; 255
     9dc:	12 c0       	rjmp	.+36     	; 0xa02 <serial_read+0x96>
     9de:	e0 91 ac 04 	lds	r30, 0x04AC
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	e4 5d       	subi	r30, 0xD4	; 212
     9e6:	fb 4f       	sbci	r31, 0xFB	; 251
     9e8:	90 81       	ld	r25, Z
     9ea:	80 91 ac 04 	lds	r24, 0x04AC
     9ee:	8f 37       	cpi	r24, 0x7F	; 127
     9f0:	19 f4       	brne	.+6      	; 0x9f8 <serial_read+0x8c>
     9f2:	10 92 ac 04 	sts	0x04AC, r1
     9f6:	05 c0       	rjmp	.+10     	; 0xa02 <serial_read+0x96>
     9f8:	80 91 ac 04 	lds	r24, 0x04AC
     9fc:	8f 5f       	subi	r24, 0xFF	; 255
     9fe:	80 93 ac 04 	sts	0x04AC, r24
     a02:	fd 01       	movw	r30, r26
     a04:	e2 0f       	add	r30, r18
     a06:	f3 1f       	adc	r31, r19
     a08:	90 83       	st	Z, r25
     a0a:	2f 5f       	subi	r18, 0xFF	; 255
     a0c:	3f 4f       	sbci	r19, 0xFF	; 255
     a0e:	24 17       	cp	r18, r20
     a10:	35 07       	cpc	r19, r21
     a12:	ec f2       	brlt	.-70     	; 0x9ce <serial_read+0x62>
     a14:	84 2f       	mov	r24, r20
     a16:	08 95       	ret

00000a18 <serial_get_qstate>:
     a18:	90 91 ac 04 	lds	r25, 0x04AC
     a1c:	80 91 ad 04 	lds	r24, 0x04AD
     a20:	98 17       	cp	r25, r24
     a22:	19 f4       	brne	.+6      	; 0xa2a <serial_get_qstate+0x12>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	17 c0       	rjmp	.+46     	; 0xa58 <serial_get_qstate+0x40>
     a2a:	90 91 ac 04 	lds	r25, 0x04AC
     a2e:	80 91 ad 04 	lds	r24, 0x04AD
     a32:	98 17       	cp	r25, r24
     a34:	38 f4       	brcc	.+14     	; 0xa44 <serial_get_qstate+0x2c>
     a36:	80 91 ad 04 	lds	r24, 0x04AD
     a3a:	90 91 ac 04 	lds	r25, 0x04AC
     a3e:	28 2f       	mov	r18, r24
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	08 c0       	rjmp	.+16     	; 0xa54 <serial_get_qstate+0x3c>
     a44:	80 91 ad 04 	lds	r24, 0x04AD
     a48:	90 91 ac 04 	lds	r25, 0x04AC
     a4c:	28 2f       	mov	r18, r24
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	20 58       	subi	r18, 0x80	; 128
     a52:	3f 4f       	sbci	r19, 0xFF	; 255
     a54:	29 1b       	sub	r18, r25
     a56:	31 09       	sbc	r19, r1
     a58:	c9 01       	movw	r24, r18
     a5a:	08 95       	ret

00000a5c <serial_put_queue>:
     a5c:	48 2f       	mov	r20, r24
     a5e:	90 91 ac 04 	lds	r25, 0x04AC
     a62:	80 91 ad 04 	lds	r24, 0x04AD
     a66:	98 17       	cp	r25, r24
     a68:	d1 f0       	breq	.+52     	; 0xa9e <serial_put_queue+0x42>
     a6a:	90 91 ac 04 	lds	r25, 0x04AC
     a6e:	80 91 ad 04 	lds	r24, 0x04AD
     a72:	98 17       	cp	r25, r24
     a74:	38 f4       	brcc	.+14     	; 0xa84 <serial_put_queue+0x28>
     a76:	80 91 ad 04 	lds	r24, 0x04AD
     a7a:	90 91 ac 04 	lds	r25, 0x04AC
     a7e:	28 2f       	mov	r18, r24
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	08 c0       	rjmp	.+16     	; 0xa94 <serial_put_queue+0x38>
     a84:	80 91 ad 04 	lds	r24, 0x04AD
     a88:	90 91 ac 04 	lds	r25, 0x04AC
     a8c:	28 2f       	mov	r18, r24
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	20 58       	subi	r18, 0x80	; 128
     a92:	3f 4f       	sbci	r19, 0xFF	; 255
     a94:	29 1b       	sub	r18, r25
     a96:	31 09       	sbc	r19, r1
     a98:	2f 37       	cpi	r18, 0x7F	; 127
     a9a:	31 05       	cpc	r19, r1
     a9c:	91 f0       	breq	.+36     	; 0xac2 <serial_put_queue+0x66>
     a9e:	e0 91 ad 04 	lds	r30, 0x04AD
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	e4 5d       	subi	r30, 0xD4	; 212
     aa6:	fb 4f       	sbci	r31, 0xFB	; 251
     aa8:	40 83       	st	Z, r20
     aaa:	80 91 ad 04 	lds	r24, 0x04AD
     aae:	8f 37       	cpi	r24, 0x7F	; 127
     ab0:	19 f4       	brne	.+6      	; 0xab8 <serial_put_queue+0x5c>
     ab2:	10 92 ad 04 	sts	0x04AD, r1
     ab6:	08 95       	ret
     ab8:	80 91 ad 04 	lds	r24, 0x04AD
     abc:	8f 5f       	subi	r24, 0xFF	; 255
     abe:	80 93 ad 04 	sts	0x04AD, r24
     ac2:	08 95       	ret

00000ac4 <serial_get_queue>:
     ac4:	90 91 ac 04 	lds	r25, 0x04AC
     ac8:	80 91 ad 04 	lds	r24, 0x04AD
     acc:	98 17       	cp	r25, r24
     ace:	11 f4       	brne	.+4      	; 0xad4 <serial_get_queue+0x10>
     ad0:	ef ef       	ldi	r30, 0xFF	; 255
     ad2:	12 c0       	rjmp	.+36     	; 0xaf8 <serial_get_queue+0x34>
     ad4:	e0 91 ac 04 	lds	r30, 0x04AC
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	e4 5d       	subi	r30, 0xD4	; 212
     adc:	fb 4f       	sbci	r31, 0xFB	; 251
     ade:	e0 81       	ld	r30, Z
     ae0:	80 91 ac 04 	lds	r24, 0x04AC
     ae4:	8f 37       	cpi	r24, 0x7F	; 127
     ae6:	19 f4       	brne	.+6      	; 0xaee <serial_get_queue+0x2a>
     ae8:	10 92 ac 04 	sts	0x04AC, r1
     aec:	05 c0       	rjmp	.+10     	; 0xaf8 <serial_get_queue+0x34>
     aee:	80 91 ac 04 	lds	r24, 0x04AC
     af2:	8f 5f       	subi	r24, 0xFF	; 255
     af4:	80 93 ac 04 	sts	0x04AC, r24
     af8:	8e 2f       	mov	r24, r30
     afa:	08 95       	ret

00000afc <__vector_36>:
     afc:	1f 92       	push	r1
     afe:	0f 92       	push	r0
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	0f 92       	push	r0
     b04:	0b b6       	in	r0, 0x3b	; 59
     b06:	0f 92       	push	r0
     b08:	11 24       	eor	r1, r1
     b0a:	2f 93       	push	r18
     b0c:	3f 93       	push	r19
     b0e:	4f 93       	push	r20
     b10:	5f 93       	push	r21
     b12:	6f 93       	push	r22
     b14:	7f 93       	push	r23
     b16:	8f 93       	push	r24
     b18:	9f 93       	push	r25
     b1a:	af 93       	push	r26
     b1c:	bf 93       	push	r27
     b1e:	ef 93       	push	r30
     b20:	ff 93       	push	r31
     b22:	80 91 ce 00 	lds	r24, 0x00CE
     b26:	9a df       	rcall	.-204    	; 0xa5c <serial_put_queue>
     b28:	ff 91       	pop	r31
     b2a:	ef 91       	pop	r30
     b2c:	bf 91       	pop	r27
     b2e:	af 91       	pop	r26
     b30:	9f 91       	pop	r25
     b32:	8f 91       	pop	r24
     b34:	7f 91       	pop	r23
     b36:	6f 91       	pop	r22
     b38:	5f 91       	pop	r21
     b3a:	4f 91       	pop	r20
     b3c:	3f 91       	pop	r19
     b3e:	2f 91       	pop	r18
     b40:	0f 90       	pop	r0
     b42:	0b be       	out	0x3b, r0	; 59
     b44:	0f 90       	pop	r0
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	0f 90       	pop	r0
     b4a:	1f 90       	pop	r1
     b4c:	18 95       	reti

00000b4e <std_putchar>:
     b4e:	df 93       	push	r29
     b50:	cf 93       	push	r28
     b52:	0f 92       	push	r0
     b54:	0f 92       	push	r0
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	98 2f       	mov	r25, r24
     b5c:	8a 30       	cpi	r24, 0x0A	; 10
     b5e:	99 f4       	brne	.+38     	; 0xb86 <std_putchar+0x38>
     b60:	8d e0       	ldi	r24, 0x0D	; 13
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	9a 83       	std	Y+2, r25	; 0x02
     b66:	fe 01       	movw	r30, r28
     b68:	31 96       	adiw	r30, 0x01	; 1
     b6a:	9e 01       	movw	r18, r28
     b6c:	2d 5f       	subi	r18, 0xFD	; 253
     b6e:	3f 4f       	sbci	r19, 0xFF	; 255
     b70:	80 91 c8 00 	lds	r24, 0x00C8
     b74:	85 ff       	sbrs	r24, 5
     b76:	fc cf       	rjmp	.-8      	; 0xb70 <std_putchar+0x22>
     b78:	81 91       	ld	r24, Z+
     b7a:	80 93 ce 00 	sts	0x00CE, r24
     b7e:	e2 17       	cp	r30, r18
     b80:	f3 07       	cpc	r31, r19
     b82:	b1 f7       	brne	.-20     	; 0xb70 <std_putchar+0x22>
     b84:	06 c0       	rjmp	.+12     	; 0xb92 <std_putchar+0x44>
     b86:	80 91 c8 00 	lds	r24, 0x00C8
     b8a:	85 ff       	sbrs	r24, 5
     b8c:	fc cf       	rjmp	.-8      	; 0xb86 <std_putchar+0x38>
     b8e:	90 93 ce 00 	sts	0x00CE, r25
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	cf 91       	pop	r28
     b9c:	df 91       	pop	r29
     b9e:	08 95       	ret

00000ba0 <std_getchar>:
     ba0:	90 91 ac 04 	lds	r25, 0x04AC
     ba4:	80 91 ad 04 	lds	r24, 0x04AD
     ba8:	98 17       	cp	r25, r24
     baa:	d1 f3       	breq	.-12     	; 0xba0 <std_getchar>
     bac:	90 91 ac 04 	lds	r25, 0x04AC
     bb0:	80 91 ad 04 	lds	r24, 0x04AD
     bb4:	98 17       	cp	r25, r24
     bb6:	38 f4       	brcc	.+14     	; 0xbc6 <std_getchar+0x26>
     bb8:	80 91 ad 04 	lds	r24, 0x04AD
     bbc:	90 91 ac 04 	lds	r25, 0x04AC
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	08 c0       	rjmp	.+16     	; 0xbd6 <std_getchar+0x36>
     bc6:	80 91 ad 04 	lds	r24, 0x04AD
     bca:	90 91 ac 04 	lds	r25, 0x04AC
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	20 58       	subi	r18, 0x80	; 128
     bd4:	3f 4f       	sbci	r19, 0xFF	; 255
     bd6:	29 1b       	sub	r18, r25
     bd8:	31 09       	sbc	r19, r1
     bda:	23 2b       	or	r18, r19
     bdc:	09 f3       	breq	.-62     	; 0xba0 <std_getchar>
     bde:	90 91 ac 04 	lds	r25, 0x04AC
     be2:	80 91 ad 04 	lds	r24, 0x04AD
     be6:	98 17       	cp	r25, r24
     be8:	11 f4       	brne	.+4      	; 0xbee <std_getchar+0x4e>
     bea:	ef ef       	ldi	r30, 0xFF	; 255
     bec:	15 c0       	rjmp	.+42     	; 0xc18 <std_getchar+0x78>
     bee:	e0 91 ac 04 	lds	r30, 0x04AC
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	e4 5d       	subi	r30, 0xD4	; 212
     bf6:	fb 4f       	sbci	r31, 0xFB	; 251
     bf8:	e0 81       	ld	r30, Z
     bfa:	80 91 ac 04 	lds	r24, 0x04AC
     bfe:	8f 37       	cpi	r24, 0x7F	; 127
     c00:	19 f4       	brne	.+6      	; 0xc08 <std_getchar+0x68>
     c02:	10 92 ac 04 	sts	0x04AC, r1
     c06:	05 c0       	rjmp	.+10     	; 0xc12 <std_getchar+0x72>
     c08:	80 91 ac 04 	lds	r24, 0x04AC
     c0c:	8f 5f       	subi	r24, 0xFF	; 255
     c0e:	80 93 ac 04 	sts	0x04AC, r24
     c12:	ed 30       	cpi	r30, 0x0D	; 13
     c14:	09 f4       	brne	.+2      	; 0xc18 <std_getchar+0x78>
     c16:	ea e0       	ldi	r30, 0x0A	; 10
     c18:	8e 2f       	mov	r24, r30
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	08 95       	ret

00000c1e <serial_initialize>:
     c1e:	0e 94 40 18 	call	0x3080	; 0x3080 <__floatsisf>
     c22:	9b 01       	movw	r18, r22
     c24:	ac 01       	movw	r20, r24
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	74 e2       	ldi	r23, 0x24	; 36
     c2a:	84 ef       	ldi	r24, 0xF4	; 244
     c2c:	99 e4       	ldi	r25, 0x49	; 73
     c2e:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__divsf3>
     c32:	0e 94 12 18 	call	0x3024	; 0x3024 <__fixunssfsi>
     c36:	61 50       	subi	r22, 0x01	; 1
     c38:	70 40       	sbci	r23, 0x00	; 0
     c3a:	22 e4       	ldi	r18, 0x42	; 66
     c3c:	20 93 c8 00 	sts	0x00C8, r18
     c40:	28 e9       	ldi	r18, 0x98	; 152
     c42:	20 93 c9 00 	sts	0x00C9, r18
     c46:	26 e0       	ldi	r18, 0x06	; 6
     c48:	20 93 ca 00 	sts	0x00CA, r18
     c4c:	2f ef       	ldi	r18, 0xFF	; 255
     c4e:	20 93 ce 00 	sts	0x00CE, r18
     c52:	10 92 ac 04 	sts	0x04AC, r1
     c56:	10 92 ad 04 	sts	0x04AD, r1
     c5a:	27 2f       	mov	r18, r23
     c5c:	33 27       	eor	r19, r19
     c5e:	27 fd       	sbrc	r18, 7
     c60:	3a 95       	dec	r19
     c62:	20 93 cd 00 	sts	0x00CD, r18
     c66:	60 93 cc 00 	sts	0x00CC, r22
     c6a:	72 98       	cbi	0x0e, 2	; 14
     c6c:	73 9a       	sbi	0x0e, 3	; 14
     c6e:	87 ea       	ldi	r24, 0xA7	; 167
     c70:	95 e0       	ldi	r25, 0x05	; 5
     c72:	60 ed       	ldi	r22, 0xD0	; 208
     c74:	75 e0       	ldi	r23, 0x05	; 5
     c76:	0e 94 65 1a 	call	0x34ca	; 0x34ca <fdevopen>
     c7a:	90 93 af 04 	sts	0x04AF, r25
     c7e:	80 93 ae 04 	sts	0x04AE, r24
     c82:	08 95       	ret

00000c84 <parseAll>:
	return 1;
}

//Begin general function declarations

int parseAll(char dataIn){
     c84:	cf 92       	push	r12
     c86:	df 92       	push	r13
     c88:	ef 92       	push	r14
     c8a:	ff 92       	push	r15
	int parseError = 0;
	
	switch (parseState){
     c8c:	20 91 10 02 	lds	r18, 0x0210
     c90:	30 91 11 02 	lds	r19, 0x0211
     c94:	22 30       	cpi	r18, 0x02	; 2
     c96:	31 05       	cpc	r19, r1
     c98:	09 f4       	brne	.+2      	; 0xc9c <parseAll+0x18>
     c9a:	5a c0       	rjmp	.+180    	; 0xd50 <parseAll+0xcc>
     c9c:	24 f4       	brge	.+8      	; 0xca6 <parseAll+0x22>
     c9e:	21 30       	cpi	r18, 0x01	; 1
     ca0:	31 05       	cpc	r19, r1
     ca2:	51 f0       	breq	.+20     	; 0xcb8 <parseAll+0x34>
     ca4:	89 c1       	rjmp	.+786    	; 0xfb8 <parseAll+0x334>
     ca6:	23 30       	cpi	r18, 0x03	; 3
     ca8:	31 05       	cpc	r19, r1
     caa:	09 f4       	brne	.+2      	; 0xcae <parseAll+0x2a>
     cac:	b6 c0       	rjmp	.+364    	; 0xe1a <parseAll+0x196>
     cae:	24 30       	cpi	r18, 0x04	; 4
     cb0:	31 05       	cpc	r19, r1
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <parseAll+0x32>
     cb4:	17 c1       	rjmp	.+558    	; 0xee4 <parseAll+0x260>
     cb6:	80 c1       	rjmp	.+768    	; 0xfb8 <parseAll+0x334>
		
		case WATCH_BEGIN:
			if(dataIn == '$'){
     cb8:	84 32       	cpi	r24, 0x24	; 36
     cba:	29 f5       	brne	.+74     	; 0xd06 <parseAll+0x82>
				parseState = WATCH_X;
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	90 93 11 02 	sts	0x0211, r25
     cc4:	80 93 10 02 	sts	0x0210, r24
				xBuffer = 0;
     cc8:	10 92 b4 04 	sts	0x04B4, r1
     ccc:	10 92 b5 04 	sts	0x04B5, r1
     cd0:	10 92 b6 04 	sts	0x04B6, r1
     cd4:	10 92 b7 04 	sts	0x04B7, r1
				yBuffer = 0;
     cd8:	10 92 b0 04 	sts	0x04B0, r1
     cdc:	10 92 b1 04 	sts	0x04B1, r1
     ce0:	10 92 b2 04 	sts	0x04B2, r1
     ce4:	10 92 b3 04 	sts	0x04B3, r1
				zBuffer = 0;
     ce8:	10 92 0a 02 	sts	0x020A, r1
     cec:	10 92 0b 02 	sts	0x020B, r1
     cf0:	10 92 0c 02 	sts	0x020C, r1
     cf4:	10 92 0d 02 	sts	0x020D, r1
				signState = POSITIVE;	
     cf8:	87 e0       	ldi	r24, 0x07	; 7
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	90 93 09 02 	sts	0x0209, r25
     d00:	80 93 08 02 	sts	0x0208, r24
     d04:	59 c1       	rjmp	.+690    	; 0xfb8 <parseAll+0x334>
				;//printf("\nReading Packet...\n");
			}
			else if((dataIn == 'y') && (dataState == CONFIRM_DATA)){
     d06:	89 37       	cpi	r24, 0x79	; 121
     d08:	69 f4       	brne	.+26     	; 0xd24 <parseAll+0xa0>
     d0a:	80 91 0e 02 	lds	r24, 0x020E
     d0e:	90 91 0f 02 	lds	r25, 0x020F
     d12:	09 97       	sbiw	r24, 0x09	; 9
     d14:	b1 f4       	brne	.+44     	; 0xd42 <parseAll+0xbe>
				dataState = SEND_DATA;
     d16:	8a e0       	ldi	r24, 0x0A	; 10
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	90 93 0f 02 	sts	0x020F, r25
     d1e:	80 93 0e 02 	sts	0x020E, r24
     d22:	4a c1       	rjmp	.+660    	; 0xfb8 <parseAll+0x334>
			}
			else if((dataIn == 'n') && (dataState == NEW_DATA)){
     d24:	8e 36       	cpi	r24, 0x6E	; 110
     d26:	69 f4       	brne	.+26     	; 0xd42 <parseAll+0xbe>
     d28:	80 91 0e 02 	lds	r24, 0x020E
     d2c:	90 91 0f 02 	lds	r25, 0x020F
     d30:	06 97       	sbiw	r24, 0x06	; 6
     d32:	39 f4       	brne	.+14     	; 0xd42 <parseAll+0xbe>
				;//printf("\nAbort Send!!\n\n");
				dataState = OLD_DATA;
     d34:	85 e0       	ldi	r24, 0x05	; 5
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	90 93 0f 02 	sts	0x020F, r25
     d3c:	80 93 0e 02 	sts	0x020E, r24
     d40:	3b c1       	rjmp	.+630    	; 0xfb8 <parseAll+0x334>
			}
			else{
				dataState = OLD_DATA;
     d42:	85 e0       	ldi	r24, 0x05	; 5
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	90 93 0f 02 	sts	0x020F, r25
     d4a:	80 93 0e 02 	sts	0x020E, r24
     d4e:	34 c1       	rjmp	.+616    	; 0xfb8 <parseAll+0x334>
				//printf("waiting on input\n");
			}
			break;
			
		case WATCH_X:
			if((dataIn == '0') | (dataIn == '1') | (dataIn == '2') | (dataIn == '3') | (dataIn == '4') | (dataIn == '5') | (dataIn == '6') | (dataIn == '7') | (dataIn == '8') | (dataIn == '9')){
     d50:	90 ed       	ldi	r25, 0xD0	; 208
     d52:	98 0f       	add	r25, r24
     d54:	9a 30       	cpi	r25, 0x0A	; 10
     d56:	58 f5       	brcc	.+86     	; 0xdae <parseAll+0x12a>
				xBuffer = (dataIn - '0') + xBuffer*10;
     d58:	68 2f       	mov	r22, r24
     d5a:	77 27       	eor	r23, r23
     d5c:	67 fd       	sbrc	r22, 7
     d5e:	70 95       	com	r23
     d60:	60 53       	subi	r22, 0x30	; 48
     d62:	71 09       	sbc	r23, r1
     d64:	88 27       	eor	r24, r24
     d66:	77 fd       	sbrc	r23, 7
     d68:	80 95       	com	r24
     d6a:	98 2f       	mov	r25, r24
     d6c:	0e 94 40 18 	call	0x3080	; 0x3080 <__floatsisf>
     d70:	6b 01       	movw	r12, r22
     d72:	7c 01       	movw	r14, r24
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e2       	ldi	r20, 0x20	; 32
     d7a:	51 e4       	ldi	r21, 0x41	; 65
     d7c:	60 91 b4 04 	lds	r22, 0x04B4
     d80:	70 91 b5 04 	lds	r23, 0x04B5
     d84:	80 91 b6 04 	lds	r24, 0x04B6
     d88:	90 91 b7 04 	lds	r25, 0x04B7
     d8c:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
     d90:	9b 01       	movw	r18, r22
     d92:	ac 01       	movw	r20, r24
     d94:	c7 01       	movw	r24, r14
     d96:	b6 01       	movw	r22, r12
     d98:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
     d9c:	60 93 b4 04 	sts	0x04B4, r22
     da0:	70 93 b5 04 	sts	0x04B5, r23
     da4:	80 93 b6 04 	sts	0x04B6, r24
     da8:	90 93 b7 04 	sts	0x04B7, r25
     dac:	05 c1       	rjmp	.+522    	; 0xfb8 <parseAll+0x334>
			}
			else if(dataIn == ','){
     dae:	8c 32       	cpi	r24, 0x2C	; 44
     db0:	21 f5       	brne	.+72     	; 0xdfa <parseAll+0x176>
				parseState = WATCH_Y;
     db2:	83 e0       	ldi	r24, 0x03	; 3
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	90 93 11 02 	sts	0x0211, r25
     dba:	80 93 10 02 	sts	0x0210, r24
				if(signState == NEGATIVE)
     dbe:	80 91 08 02 	lds	r24, 0x0208
     dc2:	90 91 09 02 	lds	r25, 0x0209
     dc6:	08 97       	sbiw	r24, 0x08	; 8
     dc8:	89 f4       	brne	.+34     	; 0xdec <parseAll+0x168>
					xBuffer = -(xBuffer);
     dca:	80 91 b4 04 	lds	r24, 0x04B4
     dce:	90 91 b5 04 	lds	r25, 0x04B5
     dd2:	a0 91 b6 04 	lds	r26, 0x04B6
     dd6:	b0 91 b7 04 	lds	r27, 0x04B7
     dda:	b0 58       	subi	r27, 0x80	; 128
     ddc:	80 93 b4 04 	sts	0x04B4, r24
     de0:	90 93 b5 04 	sts	0x04B5, r25
     de4:	a0 93 b6 04 	sts	0x04B6, r26
     de8:	b0 93 b7 04 	sts	0x04B7, r27
				signState = POSITIVE;
     dec:	87 e0       	ldi	r24, 0x07	; 7
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	90 93 09 02 	sts	0x0209, r25
     df4:	80 93 08 02 	sts	0x0208, r24
     df8:	df c0       	rjmp	.+446    	; 0xfb8 <parseAll+0x334>
				;//printf("Read X: %f thou\n", xBuffer);
			}
			else if(dataIn == '-'){
     dfa:	8d 32       	cpi	r24, 0x2D	; 45
     dfc:	39 f4       	brne	.+14     	; 0xe0c <parseAll+0x188>
				signState = NEGATIVE;
     dfe:	88 e0       	ldi	r24, 0x08	; 8
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	90 93 09 02 	sts	0x0209, r25
     e06:	80 93 08 02 	sts	0x0208, r24
     e0a:	d6 c0       	rjmp	.+428    	; 0xfb8 <parseAll+0x334>
			}
			else{
				;//printf("\nBad Data!\n");
				parseState = WATCH_BEGIN;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	90 93 11 02 	sts	0x0211, r25
     e14:	80 93 10 02 	sts	0x0210, r24
     e18:	cf c0       	rjmp	.+414    	; 0xfb8 <parseAll+0x334>
			}
			break;
			
		case WATCH_Y:
			if((dataIn == '0') | (dataIn == '1') | (dataIn == '2') | (dataIn == '3') | (dataIn == '4') | (dataIn == '5') | (dataIn == '6') | (dataIn == '7') | (dataIn == '8') | (dataIn == '9')){
     e1a:	90 ed       	ldi	r25, 0xD0	; 208
     e1c:	98 0f       	add	r25, r24
     e1e:	9a 30       	cpi	r25, 0x0A	; 10
     e20:	58 f5       	brcc	.+86     	; 0xe78 <parseAll+0x1f4>
				yBuffer = (dataIn - '0') + yBuffer*10;
     e22:	68 2f       	mov	r22, r24
     e24:	77 27       	eor	r23, r23
     e26:	67 fd       	sbrc	r22, 7
     e28:	70 95       	com	r23
     e2a:	60 53       	subi	r22, 0x30	; 48
     e2c:	71 09       	sbc	r23, r1
     e2e:	88 27       	eor	r24, r24
     e30:	77 fd       	sbrc	r23, 7
     e32:	80 95       	com	r24
     e34:	98 2f       	mov	r25, r24
     e36:	0e 94 40 18 	call	0x3080	; 0x3080 <__floatsisf>
     e3a:	6b 01       	movw	r12, r22
     e3c:	7c 01       	movw	r14, r24
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e2       	ldi	r20, 0x20	; 32
     e44:	51 e4       	ldi	r21, 0x41	; 65
     e46:	60 91 b0 04 	lds	r22, 0x04B0
     e4a:	70 91 b1 04 	lds	r23, 0x04B1
     e4e:	80 91 b2 04 	lds	r24, 0x04B2
     e52:	90 91 b3 04 	lds	r25, 0x04B3
     e56:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
     e5a:	9b 01       	movw	r18, r22
     e5c:	ac 01       	movw	r20, r24
     e5e:	c7 01       	movw	r24, r14
     e60:	b6 01       	movw	r22, r12
     e62:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
     e66:	60 93 b0 04 	sts	0x04B0, r22
     e6a:	70 93 b1 04 	sts	0x04B1, r23
     e6e:	80 93 b2 04 	sts	0x04B2, r24
     e72:	90 93 b3 04 	sts	0x04B3, r25
     e76:	a0 c0       	rjmp	.+320    	; 0xfb8 <parseAll+0x334>
			}
			else if(dataIn == ','){
     e78:	8c 32       	cpi	r24, 0x2C	; 44
     e7a:	21 f5       	brne	.+72     	; 0xec4 <parseAll+0x240>
				parseState = WATCH_Z;
     e7c:	84 e0       	ldi	r24, 0x04	; 4
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	90 93 11 02 	sts	0x0211, r25
     e84:	80 93 10 02 	sts	0x0210, r24
				if(signState == NEGATIVE)
     e88:	80 91 08 02 	lds	r24, 0x0208
     e8c:	90 91 09 02 	lds	r25, 0x0209
     e90:	08 97       	sbiw	r24, 0x08	; 8
     e92:	89 f4       	brne	.+34     	; 0xeb6 <parseAll+0x232>
				yBuffer = -(yBuffer);
     e94:	80 91 b0 04 	lds	r24, 0x04B0
     e98:	90 91 b1 04 	lds	r25, 0x04B1
     e9c:	a0 91 b2 04 	lds	r26, 0x04B2
     ea0:	b0 91 b3 04 	lds	r27, 0x04B3
     ea4:	b0 58       	subi	r27, 0x80	; 128
     ea6:	80 93 b0 04 	sts	0x04B0, r24
     eaa:	90 93 b1 04 	sts	0x04B1, r25
     eae:	a0 93 b2 04 	sts	0x04B2, r26
     eb2:	b0 93 b3 04 	sts	0x04B3, r27
				signState = POSITIVE;
     eb6:	87 e0       	ldi	r24, 0x07	; 7
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	90 93 09 02 	sts	0x0209, r25
     ebe:	80 93 08 02 	sts	0x0208, r24
     ec2:	7a c0       	rjmp	.+244    	; 0xfb8 <parseAll+0x334>
				;//printf("Read Y: %f thou\n", yBuffer);
			}
			else if(dataIn == '-'){
     ec4:	8d 32       	cpi	r24, 0x2D	; 45
     ec6:	39 f4       	brne	.+14     	; 0xed6 <parseAll+0x252>
				signState = NEGATIVE;
     ec8:	88 e0       	ldi	r24, 0x08	; 8
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	90 93 09 02 	sts	0x0209, r25
     ed0:	80 93 08 02 	sts	0x0208, r24
     ed4:	71 c0       	rjmp	.+226    	; 0xfb8 <parseAll+0x334>
			}
			else{
				;//printf("\nBad Data!\n");
				parseState = WATCH_BEGIN;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	90 93 11 02 	sts	0x0211, r25
     ede:	80 93 10 02 	sts	0x0210, r24
     ee2:	6a c0       	rjmp	.+212    	; 0xfb8 <parseAll+0x334>
			}
			break;
			
		case WATCH_Z:
			if((dataIn == '0') | (dataIn == '1') | (dataIn == '2') | (dataIn == '3') | (dataIn == '4') | (dataIn == '5') | (dataIn == '6') | (dataIn == '7') | (dataIn == '8') | (dataIn == '9')){
     ee4:	90 ed       	ldi	r25, 0xD0	; 208
     ee6:	98 0f       	add	r25, r24
     ee8:	9a 30       	cpi	r25, 0x0A	; 10
     eea:	58 f5       	brcc	.+86     	; 0xf42 <parseAll+0x2be>
				zBuffer = (dataIn - '0') + zBuffer*10;
     eec:	68 2f       	mov	r22, r24
     eee:	77 27       	eor	r23, r23
     ef0:	67 fd       	sbrc	r22, 7
     ef2:	70 95       	com	r23
     ef4:	60 53       	subi	r22, 0x30	; 48
     ef6:	71 09       	sbc	r23, r1
     ef8:	88 27       	eor	r24, r24
     efa:	77 fd       	sbrc	r23, 7
     efc:	80 95       	com	r24
     efe:	98 2f       	mov	r25, r24
     f00:	0e 94 40 18 	call	0x3080	; 0x3080 <__floatsisf>
     f04:	6b 01       	movw	r12, r22
     f06:	7c 01       	movw	r14, r24
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e2       	ldi	r20, 0x20	; 32
     f0e:	51 e4       	ldi	r21, 0x41	; 65
     f10:	60 91 0a 02 	lds	r22, 0x020A
     f14:	70 91 0b 02 	lds	r23, 0x020B
     f18:	80 91 0c 02 	lds	r24, 0x020C
     f1c:	90 91 0d 02 	lds	r25, 0x020D
     f20:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
     f24:	9b 01       	movw	r18, r22
     f26:	ac 01       	movw	r20, r24
     f28:	c7 01       	movw	r24, r14
     f2a:	b6 01       	movw	r22, r12
     f2c:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
     f30:	60 93 0a 02 	sts	0x020A, r22
     f34:	70 93 0b 02 	sts	0x020B, r23
     f38:	80 93 0c 02 	sts	0x020C, r24
     f3c:	90 93 0d 02 	sts	0x020D, r25
     f40:	3b c0       	rjmp	.+118    	; 0xfb8 <parseAll+0x334>
			}
			else if(dataIn == '*'){ //Packet complete!
     f42:	8a 32       	cpi	r24, 0x2A	; 42
     f44:	51 f5       	brne	.+84     	; 0xf9a <parseAll+0x316>
				if(signState == NEGATIVE)
     f46:	80 91 08 02 	lds	r24, 0x0208
     f4a:	90 91 09 02 	lds	r25, 0x0209
     f4e:	08 97       	sbiw	r24, 0x08	; 8
     f50:	89 f4       	brne	.+34     	; 0xf74 <parseAll+0x2f0>
				zBuffer = -(zBuffer);
     f52:	80 91 0a 02 	lds	r24, 0x020A
     f56:	90 91 0b 02 	lds	r25, 0x020B
     f5a:	a0 91 0c 02 	lds	r26, 0x020C
     f5e:	b0 91 0d 02 	lds	r27, 0x020D
     f62:	b0 58       	subi	r27, 0x80	; 128
     f64:	80 93 0a 02 	sts	0x020A, r24
     f68:	90 93 0b 02 	sts	0x020B, r25
     f6c:	a0 93 0c 02 	sts	0x020C, r26
     f70:	b0 93 0d 02 	sts	0x020D, r27
				signState = POSITIVE; //reset
     f74:	87 e0       	ldi	r24, 0x07	; 7
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	90 93 09 02 	sts	0x0209, r25
     f7c:	80 93 08 02 	sts	0x0208, r24
				;//printf("Read Z: %f thou\n", zBuffer);
				dataState = NEW_DATA; 
     f80:	86 e0       	ldi	r24, 0x06	; 6
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	90 93 0f 02 	sts	0x020F, r25
     f88:	80 93 0e 02 	sts	0x020E, r24
				parseState = WATCH_BEGIN;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	90 93 11 02 	sts	0x0211, r25
     f94:	80 93 10 02 	sts	0x0210, r24
     f98:	0f c0       	rjmp	.+30     	; 0xfb8 <parseAll+0x334>
				
				
				
			}
			else if(dataIn == '-'){
     f9a:	8d 32       	cpi	r24, 0x2D	; 45
     f9c:	39 f4       	brne	.+14     	; 0xfac <parseAll+0x328>
				signState = NEGATIVE;
     f9e:	88 e0       	ldi	r24, 0x08	; 8
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	90 93 09 02 	sts	0x0209, r25
     fa6:	80 93 08 02 	sts	0x0208, r24
     faa:	06 c0       	rjmp	.+12     	; 0xfb8 <parseAll+0x334>
			}
			else{
				;//printf("\nbad Data\n");
				parseState = WATCH_BEGIN;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	90 93 11 02 	sts	0x0211, r25
     fb4:	80 93 10 02 	sts	0x0210, r24
			}
		
	}
	
	return parseError;
}
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	ff 90       	pop	r15
     fbe:	ef 90       	pop	r14
     fc0:	df 90       	pop	r13
     fc2:	cf 90       	pop	r12
     fc4:	08 95       	ret

00000fc6 <main>:
void PrintCommStatus(int CommStatus);
void PrintErrorCode(void);


int main(void)
{
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	ae 97       	sbiw	r28, 0x2e	; 46
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
	serial_initialize(57600); // USART Initialize
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	71 ee       	ldi	r23, 0xE1	; 225
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	1d de       	rcall	.-966    	; 0xc1e <serial_initialize>
	dxl_initialize( 0, DEFAULT_BAUDNUM ); // Not using device index. i.e., 0 indexing on device number
     fe4:	61 e0       	ldi	r22, 0x01	; 1
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a2 da       	rcall	.-2748   	; 0x532 <dxl_initialize>
	dxl_initialize( 1, DEFAULT_BAUDNUM ); // Init #2
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	9d da       	rcall	.-2758   	; 0x532 <dxl_initialize>
	dxl_initialize( 2, DEFAULT_BAUDNUM ); // Init #3
     ff8:	61 e0       	ldi	r22, 0x01	; 1
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	98 da       	rcall	.-2768   	; 0x532 <dxl_initialize>
	sei(); // set enable interrupt
    1002:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1004:	2f ef       	ldi	r18, 0xFF	; 255
    1006:	83 ed       	ldi	r24, 0xD3	; 211
    1008:	90 e3       	ldi	r25, 0x30	; 48
    100a:	21 50       	subi	r18, 0x01	; 1
    100c:	80 40       	sbci	r24, 0x00	; 0
    100e:	90 40       	sbci	r25, 0x00	; 0
    1010:	e1 f7       	brne	.-8      	; 0x100a <main+0x44>
    1012:	00 c0       	rjmp	.+0      	; 0x1014 <main+0x4e>
    1014:	00 00       	nop
	int bMoving, wPresentPos;
	int CommStatus;
	
	struct point p;
	double angles[3];
	angles[0] = 180;
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	a4 e3       	ldi	r26, 0x34	; 52
    101c:	b3 e4       	ldi	r27, 0x43	; 67
    101e:	8d 87       	std	Y+13, r24	; 0x0d
    1020:	9e 87       	std	Y+14, r25	; 0x0e
    1022:	af 87       	std	Y+15, r26	; 0x0f
    1024:	b8 8b       	std	Y+16, r27	; 0x10
	angles[1] = 180;
    1026:	89 8b       	std	Y+17, r24	; 0x11
    1028:	9a 8b       	std	Y+18, r25	; 0x12
    102a:	ab 8b       	std	Y+19, r26	; 0x13
    102c:	bc 8b       	std	Y+20, r27	; 0x14
	angles[2] = 180;
    102e:	8d 8b       	std	Y+21, r24	; 0x15
    1030:	9e 8b       	std	Y+22, r25	; 0x16
    1032:	af 8b       	std	Y+23, r26	; 0x17
    1034:	b8 8f       	std	Y+24, r27	; 0x18
	
	dxl_write_word( 1, P_GOAL_POSITION_L, (int) angles[0]*11.3778 ); //4096./360=11.3778  <--- Ticks per degree
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	58 e0       	ldi	r21, 0x08	; 8
    103a:	6e e1       	ldi	r22, 0x1E	; 30
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	fb d9       	rcall	.-3082   	; 0x43a <dxl_write_word>
	dxl_write_word( 2, P_GOAL_POSITION_L, (int) angles[1]*11.3778 ); //Command #2
    1044:	69 89       	ldd	r22, Y+17	; 0x11
    1046:	7a 89       	ldd	r23, Y+18	; 0x12
    1048:	8b 89       	ldd	r24, Y+19	; 0x13
    104a:	9c 89       	ldd	r25, Y+20	; 0x14
    104c:	0e 94 0d 18 	call	0x301a	; 0x301a <__fixsfsi>
    1050:	88 27       	eor	r24, r24
    1052:	77 fd       	sbrc	r23, 7
    1054:	80 95       	com	r24
    1056:	98 2f       	mov	r25, r24
    1058:	0e 94 40 18 	call	0x3080	; 0x3080 <__floatsisf>
    105c:	28 e7       	ldi	r18, 0x78	; 120
    105e:	3b e0       	ldi	r19, 0x0B	; 11
    1060:	46 e3       	ldi	r20, 0x36	; 54
    1062:	51 e4       	ldi	r21, 0x41	; 65
    1064:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1068:	0e 94 0d 18 	call	0x301a	; 0x301a <__fixsfsi>
    106c:	ab 01       	movw	r20, r22
    106e:	6e e1       	ldi	r22, 0x1E	; 30
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	82 e0       	ldi	r24, 0x02	; 2
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	e1 d9       	rcall	.-3134   	; 0x43a <dxl_write_word>
	dxl_write_word( 3, P_GOAL_POSITION_L, (int) angles[2]*11.3778 ); //Command #3
    1078:	6d 89       	ldd	r22, Y+21	; 0x15
    107a:	7e 89       	ldd	r23, Y+22	; 0x16
    107c:	8f 89       	ldd	r24, Y+23	; 0x17
    107e:	98 8d       	ldd	r25, Y+24	; 0x18
    1080:	0e 94 0d 18 	call	0x301a	; 0x301a <__fixsfsi>
    1084:	88 27       	eor	r24, r24
    1086:	77 fd       	sbrc	r23, 7
    1088:	80 95       	com	r24
    108a:	98 2f       	mov	r25, r24
    108c:	0e 94 40 18 	call	0x3080	; 0x3080 <__floatsisf>
    1090:	28 e7       	ldi	r18, 0x78	; 120
    1092:	3b e0       	ldi	r19, 0x0B	; 11
    1094:	46 e3       	ldi	r20, 0x36	; 54
    1096:	51 e4       	ldi	r21, 0x41	; 65
    1098:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    109c:	0e 94 0d 18 	call	0x301a	; 0x301a <__fixsfsi>
    10a0:	ab 01       	movw	r20, r22
    10a2:	6e e1       	ldi	r22, 0x1E	; 30
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	83 e0       	ldi	r24, 0x03	; 3
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	c7 d9       	rcall	.-3186   	; 0x43a <dxl_write_word>
	
	printf("Initialization complete.\n");
    10ac:	8e e1       	ldi	r24, 0x1E	; 30
    10ae:	92 e0       	ldi	r25, 0x02	; 2
    10b0:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <puts>
	printf("Build 0.\n");
    10b4:	87 e3       	ldi	r24, 0x37	; 55
    10b6:	92 e0       	ldi	r25, 0x02	; 2
    10b8:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    10bc:	4a e0       	ldi	r20, 0x0A	; 10
    10be:	be 01       	movw	r22, r28
    10c0:	67 5e       	subi	r22, 0xE7	; 231
    10c2:	7f 4f       	sbci	r23, 0xFF	; 255
    10c4:	82 e0       	ldi	r24, 0x02	; 2
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 42 1a 	call	0x3484	; 0x3484 <__itoa_ncheck>
	*/
	
	char str[10];
	char str2[10];
	char str3[10];
	printf("%s\n",itoa(sizeof(int),str,10) );
    10cc:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <puts>
	float myList[3] = {4.0, 5.4, 6.7};
    10d0:	8c e0       	ldi	r24, 0x0C	; 12
    10d2:	e2 e1       	ldi	r30, 0x12	; 18
    10d4:	f2 e0       	ldi	r31, 0x02	; 2
    10d6:	de 01       	movw	r26, r28
    10d8:	93 96       	adiw	r26, 0x23	; 35
    10da:	01 90       	ld	r0, Z+
    10dc:	0d 92       	st	X+, r0
    10de:	8a 95       	dec	r24
    10e0:	e1 f7       	brne	.-8      	; 0x10da <main+0x114>
	serial_write(myList, sizeof(float)*3);
    10e2:	6c e0       	ldi	r22, 0x0C	; 12
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	ce 01       	movw	r24, r28
    10e8:	83 96       	adiw	r24, 0x23	; 35
    10ea:	2c dc       	rcall	.-1960   	; 0x944 <serial_write>
		PrintCommStatus(CommStatus);
		
		//END DYNAMIXEL DEMO CODE
		*/
		
		if(parseAll(getchar()) != 0){
    10ec:	0f 2e       	mov	r0, r31
    10ee:	f2 ec       	ldi	r31, 0xC2	; 194
    10f0:	af 2e       	mov	r10, r31
    10f2:	f4 e0       	ldi	r31, 0x04	; 4
    10f4:	bf 2e       	mov	r11, r31
    10f6:	f0 2d       	mov	r31, r0
		else if((dataState == SEND_DATA)){
			//dxl_write_word( 1, P_GOAL_POSITION_L, (int) angles[0]*11.3778 ); //4096./360=11.3778  <--- Ticks per degree
			//dxl_write_word( 2, P_GOAL_POSITION_L, (int) angles[1]*11.3778 ); //Command #2
			//dxl_write_word( 3, P_GOAL_POSITION_L, (int) angles[2]*11.3778 ); //Command #3
			;//printf("Command sent!\n\n");
			dataState = OLD_DATA;
    10f8:	0f 2e       	mov	r0, r31
    10fa:	f5 e0       	ldi	r31, 0x05	; 5
    10fc:	8f 2e       	mov	r8, r31
    10fe:	91 2c       	mov	r9, r1
    1100:	f0 2d       	mov	r31, r0
					;//printf("Angle 1: %f;  Angle 2: %f;  Angle 3: %f\n", angles[0], angles[1], angles[2]);
					;//printf("Motor 1: %f;  Motor 2: %f;  Motor 3: %f\n", (int) angles[0]*11.3778, (int) angles[1]*11.3778, (int) angles[2]*11.3778);
					;//printf("Confirm?? (y/n)\n");
				}
			
				dataState = CONFIRM_DATA;
    1102:	0f 2e       	mov	r0, r31
    1104:	f9 e0       	ldi	r31, 0x09	; 9
    1106:	6f 2e       	mov	r6, r31
    1108:	71 2c       	mov	r7, r1
    110a:	f0 2d       	mov	r31, r0
		PrintCommStatus(CommStatus);
		
		//END DYNAMIXEL DEMO CODE
		*/
		
		if(parseAll(getchar()) != 0){
    110c:	f5 01       	movw	r30, r10
    110e:	80 81       	ld	r24, Z
    1110:	91 81       	ldd	r25, Z+1	; 0x01
    1112:	0e 94 af 1a 	call	0x355e	; 0x355e <fgetc>
    1116:	b6 dd       	rcall	.-1172   	; 0xc84 <parseAll>
			memcpy(&c, &input[2], sizeof(int));
			printf("%s, %s, %s\n",itoa(a,&str,10),itoa(b,&str2,10),itoa(c,&str3,10) );
		}
		*/
		
		if(dataState == NEW_DATA){
    1118:	80 91 0e 02 	lds	r24, 0x020E
    111c:	90 91 0f 02 	lds	r25, 0x020F
    1120:	86 30       	cpi	r24, 0x06	; 6
    1122:	91 05       	cpc	r25, r1
    1124:	09 f0       	breq	.+2      	; 0x1128 <main+0x162>
    1126:	75 c0       	rjmp	.+234    	; 0x1212 <main+0x24c>
			p.x = (xBuffer)/1000.;
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	4a e7       	ldi	r20, 0x7A	; 122
    112e:	54 e4       	ldi	r21, 0x44	; 68
    1130:	60 91 b4 04 	lds	r22, 0x04B4
    1134:	70 91 b5 04 	lds	r23, 0x04B5
    1138:	80 91 b6 04 	lds	r24, 0x04B6
    113c:	90 91 b7 04 	lds	r25, 0x04B7
    1140:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__divsf3>
    1144:	e6 2e       	mov	r14, r22
    1146:	46 2f       	mov	r20, r22
    1148:	57 2f       	mov	r21, r23
    114a:	68 2f       	mov	r22, r24
    114c:	79 2f       	mov	r23, r25
    114e:	49 83       	std	Y+1, r20	; 0x01
    1150:	5a 83       	std	Y+2, r21	; 0x02
    1152:	6b 83       	std	Y+3, r22	; 0x03
    1154:	7c 83       	std	Y+4, r23	; 0x04
			p.y = (yBuffer)/1000.;
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	4a e7       	ldi	r20, 0x7A	; 122
    115c:	54 e4       	ldi	r21, 0x44	; 68
    115e:	60 91 b0 04 	lds	r22, 0x04B0
    1162:	70 91 b1 04 	lds	r23, 0x04B1
    1166:	80 91 b2 04 	lds	r24, 0x04B2
    116a:	90 91 b3 04 	lds	r25, 0x04B3
    116e:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__divsf3>
    1172:	d6 2e       	mov	r13, r22
    1174:	46 2f       	mov	r20, r22
    1176:	57 2f       	mov	r21, r23
    1178:	68 2f       	mov	r22, r24
    117a:	79 2f       	mov	r23, r25
    117c:	4d 83       	std	Y+5, r20	; 0x05
    117e:	5e 83       	std	Y+6, r21	; 0x06
    1180:	6f 83       	std	Y+7, r22	; 0x07
    1182:	78 87       	std	Y+8, r23	; 0x08
			p.z = (zBuffer)/1000.;
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	4a e7       	ldi	r20, 0x7A	; 122
    118a:	54 e4       	ldi	r21, 0x44	; 68
    118c:	60 91 0a 02 	lds	r22, 0x020A
    1190:	70 91 0b 02 	lds	r23, 0x020B
    1194:	80 91 0c 02 	lds	r24, 0x020C
    1198:	90 91 0d 02 	lds	r25, 0x020D
    119c:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__divsf3>
    11a0:	e6 2f       	mov	r30, r22
    11a2:	46 2f       	mov	r20, r22
    11a4:	57 2f       	mov	r21, r23
    11a6:	68 2f       	mov	r22, r24
    11a8:	79 2f       	mov	r23, r25
    11aa:	49 87       	std	Y+9, r20	; 0x09
    11ac:	5a 87       	std	Y+10, r21	; 0x0a
    11ae:	6b 87       	std	Y+11, r22	; 0x0b
    11b0:	7c 87       	std	Y+12, r23	; 0x0c
			
			;//printf("\n\nNew input received\n");
			
			;//printf("\nIn inches:\nX: %f\nY: %f\nZ: %f\n", p.x, p.y, p.z);
			
			if (pointValid(p)){
    11b2:	fa 80       	ldd	r15, Y+2	; 0x02
    11b4:	0b 81       	ldd	r16, Y+3	; 0x03
    11b6:	1c 81       	ldd	r17, Y+4	; 0x04
    11b8:	2d 2d       	mov	r18, r13
    11ba:	3e 81       	ldd	r19, Y+6	; 0x06
    11bc:	4f 81       	ldd	r20, Y+7	; 0x07
    11be:	58 85       	ldd	r21, Y+8	; 0x08
    11c0:	6e 2f       	mov	r22, r30
    11c2:	7a 85       	ldd	r23, Y+10	; 0x0a
    11c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    11c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    11c8:	3c d0       	rcall	.+120    	; 0x1242 <pointValid>
    11ca:	89 2b       	or	r24, r25
    11cc:	e9 f0       	breq	.+58     	; 0x1208 <main+0x242>
				;//printf("\nPoint is Valid.\n");
				printf("1");
    11ce:	81 e3       	ldi	r24, 0x31	; 49
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 ed 1a 	call	0x35da	; 0x35da <putchar>
				getAngles(angles, p);
    11d6:	c9 80       	ldd	r12, Y+1	; 0x01
    11d8:	da 80       	ldd	r13, Y+2	; 0x02
    11da:	eb 80       	ldd	r14, Y+3	; 0x03
    11dc:	fc 80       	ldd	r15, Y+4	; 0x04
    11de:	0d 81       	ldd	r16, Y+5	; 0x05
    11e0:	1e 81       	ldd	r17, Y+6	; 0x06
    11e2:	2f 81       	ldd	r18, Y+7	; 0x07
    11e4:	38 85       	ldd	r19, Y+8	; 0x08
    11e6:	49 85       	ldd	r20, Y+9	; 0x09
    11e8:	5a 85       	ldd	r21, Y+10	; 0x0a
    11ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ee:	ce 01       	movw	r24, r28
    11f0:	0d 96       	adiw	r24, 0x0d	; 13
    11f2:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <getAngles>
				printf("*");
    11f6:	8a e2       	ldi	r24, 0x2A	; 42
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 94 ed 1a 	call	0x35da	; 0x35da <putchar>
					;//printf("Angle 1: %f;  Angle 2: %f;  Angle 3: %f\n", angles[0], angles[1], angles[2]);
					;//printf("Motor 1: %f;  Motor 2: %f;  Motor 3: %f\n", (int) angles[0]*11.3778, (int) angles[1]*11.3778, (int) angles[2]*11.3778);
					;//printf("Confirm?? (y/n)\n");
				}
			
				dataState = CONFIRM_DATA;
    11fe:	70 92 0f 02 	sts	0x020F, r7
    1202:	60 92 0e 02 	sts	0x020E, r6
    1206:	82 cf       	rjmp	.-252    	; 0x110c <main+0x146>
			}
			else{
				;//printf("Point is not Valid.\n");
				;//printf("Abort.\n\n");
				dataState = OLD_DATA;
    1208:	90 92 0f 02 	sts	0x020F, r9
    120c:	80 92 0e 02 	sts	0x020E, r8
    1210:	7d cf       	rjmp	.-262    	; 0x110c <main+0x146>

			
			
			
		}
		else if((dataState == SEND_DATA)){
    1212:	8a 30       	cpi	r24, 0x0A	; 10
    1214:	91 05       	cpc	r25, r1
    1216:	29 f4       	brne	.+10     	; 0x1222 <main+0x25c>
			//dxl_write_word( 1, P_GOAL_POSITION_L, (int) angles[0]*11.3778 ); //4096./360=11.3778  <--- Ticks per degree
			//dxl_write_word( 2, P_GOAL_POSITION_L, (int) angles[1]*11.3778 ); //Command #2
			//dxl_write_word( 3, P_GOAL_POSITION_L, (int) angles[2]*11.3778 ); //Command #3
			;//printf("Command sent!\n\n");
			dataState = OLD_DATA;
    1218:	90 92 0f 02 	sts	0x020F, r9
    121c:	80 92 0e 02 	sts	0x020E, r8
    1220:	75 cf       	rjmp	.-278    	; 0x110c <main+0x146>
		}else if(parseState != WATCH_BEGIN){
    1222:	20 91 10 02 	lds	r18, 0x0210
    1226:	30 91 11 02 	lds	r19, 0x0211
    122a:	21 30       	cpi	r18, 0x01	; 1
    122c:	31 05       	cpc	r19, r1
    122e:	09 f0       	breq	.+2      	; 0x1232 <main+0x26c>
    1230:	6d cf       	rjmp	.-294    	; 0x110c <main+0x146>
			//printf("r");
		}else if(dataState == OLD_DATA){
    1232:	05 97       	sbiw	r24, 0x05	; 5
    1234:	09 f0       	breq	.+2      	; 0x1238 <main+0x272>
    1236:	6a cf       	rjmp	.-300    	; 0x110c <main+0x146>
			printf("0");
    1238:	80 e3       	ldi	r24, 0x30	; 48
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 ed 1a 	call	0x35da	; 0x35da <putchar>
    1240:	65 cf       	rjmp	.-310    	; 0x110c <main+0x146>

00001242 <pointValid>:
/**
* Finds the square of x.
*/
double sqr(double x){
	return x*x;
}
    1242:	4f 92       	push	r4
    1244:	5f 92       	push	r5
    1246:	6f 92       	push	r6
    1248:	7f 92       	push	r7
    124a:	8f 92       	push	r8
    124c:	9f 92       	push	r9
    124e:	af 92       	push	r10
    1250:	bf 92       	push	r11
    1252:	cf 92       	push	r12
    1254:	df 92       	push	r13
    1256:	ef 92       	push	r14
    1258:	ff 92       	push	r15
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	2c 97       	sbiw	r28, 0x0c	; 12
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	e9 82       	std	Y+1, r14	; 0x01
    1274:	fa 82       	std	Y+2, r15	; 0x02
    1276:	0b 83       	std	Y+3, r16	; 0x03
    1278:	1c 83       	std	Y+4, r17	; 0x04
    127a:	2d 83       	std	Y+5, r18	; 0x05
    127c:	3e 83       	std	Y+6, r19	; 0x06
    127e:	4f 83       	std	Y+7, r20	; 0x07
    1280:	58 87       	std	Y+8, r21	; 0x08
    1282:	69 87       	std	Y+9, r22	; 0x09
    1284:	7a 87       	std	Y+10, r23	; 0x0a
    1286:	8b 87       	std	Y+11, r24	; 0x0b
    1288:	9c 87       	std	Y+12, r25	; 0x0c
    128a:	89 84       	ldd	r8, Y+9	; 0x09
    128c:	9a 84       	ldd	r9, Y+10	; 0x0a
    128e:	ab 84       	ldd	r10, Y+11	; 0x0b
    1290:	bc 84       	ldd	r11, Y+12	; 0x0c
    1292:	69 81       	ldd	r22, Y+1	; 0x01
    1294:	7a 81       	ldd	r23, Y+2	; 0x02
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	cd 80       	ldd	r12, Y+5	; 0x05
    129c:	de 80       	ldd	r13, Y+6	; 0x06
    129e:	ef 80       	ldd	r14, Y+7	; 0x07
    12a0:	f8 84       	ldd	r15, Y+8	; 0x08
    12a2:	9b 01       	movw	r18, r22
    12a4:	ac 01       	movw	r20, r24
    12a6:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    12aa:	2b 01       	movw	r4, r22
    12ac:	3c 01       	movw	r6, r24
    12ae:	a7 01       	movw	r20, r14
    12b0:	96 01       	movw	r18, r12
    12b2:	c7 01       	movw	r24, r14
    12b4:	b6 01       	movw	r22, r12
    12b6:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    12ba:	9b 01       	movw	r18, r22
    12bc:	ac 01       	movw	r20, r24
    12be:	c3 01       	movw	r24, r6
    12c0:	b2 01       	movw	r22, r4
    12c2:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
    12c6:	2c ef       	ldi	r18, 0xFC	; 252
    12c8:	3a e7       	ldi	r19, 0x7A	; 122
    12ca:	40 e1       	ldi	r20, 0x10	; 16
    12cc:	52 e4       	ldi	r21, 0x42	; 66
    12ce:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    12d2:	18 16       	cp	r1, r24
    12d4:	d4 f0       	brlt	.+52     	; 0x130a <pointValid+0xc8>
    12d6:	26 ef       	ldi	r18, 0xF6	; 246
    12d8:	38 e2       	ldi	r19, 0x28	; 40
    12da:	40 e5       	ldi	r20, 0x50	; 80
    12dc:	51 ec       	ldi	r21, 0xC1	; 193
    12de:	c5 01       	movw	r24, r10
    12e0:	b4 01       	movw	r22, r8
    12e2:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__gesf2>
    12e6:	88 23       	and	r24, r24
    12e8:	9c f0       	brlt	.+38     	; 0x1310 <pointValid+0xce>
    12ea:	11 e0       	ldi	r17, 0x01	; 1
    12ec:	f1 2c       	mov	r15, r1
    12ee:	24 e1       	ldi	r18, 0x14	; 20
    12f0:	3e ea       	ldi	r19, 0xAE	; 174
    12f2:	4f ef       	ldi	r20, 0xFF	; 255
    12f4:	50 ec       	ldi	r21, 0xC0	; 192
    12f6:	c5 01       	movw	r24, r10
    12f8:	b4 01       	movw	r22, r8
    12fa:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    12fe:	18 16       	cp	r1, r24
    1300:	0c f4       	brge	.+2      	; 0x1304 <pointValid+0xc2>
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	81 2f       	mov	r24, r17
    1306:	9f 2d       	mov	r25, r15
    1308:	05 c0       	rjmp	.+10     	; 0x1314 <pointValid+0xd2>
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <pointValid+0xd2>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	2c 96       	adiw	r28, 0x0c	; 12
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	1f 91       	pop	r17
    1326:	0f 91       	pop	r16
    1328:	ff 90       	pop	r15
    132a:	ef 90       	pop	r14
    132c:	df 90       	pop	r13
    132e:	cf 90       	pop	r12
    1330:	bf 90       	pop	r11
    1332:	af 90       	pop	r10
    1334:	9f 90       	pop	r9
    1336:	8f 90       	pop	r8
    1338:	7f 90       	pop	r7
    133a:	6f 90       	pop	r6
    133c:	5f 90       	pop	r5
    133e:	4f 90       	pop	r4
    1340:	08 95       	ret

00001342 <processArgOptions>:
    1342:	8f 92       	push	r8
    1344:	9f 92       	push	r9
    1346:	af 92       	push	r10
    1348:	bf 92       	push	r11
    134a:	cf 92       	push	r12
    134c:	df 92       	push	r13
    134e:	ef 92       	push	r14
    1350:	ff 92       	push	r15
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	ec 01       	movw	r28, r24
    135c:	4a 01       	movw	r8, r20
    135e:	5b 01       	movw	r10, r22
    1360:	68 01       	movw	r12, r16
    1362:	79 01       	movw	r14, r18
    1364:	cb 01       	movw	r24, r22
    1366:	ba 01       	movw	r22, r20
    1368:	9f 77       	andi	r25, 0x7F	; 127
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e8       	ldi	r20, 0x80	; 128
    1370:	5f e3       	ldi	r21, 0x3F	; 63
    1372:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__gesf2>
    1376:	18 16       	cp	r1, r24
    1378:	0c f0       	brlt	.+2      	; 0x137c <processArgOptions+0x3a>
    137a:	49 c0       	rjmp	.+146    	; 0x140e <processArgOptions+0xcc>
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	40 e8       	ldi	r20, 0x80	; 128
    1382:	5f e3       	ldi	r21, 0x3F	; 63
    1384:	c5 01       	movw	r24, r10
    1386:	b4 01       	movw	r22, r8
    1388:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    138c:	9f 77       	andi	r25, 0x7F	; 127
    138e:	27 e1       	ldi	r18, 0x17	; 23
    1390:	37 eb       	ldi	r19, 0xB7	; 183
    1392:	41 ed       	ldi	r20, 0xD1	; 209
    1394:	58 e3       	ldi	r21, 0x38	; 56
    1396:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    139a:	88 23       	and	r24, r24
    139c:	4c f4       	brge	.+18     	; 0x13b0 <processArgOptions+0x6e>
    139e:	18 82       	st	Y, r1
    13a0:	19 82       	std	Y+1, r1	; 0x01
    13a2:	1a 82       	std	Y+2, r1	; 0x02
    13a4:	1b 82       	std	Y+3, r1	; 0x03
    13a6:	1c 82       	std	Y+4, r1	; 0x04
    13a8:	1d 82       	std	Y+5, r1	; 0x05
    13aa:	1e 82       	std	Y+6, r1	; 0x06
    13ac:	1f 82       	std	Y+7, r1	; 0x07
    13ae:	3e c0       	rjmp	.+124    	; 0x142c <processArgOptions+0xea>
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	40 e8       	ldi	r20, 0x80	; 128
    13b6:	5f e3       	ldi	r21, 0x3F	; 63
    13b8:	c5 01       	movw	r24, r10
    13ba:	b4 01       	movw	r22, r8
    13bc:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
    13c0:	9f 77       	andi	r25, 0x7F	; 127
    13c2:	27 e1       	ldi	r18, 0x17	; 23
    13c4:	37 eb       	ldi	r19, 0xB7	; 183
    13c6:	41 ed       	ldi	r20, 0xD1	; 209
    13c8:	58 e3       	ldi	r21, 0x38	; 56
    13ca:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    13ce:	88 23       	and	r24, r24
    13d0:	8c f4       	brge	.+34     	; 0x13f4 <processArgOptions+0xb2>
    13d2:	8b ed       	ldi	r24, 0xDB	; 219
    13d4:	9f e0       	ldi	r25, 0x0F	; 15
    13d6:	a9 e4       	ldi	r26, 0x49	; 73
    13d8:	b0 e4       	ldi	r27, 0x40	; 64
    13da:	88 83       	st	Y, r24
    13dc:	99 83       	std	Y+1, r25	; 0x01
    13de:	aa 83       	std	Y+2, r26	; 0x02
    13e0:	bb 83       	std	Y+3, r27	; 0x03
    13e2:	8b ed       	ldi	r24, 0xDB	; 219
    13e4:	9f e0       	ldi	r25, 0x0F	; 15
    13e6:	a9 e4       	ldi	r26, 0x49	; 73
    13e8:	b0 ec       	ldi	r27, 0xC0	; 192
    13ea:	8c 83       	std	Y+4, r24	; 0x04
    13ec:	9d 83       	std	Y+5, r25	; 0x05
    13ee:	ae 83       	std	Y+6, r26	; 0x06
    13f0:	bf 83       	std	Y+7, r27	; 0x07
    13f2:	1c c0       	rjmp	.+56     	; 0x142c <processArgOptions+0xea>
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	a0 ec       	ldi	r26, 0xC0	; 192
    13fa:	bf e7       	ldi	r27, 0x7F	; 127
    13fc:	88 83       	st	Y, r24
    13fe:	99 83       	std	Y+1, r25	; 0x01
    1400:	aa 83       	std	Y+2, r26	; 0x02
    1402:	bb 83       	std	Y+3, r27	; 0x03
    1404:	8c 83       	std	Y+4, r24	; 0x04
    1406:	9d 83       	std	Y+5, r25	; 0x05
    1408:	ae 83       	std	Y+6, r26	; 0x06
    140a:	bf 83       	std	Y+7, r27	; 0x07
    140c:	0f c0       	rjmp	.+30     	; 0x142c <processArgOptions+0xea>
    140e:	c5 01       	movw	r24, r10
    1410:	b4 01       	movw	r22, r8
    1412:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <acos>
    1416:	68 83       	st	Y, r22
    1418:	79 83       	std	Y+1, r23	; 0x01
    141a:	8a 83       	std	Y+2, r24	; 0x02
    141c:	9b 83       	std	Y+3, r25	; 0x03
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	b0 58       	subi	r27, 0x80	; 128
    1424:	8c 83       	std	Y+4, r24	; 0x04
    1426:	9d 83       	std	Y+5, r25	; 0x05
    1428:	ae 83       	std	Y+6, r26	; 0x06
    142a:	bf 83       	std	Y+7, r27	; 0x07
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	40 e8       	ldi	r20, 0x80	; 128
    1432:	5f e3       	ldi	r21, 0x3F	; 63
    1434:	c7 01       	movw	r24, r14
    1436:	b6 01       	movw	r22, r12
    1438:	9f 77       	andi	r25, 0x7F	; 127
    143a:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__gesf2>
    143e:	18 16       	cp	r1, r24
    1440:	0c f0       	brlt	.+2      	; 0x1444 <processArgOptions+0x102>
    1442:	49 c0       	rjmp	.+146    	; 0x14d6 <processArgOptions+0x194>
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	40 e8       	ldi	r20, 0x80	; 128
    144a:	5f e3       	ldi	r21, 0x3F	; 63
    144c:	c7 01       	movw	r24, r14
    144e:	b6 01       	movw	r22, r12
    1450:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    1454:	9f 77       	andi	r25, 0x7F	; 127
    1456:	27 e1       	ldi	r18, 0x17	; 23
    1458:	37 eb       	ldi	r19, 0xB7	; 183
    145a:	41 ed       	ldi	r20, 0xD1	; 209
    145c:	58 e3       	ldi	r21, 0x38	; 56
    145e:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    1462:	88 23       	and	r24, r24
    1464:	4c f4       	brge	.+18     	; 0x1478 <processArgOptions+0x136>
    1466:	18 86       	std	Y+8, r1	; 0x08
    1468:	19 86       	std	Y+9, r1	; 0x09
    146a:	1a 86       	std	Y+10, r1	; 0x0a
    146c:	1b 86       	std	Y+11, r1	; 0x0b
    146e:	1c 86       	std	Y+12, r1	; 0x0c
    1470:	1d 86       	std	Y+13, r1	; 0x0d
    1472:	1e 86       	std	Y+14, r1	; 0x0e
    1474:	1f 86       	std	Y+15, r1	; 0x0f
    1476:	3e c0       	rjmp	.+124    	; 0x14f4 <processArgOptions+0x1b2>
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e8       	ldi	r20, 0x80	; 128
    147e:	5f e3       	ldi	r21, 0x3F	; 63
    1480:	c7 01       	movw	r24, r14
    1482:	b6 01       	movw	r22, r12
    1484:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
    1488:	9f 77       	andi	r25, 0x7F	; 127
    148a:	27 e1       	ldi	r18, 0x17	; 23
    148c:	37 eb       	ldi	r19, 0xB7	; 183
    148e:	41 ed       	ldi	r20, 0xD1	; 209
    1490:	58 e3       	ldi	r21, 0x38	; 56
    1492:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    1496:	88 23       	and	r24, r24
    1498:	8c f4       	brge	.+34     	; 0x14bc <processArgOptions+0x17a>
    149a:	8b ed       	ldi	r24, 0xDB	; 219
    149c:	9f e0       	ldi	r25, 0x0F	; 15
    149e:	a9 e4       	ldi	r26, 0x49	; 73
    14a0:	b0 e4       	ldi	r27, 0x40	; 64
    14a2:	88 87       	std	Y+8, r24	; 0x08
    14a4:	99 87       	std	Y+9, r25	; 0x09
    14a6:	aa 87       	std	Y+10, r26	; 0x0a
    14a8:	bb 87       	std	Y+11, r27	; 0x0b
    14aa:	8b ed       	ldi	r24, 0xDB	; 219
    14ac:	9f e0       	ldi	r25, 0x0F	; 15
    14ae:	a9 e4       	ldi	r26, 0x49	; 73
    14b0:	b0 ec       	ldi	r27, 0xC0	; 192
    14b2:	8c 87       	std	Y+12, r24	; 0x0c
    14b4:	9d 87       	std	Y+13, r25	; 0x0d
    14b6:	ae 87       	std	Y+14, r26	; 0x0e
    14b8:	bf 87       	std	Y+15, r27	; 0x0f
    14ba:	1c c0       	rjmp	.+56     	; 0x14f4 <processArgOptions+0x1b2>
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	a0 ec       	ldi	r26, 0xC0	; 192
    14c2:	bf e7       	ldi	r27, 0x7F	; 127
    14c4:	88 87       	std	Y+8, r24	; 0x08
    14c6:	99 87       	std	Y+9, r25	; 0x09
    14c8:	aa 87       	std	Y+10, r26	; 0x0a
    14ca:	bb 87       	std	Y+11, r27	; 0x0b
    14cc:	8c 87       	std	Y+12, r24	; 0x0c
    14ce:	9d 87       	std	Y+13, r25	; 0x0d
    14d0:	ae 87       	std	Y+14, r26	; 0x0e
    14d2:	bf 87       	std	Y+15, r27	; 0x0f
    14d4:	0f c0       	rjmp	.+30     	; 0x14f4 <processArgOptions+0x1b2>
    14d6:	c7 01       	movw	r24, r14
    14d8:	b6 01       	movw	r22, r12
    14da:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <acos>
    14de:	68 87       	std	Y+8, r22	; 0x08
    14e0:	79 87       	std	Y+9, r23	; 0x09
    14e2:	8a 87       	std	Y+10, r24	; 0x0a
    14e4:	9b 87       	std	Y+11, r25	; 0x0b
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	b0 58       	subi	r27, 0x80	; 128
    14ec:	8c 87       	std	Y+12, r24	; 0x0c
    14ee:	9d 87       	std	Y+13, r25	; 0x0d
    14f0:	ae 87       	std	Y+14, r26	; 0x0e
    14f2:	bf 87       	std	Y+15, r27	; 0x0f
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	1f 91       	pop	r17
    14fa:	0f 91       	pop	r16
    14fc:	ff 90       	pop	r15
    14fe:	ef 90       	pop	r14
    1500:	df 90       	pop	r13
    1502:	cf 90       	pop	r12
    1504:	bf 90       	pop	r11
    1506:	af 90       	pop	r10
    1508:	9f 90       	pop	r9
    150a:	8f 90       	pop	r8
    150c:	08 95       	ret

0000150e <removeExtraneous>:
/**
* Returns the desired angle solution from a double* of two viable options.
* Returns NAN if viable options are both NAN.
*/
double removeExtraneous(double* viableOptions)
{
    150e:	4f 92       	push	r4
    1510:	5f 92       	push	r5
    1512:	6f 92       	push	r6
    1514:	7f 92       	push	r7
    1516:	bf 92       	push	r11
    1518:	cf 92       	push	r12
    151a:	df 92       	push	r13
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	ec 01       	movw	r28, r24
	if (!isnan(viableOptions[0]) && !isnan(viableOptions[1]))
    152a:	e8 80       	ld	r14, Y
    152c:	f9 80       	ldd	r15, Y+1	; 0x01
    152e:	0a 81       	ldd	r16, Y+2	; 0x02
    1530:	1b 81       	ldd	r17, Y+3	; 0x03
    1532:	2e 2d       	mov	r18, r14
    1534:	3f 2d       	mov	r19, r15
    1536:	40 2f       	mov	r20, r16
    1538:	51 2f       	mov	r21, r17
    153a:	6e 2d       	mov	r22, r14
    153c:	7f 2d       	mov	r23, r15
    153e:	80 2f       	mov	r24, r16
    1540:	91 2f       	mov	r25, r17
    1542:	0e 94 18 1a 	call	0x3430	; 0x3430 <__unordsf2>
    1546:	81 11       	cpse	r24, r1
    1548:	55 c0       	rjmp	.+170    	; 0x15f4 <removeExtraneous+0xe6>
    154a:	bc 80       	ldd	r11, Y+4	; 0x04
    154c:	cd 80       	ldd	r12, Y+5	; 0x05
    154e:	de 80       	ldd	r13, Y+6	; 0x06
    1550:	cf 81       	ldd	r28, Y+7	; 0x07
    1552:	2b 2d       	mov	r18, r11
    1554:	3c 2d       	mov	r19, r12
    1556:	4d 2d       	mov	r20, r13
    1558:	5c 2f       	mov	r21, r28
    155a:	6b 2d       	mov	r22, r11
    155c:	7c 2d       	mov	r23, r12
    155e:	8d 2d       	mov	r24, r13
    1560:	9c 2f       	mov	r25, r28
    1562:	0e 94 18 1a 	call	0x3430	; 0x3430 <__unordsf2>
    1566:	81 11       	cpse	r24, r1
    1568:	5e c0       	rjmp	.+188    	; 0x1626 <removeExtraneous+0x118>
	{
		double option1;
		double option2;

		/* Convert [0, 2pi] to [-pi, pi]. */
		if (viableOptions[0] > M_PI)
    156a:	2b ed       	ldi	r18, 0xDB	; 219
    156c:	3f e0       	ldi	r19, 0x0F	; 15
    156e:	49 e4       	ldi	r20, 0x49	; 73
    1570:	50 e4       	ldi	r21, 0x40	; 64
    1572:	6e 2d       	mov	r22, r14
    1574:	7f 2d       	mov	r23, r15
    1576:	80 2f       	mov	r24, r16
    1578:	91 2f       	mov	r25, r17
    157a:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__gesf2>
    157e:	18 16       	cp	r1, r24
    1580:	6c f4       	brge	.+26     	; 0x159c <removeExtraneous+0x8e>
			option1 = viableOptions[0] - 2 * M_PI;
    1582:	2b ed       	ldi	r18, 0xDB	; 219
    1584:	3f e0       	ldi	r19, 0x0F	; 15
    1586:	49 ec       	ldi	r20, 0xC9	; 201
    1588:	50 e4       	ldi	r21, 0x40	; 64
    158a:	6e 2d       	mov	r22, r14
    158c:	7f 2d       	mov	r23, r15
    158e:	80 2f       	mov	r24, r16
    1590:	91 2f       	mov	r25, r17
    1592:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    1596:	2b 01       	movw	r4, r22
    1598:	3c 01       	movw	r6, r24
    159a:	04 c0       	rjmp	.+8      	; 0x15a4 <removeExtraneous+0x96>
		else
			option1 = viableOptions[0];
    159c:	4e 2c       	mov	r4, r14
    159e:	5f 2c       	mov	r5, r15
    15a0:	60 2e       	mov	r6, r16
    15a2:	71 2e       	mov	r7, r17

		if (viableOptions[1] > M_PI)
    15a4:	2b ed       	ldi	r18, 0xDB	; 219
    15a6:	3f e0       	ldi	r19, 0x0F	; 15
    15a8:	49 e4       	ldi	r20, 0x49	; 73
    15aa:	50 e4       	ldi	r21, 0x40	; 64
    15ac:	6b 2d       	mov	r22, r11
    15ae:	7c 2d       	mov	r23, r12
    15b0:	8d 2d       	mov	r24, r13
    15b2:	9c 2f       	mov	r25, r28
    15b4:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__gesf2>
    15b8:	18 16       	cp	r1, r24
    15ba:	6c f4       	brge	.+26     	; 0x15d6 <removeExtraneous+0xc8>
			option2 = viableOptions[1] - 2 * M_PI;
    15bc:	2b ed       	ldi	r18, 0xDB	; 219
    15be:	3f e0       	ldi	r19, 0x0F	; 15
    15c0:	49 ec       	ldi	r20, 0xC9	; 201
    15c2:	50 e4       	ldi	r21, 0x40	; 64
    15c4:	6b 2d       	mov	r22, r11
    15c6:	7c 2d       	mov	r23, r12
    15c8:	8d 2d       	mov	r24, r13
    15ca:	9c 2f       	mov	r25, r28
    15cc:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    15d0:	9b 01       	movw	r18, r22
    15d2:	ac 01       	movw	r20, r24
    15d4:	06 c0       	rjmp	.+12     	; 0x15e2 <removeExtraneous+0xd4>
		else
			option2 = viableOptions[1];
    15d6:	8b 2d       	mov	r24, r11
    15d8:	9c 2d       	mov	r25, r12
    15da:	ad 2d       	mov	r26, r13
    15dc:	bc 2f       	mov	r27, r28
    15de:	9c 01       	movw	r18, r24
    15e0:	ad 01       	movw	r20, r26
		/* Return angle with smallest absolute value. */
		if (fabs(option1) <= fabs(option2))
    15e2:	c3 01       	movw	r24, r6
    15e4:	b2 01       	movw	r22, r4
    15e6:	9f 77       	andi	r25, 0x7F	; 127
    15e8:	5f 77       	andi	r21, 0x7F	; 127
    15ea:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	b4 f0       	brlt	.+44     	; 0x161e <removeExtraneous+0x110>
    15f2:	19 c0       	rjmp	.+50     	; 0x1626 <removeExtraneous+0x118>
		else
			return viableOptions[1];
	}
	else if (!isnan(viableOptions[0]) && isnan(viableOptions[1]))
		return viableOptions[0];
	else if (isnan(viableOptions[0]) && !isnan(viableOptions[1]))
    15f4:	ec 80       	ldd	r14, Y+4	; 0x04
    15f6:	fd 80       	ldd	r15, Y+5	; 0x05
    15f8:	0e 81       	ldd	r16, Y+6	; 0x06
    15fa:	1f 81       	ldd	r17, Y+7	; 0x07
    15fc:	2e 2d       	mov	r18, r14
    15fe:	3f 2d       	mov	r19, r15
    1600:	40 2f       	mov	r20, r16
    1602:	51 2f       	mov	r21, r17
    1604:	6e 2d       	mov	r22, r14
    1606:	7f 2d       	mov	r23, r15
    1608:	80 2f       	mov	r24, r16
    160a:	91 2f       	mov	r25, r17
    160c:	0e 94 18 1a 	call	0x3430	; 0x3430 <__unordsf2>
    1610:	88 23       	and	r24, r24
    1612:	49 f0       	breq	.+18     	; 0x1626 <removeExtraneous+0x118>
		return viableOptions[1];
	else
		return NAN; /* Both options are NAN. */
    1614:	e1 2c       	mov	r14, r1
    1616:	f1 2c       	mov	r15, r1
    1618:	00 ec       	ldi	r16, 0xC0	; 192
    161a:	1f e7       	ldi	r17, 0x7F	; 127
    161c:	04 c0       	rjmp	.+8      	; 0x1626 <removeExtraneous+0x118>
			option2 = viableOptions[1];
		/* Return angle with smallest absolute value. */
		if (fabs(option1) <= fabs(option2))
			return viableOptions[0];
		else
			return viableOptions[1];
    161e:	eb 2c       	mov	r14, r11
    1620:	fc 2c       	mov	r15, r12
    1622:	0d 2d       	mov	r16, r13
    1624:	1c 2f       	mov	r17, r28
		return viableOptions[0];
	else if (isnan(viableOptions[0]) && !isnan(viableOptions[1]))
		return viableOptions[1];
	else
		return NAN; /* Both options are NAN. */
}
    1626:	6e 2d       	mov	r22, r14
    1628:	7f 2d       	mov	r23, r15
    162a:	80 2f       	mov	r24, r16
    162c:	91 2f       	mov	r25, r17
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	cf 90       	pop	r12
    163e:	bf 90       	pop	r11
    1640:	7f 90       	pop	r7
    1642:	6f 90       	pop	r6
    1644:	5f 90       	pop	r5
    1646:	4f 90       	pop	r4
    1648:	08 95       	ret

0000164a <modAngle>:
/**
* Converts an angle from kinematics coordinates (in radians from -pi to pi) to
* servo coordinates (in degrees from 0 to 360).
*/
double modAngle(double angle)
{
    164a:	0f 93       	push	r16
    164c:	1f 93       	push	r17
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
	double modAngle = 180.0 - 180.0 * angle / M_PI;
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	44 e3       	ldi	r20, 0x34	; 52
    1658:	53 e4       	ldi	r21, 0x43	; 67
    165a:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    165e:	2b ed       	ldi	r18, 0xDB	; 219
    1660:	3f e0       	ldi	r19, 0x0F	; 15
    1662:	49 e4       	ldi	r20, 0x49	; 73
    1664:	50 e4       	ldi	r21, 0x40	; 64
    1666:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__divsf3>
    166a:	9b 01       	movw	r18, r22
    166c:	ac 01       	movw	r20, r24
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	84 e3       	ldi	r24, 0x34	; 52
    1674:	93 e4       	ldi	r25, 0x43	; 67
    1676:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    167a:	06 2f       	mov	r16, r22
    167c:	17 2f       	mov	r17, r23
    167e:	d8 2f       	mov	r29, r24
    1680:	c9 2f       	mov	r28, r25
	if (modAngle < 0)
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	a9 01       	movw	r20, r18
    1688:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    168c:	88 23       	and	r24, r24
    168e:	74 f4       	brge	.+28     	; 0x16ac <modAngle+0x62>
		return modAngle + 360.0;
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	44 eb       	ldi	r20, 0xB4	; 180
    1696:	53 e4       	ldi	r21, 0x43	; 67
    1698:	60 2f       	mov	r22, r16
    169a:	71 2f       	mov	r23, r17
    169c:	8d 2f       	mov	r24, r29
    169e:	9c 2f       	mov	r25, r28
    16a0:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
    16a4:	06 2f       	mov	r16, r22
    16a6:	17 2f       	mov	r17, r23
    16a8:	d8 2f       	mov	r29, r24
    16aa:	c9 2f       	mov	r28, r25
	else
		return modAngle;
}
    16ac:	60 2f       	mov	r22, r16
    16ae:	71 2f       	mov	r23, r17
    16b0:	8d 2f       	mov	r24, r29
    16b2:	9c 2f       	mov	r25, r28
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	08 95       	ret

000016be <minInd1>:
* Returns the index of the smallest double in an array 'lst' of doubles of
* length 'length'. Returns -1 for empty list or list with minimum value
* DBL_MAX.
*/
int minInd1(double* lst, int length)
{
    16be:	4f 92       	push	r4
    16c0:	5f 92       	push	r5
    16c2:	6f 92       	push	r6
    16c4:	7f 92       	push	r7
    16c6:	8f 92       	push	r8
    16c8:	9f 92       	push	r9
    16ca:	af 92       	push	r10
    16cc:	bf 92       	push	r11
    16ce:	cf 92       	push	r12
    16d0:	df 92       	push	r13
    16d2:	ef 92       	push	r14
    16d4:	ff 92       	push	r15
    16d6:	0f 93       	push	r16
    16d8:	1f 93       	push	r17
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	5b 01       	movw	r10, r22
	double minimum = DBL_MAX;
	int minInd1 = 0;
	int i;
	for (i = 0; i < length; i++)
    16e0:	16 16       	cp	r1, r22
    16e2:	17 06       	cpc	r1, r23
    16e4:	0c f0       	brlt	.+2      	; 0x16e8 <minInd1+0x2a>
    16e6:	42 c0       	rjmp	.+132    	; 0x176c <minInd1+0xae>
    16e8:	08 2f       	mov	r16, r24
    16ea:	19 2f       	mov	r17, r25
    16ec:	c0 e0       	ldi	r28, 0x00	; 0
    16ee:	d0 e0       	ldi	r29, 0x00	; 0
* DBL_MAX.
*/
int minInd1(double* lst, int length)
{
	double minimum = DBL_MAX;
	int minInd1 = 0;
    16f0:	41 2c       	mov	r4, r1
    16f2:	51 2c       	mov	r5, r1
* length 'length'. Returns -1 for empty list or list with minimum value
* DBL_MAX.
*/
int minInd1(double* lst, int length)
{
	double minimum = DBL_MAX;
    16f4:	66 24       	eor	r6, r6
    16f6:	6a 94       	dec	r6
    16f8:	77 24       	eor	r7, r7
    16fa:	7a 94       	dec	r7
    16fc:	0f 2e       	mov	r0, r31
    16fe:	ff e7       	ldi	r31, 0x7F	; 127
    1700:	8f 2e       	mov	r8, r31
    1702:	f0 2d       	mov	r31, r0
    1704:	0f 2e       	mov	r0, r31
    1706:	ff e7       	ldi	r31, 0x7F	; 127
    1708:	9f 2e       	mov	r9, r31
    170a:	f0 2d       	mov	r31, r0
	int minInd1 = 0;
	int i;
	for (i = 0; i < length; i++)
	{
		if (lst[i] < minimum)
    170c:	f8 01       	movw	r30, r16
    170e:	c1 90       	ld	r12, Z+
    1710:	d1 90       	ld	r13, Z+
    1712:	e1 90       	ld	r14, Z+
    1714:	f1 90       	ld	r15, Z+
    1716:	8f 01       	movw	r16, r30
    1718:	26 2d       	mov	r18, r6
    171a:	37 2d       	mov	r19, r7
    171c:	48 2d       	mov	r20, r8
    171e:	59 2d       	mov	r21, r9
    1720:	c7 01       	movw	r24, r14
    1722:	b6 01       	movw	r22, r12
    1724:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    1728:	88 23       	and	r24, r24
    172a:	34 f4       	brge	.+12     	; 0x1738 <minInd1+0x7a>
    172c:	4c 2e       	mov	r4, r28
    172e:	5d 2e       	mov	r5, r29
		{
			minimum = lst[i];
    1730:	6c 2c       	mov	r6, r12
    1732:	7d 2c       	mov	r7, r13
    1734:	8e 2c       	mov	r8, r14
    1736:	9f 2c       	mov	r9, r15
int minInd1(double* lst, int length)
{
	double minimum = DBL_MAX;
	int minInd1 = 0;
	int i;
	for (i = 0; i < length; i++)
    1738:	21 96       	adiw	r28, 0x01	; 1
    173a:	ca 15       	cp	r28, r10
    173c:	db 05       	cpc	r29, r11
    173e:	31 f7       	brne	.-52     	; 0x170c <minInd1+0x4e>
		{
			minimum = lst[i];
			minInd1 = i;
		}
	}
	if (fabs(minimum - DBL_MAX) < 1)
    1740:	2f ef       	ldi	r18, 0xFF	; 255
    1742:	3f ef       	ldi	r19, 0xFF	; 255
    1744:	4f e7       	ldi	r20, 0x7F	; 127
    1746:	5f e7       	ldi	r21, 0x7F	; 127
    1748:	66 2d       	mov	r22, r6
    174a:	77 2d       	mov	r23, r7
    174c:	88 2d       	mov	r24, r8
    174e:	99 2d       	mov	r25, r9
    1750:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    1754:	9f 77       	andi	r25, 0x7F	; 127
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e8       	ldi	r20, 0x80	; 128
    175c:	5f e3       	ldi	r21, 0x3F	; 63
    175e:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    1762:	88 23       	and	r24, r24
    1764:	34 f4       	brge	.+12     	; 0x1772 <minInd1+0xb4>
		return -1;
    1766:	8f ef       	ldi	r24, 0xFF	; 255
    1768:	9f ef       	ldi	r25, 0xFF	; 255
    176a:	05 c0       	rjmp	.+10     	; 0x1776 <minInd1+0xb8>
    176c:	8f ef       	ldi	r24, 0xFF	; 255
    176e:	9f ef       	ldi	r25, 0xFF	; 255
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <minInd1+0xb8>
    1772:	84 2d       	mov	r24, r4
    1774:	95 2d       	mov	r25, r5
	else
		return minInd1;
}
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	ff 90       	pop	r15
    1780:	ef 90       	pop	r14
    1782:	df 90       	pop	r13
    1784:	cf 90       	pop	r12
    1786:	bf 90       	pop	r11
    1788:	af 90       	pop	r10
    178a:	9f 90       	pop	r9
    178c:	8f 90       	pop	r8
    178e:	7f 90       	pop	r7
    1790:	6f 90       	pop	r6
    1792:	5f 90       	pop	r5
    1794:	4f 90       	pop	r4
    1796:	08 95       	ret

00001798 <minInd2>:
* Returns the index of the second smallest double in an array 'lst' of doubles
* of length 'length'. Returns -1 for list of size 0 or 1, or list with second
* smallest value DBL_MAX.
*/
int minInd2(double* lst, int length)
{
    1798:	2f 92       	push	r2
    179a:	3f 92       	push	r3
    179c:	4f 92       	push	r4
    179e:	5f 92       	push	r5
    17a0:	6f 92       	push	r6
    17a2:	7f 92       	push	r7
    17a4:	8f 92       	push	r8
    17a6:	9f 92       	push	r9
    17a8:	af 92       	push	r10
    17aa:	bf 92       	push	r11
    17ac:	cf 92       	push	r12
    17ae:	df 92       	push	r13
    17b0:	ef 92       	push	r14
    17b2:	ff 92       	push	r15
    17b4:	0f 93       	push	r16
    17b6:	1f 93       	push	r17
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	00 d0       	rcall	.+0      	; 0x17be <minInd2+0x26>
    17be:	1f 92       	push	r1
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	5b 01       	movw	r10, r22
	double minimum = DBL_MAX;
	double minimum2 = DBL_MAX; /* Second smallest minimum */
	int minInd2 = 0;
	int i;
	for (i = 0; i < length; i++)
    17c6:	16 16       	cp	r1, r22
    17c8:	17 06       	cpc	r1, r23
    17ca:	0c f0       	brlt	.+2      	; 0x17ce <minInd2+0x36>
    17cc:	64 c0       	rjmp	.+200    	; 0x1896 <minInd2+0xfe>
    17ce:	08 2f       	mov	r16, r24
    17d0:	19 2f       	mov	r17, r25
    17d2:	1c 82       	std	Y+4, r1	; 0x04
    17d4:	1b 82       	std	Y+3, r1	; 0x03
*/
int minInd2(double* lst, int length)
{
	double minimum = DBL_MAX;
	double minimum2 = DBL_MAX; /* Second smallest minimum */
	int minInd2 = 0;
    17d6:	19 82       	std	Y+1, r1	; 0x01
    17d8:	1a 82       	std	Y+2, r1	; 0x02
* smallest value DBL_MAX.
*/
int minInd2(double* lst, int length)
{
	double minimum = DBL_MAX;
	double minimum2 = DBL_MAX; /* Second smallest minimum */
    17da:	22 24       	eor	r2, r2
    17dc:	2a 94       	dec	r2
    17de:	33 24       	eor	r3, r3
    17e0:	3a 94       	dec	r3
    17e2:	0f 2e       	mov	r0, r31
    17e4:	ff e7       	ldi	r31, 0x7F	; 127
    17e6:	4f 2e       	mov	r4, r31
    17e8:	f0 2d       	mov	r31, r0
    17ea:	0f 2e       	mov	r0, r31
    17ec:	ff e7       	ldi	r31, 0x7F	; 127
    17ee:	5f 2e       	mov	r5, r31
    17f0:	f0 2d       	mov	r31, r0
* of length 'length'. Returns -1 for list of size 0 or 1, or list with second
* smallest value DBL_MAX.
*/
int minInd2(double* lst, int length)
{
	double minimum = DBL_MAX;
    17f2:	66 24       	eor	r6, r6
    17f4:	6a 94       	dec	r6
    17f6:	77 24       	eor	r7, r7
    17f8:	7a 94       	dec	r7
    17fa:	0f 2e       	mov	r0, r31
    17fc:	ff e7       	ldi	r31, 0x7F	; 127
    17fe:	8f 2e       	mov	r8, r31
    1800:	f0 2d       	mov	r31, r0
    1802:	0f 2e       	mov	r0, r31
    1804:	ff e7       	ldi	r31, 0x7F	; 127
    1806:	9f 2e       	mov	r9, r31
    1808:	f0 2d       	mov	r31, r0
	double minimum2 = DBL_MAX; /* Second smallest minimum */
	int minInd2 = 0;
	int i;
	for (i = 0; i < length; i++)
	{
		if (lst[i] < minimum)
    180a:	f8 01       	movw	r30, r16
    180c:	c1 90       	ld	r12, Z+
    180e:	d1 90       	ld	r13, Z+
    1810:	e1 90       	ld	r14, Z+
    1812:	f1 90       	ld	r15, Z+
    1814:	8f 01       	movw	r16, r30
    1816:	26 2d       	mov	r18, r6
    1818:	37 2d       	mov	r19, r7
    181a:	48 2d       	mov	r20, r8
    181c:	59 2d       	mov	r21, r9
    181e:	c7 01       	movw	r24, r14
    1820:	b6 01       	movw	r22, r12
    1822:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    1826:	88 23       	and	r24, r24
    1828:	5c f0       	brlt	.+22     	; 0x1840 <minInd2+0xa8>
			minimum = lst[i];
		else if (lst[i] < minimum2)
    182a:	22 2d       	mov	r18, r2
    182c:	33 2d       	mov	r19, r3
    182e:	44 2d       	mov	r20, r4
    1830:	55 2d       	mov	r21, r5
    1832:	c7 01       	movw	r24, r14
    1834:	b6 01       	movw	r22, r12
    1836:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    183a:	88 23       	and	r24, r24
    183c:	34 f0       	brlt	.+12     	; 0x184a <minInd2+0xb2>
    183e:	0d c0       	rjmp	.+26     	; 0x185a <minInd2+0xc2>
	int minInd2 = 0;
	int i;
	for (i = 0; i < length; i++)
	{
		if (lst[i] < minimum)
			minimum = lst[i];
    1840:	6c 2c       	mov	r6, r12
    1842:	7d 2c       	mov	r7, r13
    1844:	8e 2c       	mov	r8, r14
    1846:	9f 2c       	mov	r9, r15
    1848:	08 c0       	rjmp	.+16     	; 0x185a <minInd2+0xc2>
    184a:	fb 81       	ldd	r31, Y+3	; 0x03
    184c:	f9 83       	std	Y+1, r31	; 0x01
    184e:	8c 81       	ldd	r24, Y+4	; 0x04
    1850:	8a 83       	std	Y+2, r24	; 0x02
		else if (lst[i] < minimum2)
		{
			minimum2 = lst[i];
    1852:	2c 2c       	mov	r2, r12
    1854:	3d 2c       	mov	r3, r13
    1856:	4e 2c       	mov	r4, r14
    1858:	5f 2c       	mov	r5, r15
{
	double minimum = DBL_MAX;
	double minimum2 = DBL_MAX; /* Second smallest minimum */
	int minInd2 = 0;
	int i;
	for (i = 0; i < length; i++)
    185a:	eb 81       	ldd	r30, Y+3	; 0x03
    185c:	fc 81       	ldd	r31, Y+4	; 0x04
    185e:	31 96       	adiw	r30, 0x01	; 1
    1860:	fc 83       	std	Y+4, r31	; 0x04
    1862:	eb 83       	std	Y+3, r30	; 0x03
    1864:	ea 15       	cp	r30, r10
    1866:	fb 05       	cpc	r31, r11
    1868:	81 f6       	brne	.-96     	; 0x180a <minInd2+0x72>
		{
			minimum2 = lst[i];
			minInd2 = i;
		}
	}
	if (fabs(minimum2 - DBL_MAX) < 1)
    186a:	2f ef       	ldi	r18, 0xFF	; 255
    186c:	3f ef       	ldi	r19, 0xFF	; 255
    186e:	4f e7       	ldi	r20, 0x7F	; 127
    1870:	5f e7       	ldi	r21, 0x7F	; 127
    1872:	62 2d       	mov	r22, r2
    1874:	73 2d       	mov	r23, r3
    1876:	84 2d       	mov	r24, r4
    1878:	95 2d       	mov	r25, r5
    187a:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    187e:	9f 77       	andi	r25, 0x7F	; 127
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e8       	ldi	r20, 0x80	; 128
    1886:	5f e3       	ldi	r21, 0x3F	; 63
    1888:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    188c:	88 23       	and	r24, r24
    188e:	34 f4       	brge	.+12     	; 0x189c <minInd2+0x104>
		return -1;
    1890:	8f ef       	ldi	r24, 0xFF	; 255
    1892:	9f ef       	ldi	r25, 0xFF	; 255
    1894:	05 c0       	rjmp	.+10     	; 0x18a0 <minInd2+0x108>
    1896:	8f ef       	ldi	r24, 0xFF	; 255
    1898:	9f ef       	ldi	r25, 0xFF	; 255
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <minInd2+0x108>
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	9a 81       	ldd	r25, Y+2	; 0x02
	else
		return minInd2;
}
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	ff 90       	pop	r15
    18b2:	ef 90       	pop	r14
    18b4:	df 90       	pop	r13
    18b6:	cf 90       	pop	r12
    18b8:	bf 90       	pop	r11
    18ba:	af 90       	pop	r10
    18bc:	9f 90       	pop	r9
    18be:	8f 90       	pop	r8
    18c0:	7f 90       	pop	r7
    18c2:	6f 90       	pop	r6
    18c4:	5f 90       	pop	r5
    18c6:	4f 90       	pop	r4
    18c8:	3f 90       	pop	r3
    18ca:	2f 90       	pop	r2
    18cc:	08 95       	ret

000018ce <extractAngleSolution>:
	}
}
/**
* Determines the correct servo angle from 4 possible solutions
*/
double extractAngleSolution(double* values, double* options){
    18ce:	cf 92       	push	r12
    18d0:	df 92       	push	r13
    18d2:	ef 92       	push	r14
    18d4:	ff 92       	push	r15
    18d6:	0f 93       	push	r16
    18d8:	1f 93       	push	r17
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	28 97       	sbiw	r28, 0x08	; 8
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	8c 01       	movw	r16, r24
    18f0:	7b 01       	movw	r14, r22
	/* Find desired indices of 'options'. */
	int ind1 = minInd1(values, 4);
    18f2:	64 e0       	ldi	r22, 0x04	; 4
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	e3 de       	rcall	.-570    	; 0x16be <minInd1>
    18f8:	6c 01       	movw	r12, r24
	int ind2 = minInd2(values, 4);
    18fa:	64 e0       	ldi	r22, 0x04	; 4
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	c8 01       	movw	r24, r16
    1900:	4b df       	rcall	.-362    	; 0x1798 <minInd2>
	/* Pick the two closest options to the original equation. */
	double viableOptions[2];
	viableOptions[0] = (ind1 == -1) ? NAN : options[ind1];
    1902:	2f ef       	ldi	r18, 0xFF	; 255
    1904:	c2 16       	cp	r12, r18
    1906:	d2 06       	cpc	r13, r18
    1908:	61 f0       	breq	.+24     	; 0x1922 <extractAngleSolution+0x54>
    190a:	f6 01       	movw	r30, r12
    190c:	ee 0f       	add	r30, r30
    190e:	ff 1f       	adc	r31, r31
    1910:	ee 0f       	add	r30, r30
    1912:	ff 1f       	adc	r31, r31
    1914:	ee 0d       	add	r30, r14
    1916:	ff 1d       	adc	r31, r15
    1918:	40 81       	ld	r20, Z
    191a:	51 81       	ldd	r21, Z+1	; 0x01
    191c:	62 81       	ldd	r22, Z+2	; 0x02
    191e:	73 81       	ldd	r23, Z+3	; 0x03
    1920:	04 c0       	rjmp	.+8      	; 0x192a <extractAngleSolution+0x5c>
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	60 ec       	ldi	r22, 0xC0	; 192
    1928:	7f e7       	ldi	r23, 0x7F	; 127
    192a:	49 83       	std	Y+1, r20	; 0x01
    192c:	5a 83       	std	Y+2, r21	; 0x02
    192e:	6b 83       	std	Y+3, r22	; 0x03
    1930:	7c 83       	std	Y+4, r23	; 0x04
	viableOptions[1] = (ind2 == -1) ? NAN : options[ind2];
    1932:	8f 3f       	cpi	r24, 0xFF	; 255
    1934:	2f ef       	ldi	r18, 0xFF	; 255
    1936:	92 07       	cpc	r25, r18
    1938:	69 f0       	breq	.+26     	; 0x1954 <extractAngleSolution+0x86>
    193a:	9c 01       	movw	r18, r24
    193c:	22 0f       	add	r18, r18
    193e:	33 1f       	adc	r19, r19
    1940:	22 0f       	add	r18, r18
    1942:	33 1f       	adc	r19, r19
    1944:	f7 01       	movw	r30, r14
    1946:	e2 0f       	add	r30, r18
    1948:	f3 1f       	adc	r31, r19
    194a:	80 81       	ld	r24, Z
    194c:	91 81       	ldd	r25, Z+1	; 0x01
    194e:	a2 81       	ldd	r26, Z+2	; 0x02
    1950:	b3 81       	ldd	r27, Z+3	; 0x03
    1952:	04 c0       	rjmp	.+8      	; 0x195c <extractAngleSolution+0x8e>
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	a0 ec       	ldi	r26, 0xC0	; 192
    195a:	bf e7       	ldi	r27, 0x7F	; 127
    195c:	8d 83       	std	Y+5, r24	; 0x05
    195e:	9e 83       	std	Y+6, r25	; 0x06
    1960:	af 83       	std	Y+7, r26	; 0x07
    1962:	b8 87       	std	Y+8, r27	; 0x08
	/* REMOVE EXTRANEOUS SOLUTION + CONVERT ANGLE*/
	return modAngle(removeExtraneous(viableOptions));
    1964:	ce 01       	movw	r24, r28
    1966:	01 96       	adiw	r24, 0x01	; 1
    1968:	d2 dd       	rcall	.-1116   	; 0x150e <removeExtraneous>
    196a:	6f de       	rcall	.-802    	; 0x164a <modAngle>
}
    196c:	28 96       	adiw	r28, 0x08	; 8
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	cd bf       	out	0x3d, r28	; 61
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	1f 91       	pop	r17
    197e:	0f 91       	pop	r16
    1980:	ff 90       	pop	r15
    1982:	ef 90       	pop	r14
    1984:	df 90       	pop	r13
    1986:	cf 90       	pop	r12
    1988:	08 95       	ret

0000198a <getAngle1>:
/**
* Returns the required angle of servo actuator 1 to get to a desired point 'p'
* in degrees and servo coordinates. If no solution exists, returns NAN.
*/
double getAngle1(struct point p)
{
    198a:	2f 92       	push	r2
    198c:	3f 92       	push	r3
    198e:	4f 92       	push	r4
    1990:	5f 92       	push	r5
    1992:	6f 92       	push	r6
    1994:	7f 92       	push	r7
    1996:	8f 92       	push	r8
    1998:	9f 92       	push	r9
    199a:	af 92       	push	r10
    199c:	bf 92       	push	r11
    199e:	cf 92       	push	r12
    19a0:	df 92       	push	r13
    19a2:	ef 92       	push	r14
    19a4:	ff 92       	push	r15
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	c6 54       	subi	r28, 0x46	; 70
    19b4:	d1 09       	sbc	r29, r1
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
    19c0:	e9 a2       	std	Y+33, r14	; 0x21
    19c2:	fa a2       	std	Y+34, r15	; 0x22
    19c4:	0b a3       	std	Y+35, r16	; 0x23
    19c6:	1c a3       	std	Y+36, r17	; 0x24
    19c8:	2d a3       	std	Y+37, r18	; 0x25
    19ca:	3e a3       	std	Y+38, r19	; 0x26
    19cc:	4f a3       	std	Y+39, r20	; 0x27
    19ce:	58 a7       	std	Y+40, r21	; 0x28
    19d0:	69 a7       	std	Y+41, r22	; 0x29
    19d2:	7a a7       	std	Y+42, r23	; 0x2a
    19d4:	8b a7       	std	Y+43, r24	; 0x2b
    19d6:	9c a7       	std	Y+44, r25	; 0x2c
    19d8:	89 a1       	ldd	r24, Y+33	; 0x21
    19da:	9a a1       	ldd	r25, Y+34	; 0x22
    19dc:	ab a1       	ldd	r26, Y+35	; 0x23
    19de:	bc a1       	ldd	r27, Y+36	; 0x24
    19e0:	8b ab       	std	Y+51, r24	; 0x33
    19e2:	9c ab       	std	Y+52, r25	; 0x34
    19e4:	ad ab       	std	Y+53, r26	; 0x35
    19e6:	be ab       	std	Y+54, r27	; 0x36
    19e8:	89 a5       	ldd	r24, Y+41	; 0x29
    19ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    19ec:	ab a5       	ldd	r26, Y+43	; 0x2b
    19ee:	bc a5       	ldd	r27, Y+44	; 0x2c
    19f0:	8f ab       	std	Y+55, r24	; 0x37
    19f2:	98 af       	std	Y+56, r25	; 0x38
    19f4:	a9 af       	std	Y+57, r26	; 0x39
    19f6:	ba af       	std	Y+58, r27	; 0x3a
	double options[4]; /* Mathematica outputs four possible expressions for the
					   angle. Two are invalid, and one is extraneous. */
	/* GENERATE FOUR POSSIBLE OPTIONS. */
	double x2 = p.x*p.x;
    19f8:	2b a9       	ldd	r18, Y+51	; 0x33
    19fa:	3c a9       	ldd	r19, Y+52	; 0x34
    19fc:	4d a9       	ldd	r20, Y+53	; 0x35
    19fe:	5e a9       	ldd	r21, Y+54	; 0x36
    1a00:	ca 01       	movw	r24, r20
    1a02:	b9 01       	movw	r22, r18
    1a04:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1a08:	6b af       	std	Y+59, r22	; 0x3b
    1a0a:	7c af       	std	Y+60, r23	; 0x3c
    1a0c:	8d af       	std	Y+61, r24	; 0x3d
    1a0e:	9e af       	std	Y+62, r25	; 0x3e
	double x3 = x2*p.x;
    1a10:	9b 01       	movw	r18, r22
    1a12:	ac 01       	movw	r20, r24
    1a14:	6b a9       	ldd	r22, Y+51	; 0x33
    1a16:	7c a9       	ldd	r23, Y+52	; 0x34
    1a18:	8d a9       	ldd	r24, Y+53	; 0x35
    1a1a:	9e a9       	ldd	r25, Y+54	; 0x36
    1a1c:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1a20:	6b 01       	movw	r12, r22
    1a22:	7c 01       	movw	r14, r24
	double x4 = x3*p.x;
	double y2 = p.y*p.y;
    1a24:	6d a1       	ldd	r22, Y+37	; 0x25
    1a26:	7e a1       	ldd	r23, Y+38	; 0x26
    1a28:	8f a1       	ldd	r24, Y+39	; 0x27
    1a2a:	98 a5       	ldd	r25, Y+40	; 0x28
    1a2c:	9b 01       	movw	r18, r22
    1a2e:	ac 01       	movw	r20, r24
    1a30:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1a34:	6f a7       	std	Y+47, r22	; 0x2f
    1a36:	78 ab       	std	Y+48, r23	; 0x30
    1a38:	89 ab       	std	Y+49, r24	; 0x31
    1a3a:	9a ab       	std	Y+50, r25	; 0x32
	double y4 = y2*y2;
	double z2 = p.z*p.z;
    1a3c:	2f a9       	ldd	r18, Y+55	; 0x37
    1a3e:	38 ad       	ldd	r19, Y+56	; 0x38
    1a40:	49 ad       	ldd	r20, Y+57	; 0x39
    1a42:	5a ad       	ldd	r21, Y+58	; 0x3a
    1a44:	ca 01       	movw	r24, r20
    1a46:	b9 01       	movw	r22, r18
    1a48:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1a4c:	2b 01       	movw	r4, r22
    1a4e:	3c 01       	movw	r6, r24
	double z3 = z2*p.z;
	double z4 = z3*p.z;
	double A = -214 * sqrt(3) + 6 * sqrt(3) * x2 -
    1a50:	21 ee       	ldi	r18, 0xE1	; 225
    1a52:	36 e4       	ldi	r19, 0x46	; 70
    1a54:	46 e2       	ldi	r20, 0x26	; 38
    1a56:	51 e4       	ldi	r21, 0x41	; 65
    1a58:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a5a:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a5c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a5e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a60:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1a64:	26 e5       	ldi	r18, 0x56	; 86
    1a66:	34 e5       	ldi	r19, 0x54	; 84
    1a68:	49 eb       	ldi	r20, 0xB9	; 185
    1a6a:	53 e4       	ldi	r21, 0x43	; 67
    1a6c:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    1a70:	a7 01       	movw	r20, r14
    1a72:	96 01       	movw	r18, r12
    1a74:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    1a78:	4b 01       	movw	r8, r22
    1a7a:	5c 01       	movw	r10, r24
		x3 + 2 * sqrt(3) * y2 + 2 * sqrt(3) *
    1a7c:	27 ed       	ldi	r18, 0xD7	; 215
    1a7e:	33 eb       	ldi	r19, 0xB3	; 179
    1a80:	4d e5       	ldi	r20, 0x5D	; 93
    1a82:	50 e4       	ldi	r21, 0x40	; 64
    1a84:	6f a5       	ldd	r22, Y+47	; 0x2f
    1a86:	78 a9       	ldd	r23, Y+48	; 0x30
    1a88:	89 a9       	ldd	r24, Y+49	; 0x31
    1a8a:	9a a9       	ldd	r25, Y+50	; 0x32
    1a8c:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1a90:	9b 01       	movw	r18, r22
    1a92:	ac 01       	movw	r20, r24
    1a94:	c5 01       	movw	r24, r10
    1a96:	b4 01       	movw	r22, r8
    1a98:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
    1a9c:	4b 01       	movw	r8, r22
    1a9e:	5c 01       	movw	r10, r24
    1aa0:	27 ed       	ldi	r18, 0xD7	; 215
    1aa2:	33 eb       	ldi	r19, 0xB3	; 179
    1aa4:	4d e5       	ldi	r20, 0x5D	; 93
    1aa6:	50 e4       	ldi	r21, 0x40	; 64
    1aa8:	c3 01       	movw	r24, r6
    1aaa:	b2 01       	movw	r22, r4
    1aac:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1ab0:	9b 01       	movw	r18, r22
    1ab2:	ac 01       	movw	r20, r24
    1ab4:	c5 01       	movw	r24, r10
    1ab6:	b4 01       	movw	r22, r8
    1ab8:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
    1abc:	4b 01       	movw	r8, r22
    1abe:	5c 01       	movw	r10, r24
		z2 - p.x * (-83 + y2 + z2);
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	46 ea       	ldi	r20, 0xA6	; 166
    1ac6:	52 e4       	ldi	r21, 0x42	; 66
    1ac8:	6f a5       	ldd	r22, Y+47	; 0x2f
    1aca:	78 a9       	ldd	r23, Y+48	; 0x30
    1acc:	89 a9       	ldd	r24, Y+49	; 0x31
    1ace:	9a a9       	ldd	r25, Y+50	; 0x32
    1ad0:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    1ad4:	a3 01       	movw	r20, r6
    1ad6:	92 01       	movw	r18, r4
    1ad8:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
    1adc:	9b 01       	movw	r18, r22
    1ade:	ac 01       	movw	r20, r24
    1ae0:	6b a9       	ldd	r22, Y+51	; 0x33
    1ae2:	7c a9       	ldd	r23, Y+52	; 0x34
    1ae4:	8d a9       	ldd	r24, Y+53	; 0x35
    1ae6:	9e a9       	ldd	r25, Y+54	; 0x36
    1ae8:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1aec:	9b 01       	movw	r18, r22
    1aee:	ac 01       	movw	r20, r24
	double y2 = p.y*p.y;
	double y4 = y2*y2;
	double z2 = p.z*p.z;
	double z3 = z2*p.z;
	double z4 = z3*p.z;
	double A = -214 * sqrt(3) + 6 * sqrt(3) * x2 -
    1af0:	c5 01       	movw	r24, r10
    1af2:	b4 01       	movw	r22, r8
    1af4:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    1af8:	23 96       	adiw	r28, 0x03	; 3
    1afa:	6c af       	std	Y+60, r22	; 0x3c
    1afc:	7d af       	std	Y+61, r23	; 0x3d
    1afe:	8e af       	std	Y+62, r24	; 0x3e
    1b00:	9f af       	std	Y+63, r25	; 0x3f
    1b02:	23 97       	sbiw	r28, 0x03	; 3
		x3 + 2 * sqrt(3) * y2 + 2 * sqrt(3) *
		z2 - p.x * (-83 + y2 + z2);
	double B = sqrt(-z2 * (10249 - 8 * sqrt(3) * x3
    1b04:	d3 01       	movw	r26, r6
    1b06:	c2 01       	movw	r24, r4
    1b08:	b0 58       	subi	r27, 0x80	; 128
    1b0a:	27 96       	adiw	r28, 0x07	; 7
    1b0c:	8c af       	std	Y+60, r24	; 0x3c
    1b0e:	9d af       	std	Y+61, r25	; 0x3d
    1b10:	ae af       	std	Y+62, r26	; 0x3e
    1b12:	bf af       	std	Y+63, r27	; 0x3f
    1b14:	27 97       	sbiw	r28, 0x07	; 7
    1b16:	27 ed       	ldi	r18, 0xD7	; 215
    1b18:	33 eb       	ldi	r19, 0xB3	; 179
    1b1a:	4d e5       	ldi	r20, 0x5D	; 93
    1b1c:	51 e4       	ldi	r21, 0x41	; 65
    1b1e:	c7 01       	movw	r24, r14
    1b20:	b6 01       	movw	r22, r12
    1b22:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1b26:	9b 01       	movw	r18, r22
    1b28:	ac 01       	movw	r20, r24
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	74 e2       	ldi	r23, 0x24	; 36
    1b2e:	80 e2       	ldi	r24, 0x20	; 32
    1b30:	96 e4       	ldi	r25, 0x46	; 70
    1b32:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    1b36:	4b 01       	movw	r8, r22
    1b38:	5c 01       	movw	r10, r24
	double options[4]; /* Mathematica outputs four possible expressions for the
					   angle. Two are invalid, and one is extraneous. */
	/* GENERATE FOUR POSSIBLE OPTIONS. */
	double x2 = p.x*p.x;
	double x3 = x2*p.x;
	double x4 = x3*p.x;
    1b3a:	a7 01       	movw	r20, r14
    1b3c:	96 01       	movw	r18, r12
    1b3e:	6b a9       	ldd	r22, Y+51	; 0x33
    1b40:	7c a9       	ldd	r23, Y+52	; 0x34
    1b42:	8d a9       	ldd	r24, Y+53	; 0x35
    1b44:	9e a9       	ldd	r25, Y+54	; 0x36
    1b46:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1b4a:	9b 01       	movw	r18, r22
    1b4c:	ac 01       	movw	r20, r24
	double z4 = z3*p.z;
	double A = -214 * sqrt(3) + 6 * sqrt(3) * x2 -
		x3 + 2 * sqrt(3) * y2 + 2 * sqrt(3) *
		z2 - p.x * (-83 + y2 + z2);
	double B = sqrt(-z2 * (10249 - 8 * sqrt(3) * x3
		+ x4 + y4 - 314 * z2 +
    1b4e:	c5 01       	movw	r24, r10
    1b50:	b4 01       	movw	r22, r8
    1b52:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
    1b56:	6b 01       	movw	r12, r22
    1b58:	7c 01       	movw	r14, r24
	/* GENERATE FOUR POSSIBLE OPTIONS. */
	double x2 = p.x*p.x;
	double x3 = x2*p.x;
	double x4 = x3*p.x;
	double y2 = p.y*p.y;
	double y4 = y2*y2;
    1b5a:	2f a5       	ldd	r18, Y+47	; 0x2f
    1b5c:	38 a9       	ldd	r19, Y+48	; 0x30
    1b5e:	49 a9       	ldd	r20, Y+49	; 0x31
    1b60:	5a a9       	ldd	r21, Y+50	; 0x32
    1b62:	ca 01       	movw	r24, r20
    1b64:	b9 01       	movw	r22, r18
    1b66:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1b6a:	9b 01       	movw	r18, r22
    1b6c:	ac 01       	movw	r20, r24
	double z4 = z3*p.z;
	double A = -214 * sqrt(3) + 6 * sqrt(3) * x2 -
		x3 + 2 * sqrt(3) * y2 + 2 * sqrt(3) *
		z2 - p.x * (-83 + y2 + z2);
	double B = sqrt(-z2 * (10249 - 8 * sqrt(3) * x3
		+ x4 + y4 - 314 * z2 +
    1b6e:	c7 01       	movw	r24, r14
    1b70:	b6 01       	movw	r22, r12
    1b72:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
    1b76:	6b 01       	movw	r12, r22
    1b78:	7c 01       	movw	r14, r24
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	4d e9       	ldi	r20, 0x9D	; 157
    1b80:	53 e4       	ldi	r21, 0x43	; 67
    1b82:	c3 01       	movw	r24, r6
    1b84:	b2 01       	movw	r22, r4
    1b86:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1b8a:	9b 01       	movw	r18, r22
    1b8c:	ac 01       	movw	r20, r24
    1b8e:	c7 01       	movw	r24, r14
    1b90:	b6 01       	movw	r22, r12
    1b92:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    1b96:	6b 01       	movw	r12, r22
    1b98:	7c 01       	movw	r14, r24
	double x3 = x2*p.x;
	double x4 = x3*p.x;
	double y2 = p.y*p.y;
	double y4 = y2*y2;
	double z2 = p.z*p.z;
	double z3 = z2*p.z;
    1b9a:	a3 01       	movw	r20, r6
    1b9c:	92 01       	movw	r18, r4
    1b9e:	6f a9       	ldd	r22, Y+55	; 0x37
    1ba0:	78 ad       	ldd	r23, Y+56	; 0x38
    1ba2:	89 ad       	ldd	r24, Y+57	; 0x39
    1ba4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ba6:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1baa:	9b 01       	movw	r18, r22
    1bac:	ac 01       	movw	r20, r24
	double z4 = z3*p.z;
    1bae:	6f a9       	ldd	r22, Y+55	; 0x37
    1bb0:	78 ad       	ldd	r23, Y+56	; 0x38
    1bb2:	89 ad       	ldd	r24, Y+57	; 0x39
    1bb4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bb6:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1bba:	9b 01       	movw	r18, r22
    1bbc:	ac 01       	movw	r20, r24
	double A = -214 * sqrt(3) + 6 * sqrt(3) * x2 -
		x3 + 2 * sqrt(3) * y2 + 2 * sqrt(3) *
		z2 - p.x * (-83 + y2 + z2);
	double B = sqrt(-z2 * (10249 - 8 * sqrt(3) * x3
		+ x4 + y4 - 314 * z2 +
    1bbe:	c7 01       	movw	r24, r14
    1bc0:	b6 01       	movw	r22, r12
    1bc2:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
    1bc6:	6b 01       	movw	r12, r22
    1bc8:	7c 01       	movw	r14, r24
		z4 + 2 * y2 * (-107 + z2) -
    1bca:	2f a5       	ldd	r18, Y+47	; 0x2f
    1bcc:	38 a9       	ldd	r19, Y+48	; 0x30
    1bce:	49 a9       	ldd	r20, Y+49	; 0x31
    1bd0:	5a a9       	ldd	r21, Y+50	; 0x32
    1bd2:	ca 01       	movw	r24, r20
    1bd4:	b9 01       	movw	r22, r18
    1bd6:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
    1bda:	4b 01       	movw	r8, r22
    1bdc:	5c 01       	movw	r10, r24
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	46 ed       	ldi	r20, 0xD6	; 214
    1be4:	52 e4       	ldi	r21, 0x42	; 66
    1be6:	c3 01       	movw	r24, r6
    1be8:	b2 01       	movw	r22, r4
    1bea:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    1bee:	9b 01       	movw	r18, r22
    1bf0:	ac 01       	movw	r20, r24
    1bf2:	c5 01       	movw	r24, r10
    1bf4:	b4 01       	movw	r22, r8
    1bf6:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1bfa:	9b 01       	movw	r18, r22
    1bfc:	ac 01       	movw	r20, r24
    1bfe:	c7 01       	movw	r24, r14
    1c00:	b6 01       	movw	r22, r12
    1c02:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
    1c06:	6b 01       	movw	r12, r22
    1c08:	7c 01       	movw	r14, r24
		8 * sqrt(3) * p.x * (-157 + y2 + z2)
    1c0a:	27 ed       	ldi	r18, 0xD7	; 215
    1c0c:	33 eb       	ldi	r19, 0xB3	; 179
    1c0e:	4d e5       	ldi	r20, 0x5D	; 93
    1c10:	51 e4       	ldi	r21, 0x41	; 65
    1c12:	6b a9       	ldd	r22, Y+51	; 0x33
    1c14:	7c a9       	ldd	r23, Y+52	; 0x34
    1c16:	8d a9       	ldd	r24, Y+53	; 0x35
    1c18:	9e a9       	ldd	r25, Y+54	; 0x36
    1c1a:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1c1e:	4b 01       	movw	r8, r22
    1c20:	5c 01       	movw	r10, r24
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	4d e1       	ldi	r20, 0x1D	; 29
    1c28:	53 e4       	ldi	r21, 0x43	; 67
    1c2a:	6f a5       	ldd	r22, Y+47	; 0x2f
    1c2c:	78 a9       	ldd	r23, Y+48	; 0x30
    1c2e:	89 a9       	ldd	r24, Y+49	; 0x31
    1c30:	9a a9       	ldd	r25, Y+50	; 0x32
    1c32:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    1c36:	a3 01       	movw	r20, r6
    1c38:	92 01       	movw	r18, r4
    1c3a:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
    1c3e:	9b 01       	movw	r18, r22
    1c40:	ac 01       	movw	r20, r24
    1c42:	c5 01       	movw	r24, r10
    1c44:	b4 01       	movw	r22, r8
    1c46:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1c4a:	9b 01       	movw	r18, r22
    1c4c:	ac 01       	movw	r20, r24
	double A = -214 * sqrt(3) + 6 * sqrt(3) * x2 -
		x3 + 2 * sqrt(3) * y2 + 2 * sqrt(3) *
		z2 - p.x * (-83 + y2 + z2);
	double B = sqrt(-z2 * (10249 - 8 * sqrt(3) * x3
		+ x4 + y4 - 314 * z2 +
		z4 + 2 * y2 * (-107 + z2) -
    1c4e:	c7 01       	movw	r24, r14
    1c50:	b6 01       	movw	r22, r12
    1c52:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    1c56:	6b 01       	movw	r12, r22
    1c58:	7c 01       	movw	r14, r24
		8 * sqrt(3) * p.x * (-157 + y2 + z2)
		+ 2 * x2 * (-133 + y2 +
    1c5a:	2b ad       	ldd	r18, Y+59	; 0x3b
    1c5c:	3c ad       	ldd	r19, Y+60	; 0x3c
    1c5e:	4d ad       	ldd	r20, Y+61	; 0x3d
    1c60:	5e ad       	ldd	r21, Y+62	; 0x3e
    1c62:	ca 01       	movw	r24, r20
    1c64:	b9 01       	movw	r22, r18
    1c66:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
    1c6a:	4b 01       	movw	r8, r22
    1c6c:	5c 01       	movw	r10, r24
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	45 e0       	ldi	r20, 0x05	; 5
    1c74:	53 e4       	ldi	r21, 0x43	; 67
    1c76:	6f a5       	ldd	r22, Y+47	; 0x2f
    1c78:	78 a9       	ldd	r23, Y+48	; 0x30
    1c7a:	89 a9       	ldd	r24, Y+49	; 0x31
    1c7c:	9a a9       	ldd	r25, Y+50	; 0x32
    1c7e:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    1c82:	a3 01       	movw	r20, r6
    1c84:	92 01       	movw	r18, r4
    1c86:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
    1c8a:	9b 01       	movw	r18, r22
    1c8c:	ac 01       	movw	r20, r24
    1c8e:	c5 01       	movw	r24, r10
    1c90:	b4 01       	movw	r22, r8
    1c92:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1c96:	9b 01       	movw	r18, r22
    1c98:	ac 01       	movw	r20, r24
    1c9a:	c7 01       	movw	r24, r14
    1c9c:	b6 01       	movw	r22, r12
    1c9e:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
    1ca2:	9b 01       	movw	r18, r22
    1ca4:	ac 01       	movw	r20, r24
	double z3 = z2*p.z;
	double z4 = z3*p.z;
	double A = -214 * sqrt(3) + 6 * sqrt(3) * x2 -
		x3 + 2 * sqrt(3) * y2 + 2 * sqrt(3) *
		z2 - p.x * (-83 + y2 + z2);
	double B = sqrt(-z2 * (10249 - 8 * sqrt(3) * x3
    1ca6:	27 96       	adiw	r28, 0x07	; 7
    1ca8:	6c ad       	ldd	r22, Y+60	; 0x3c
    1caa:	7d ad       	ldd	r23, Y+61	; 0x3d
    1cac:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cae:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cb0:	27 97       	sbiw	r28, 0x07	; 7
    1cb2:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1cb6:	0e 94 da 19 	call	0x33b4	; 0x33b4 <sqrt>
    1cba:	4b 01       	movw	r8, r22
    1cbc:	5c 01       	movw	r10, r24
		+ x4 + y4 - 314 * z2 +
		z4 + 2 * y2 * (-107 + z2) -
		8 * sqrt(3) * p.x * (-157 + y2 + z2)
		+ 2 * x2 * (-133 + y2 +
		z2)));
	double C = (10 * (12 - 4 * sqrt(3) * p.x +
    1cbe:	27 ed       	ldi	r18, 0xD7	; 215
    1cc0:	33 eb       	ldi	r19, 0xB3	; 179
    1cc2:	4d ed       	ldi	r20, 0xDD	; 221
    1cc4:	50 e4       	ldi	r21, 0x40	; 64
    1cc6:	6b a9       	ldd	r22, Y+51	; 0x33
    1cc8:	7c a9       	ldd	r23, Y+52	; 0x34
    1cca:	8d a9       	ldd	r24, Y+53	; 0x35
    1ccc:	9e a9       	ldd	r25, Y+54	; 0x36
    1cce:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1cd2:	9b 01       	movw	r18, r22
    1cd4:	ac 01       	movw	r20, r24
    1cd6:	60 e0       	ldi	r22, 0x00	; 0
    1cd8:	70 e0       	ldi	r23, 0x00	; 0
    1cda:	80 e4       	ldi	r24, 0x40	; 64
    1cdc:	91 e4       	ldi	r25, 0x41	; 65
    1cde:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    1ce2:	2b ad       	ldd	r18, Y+59	; 0x3b
    1ce4:	3c ad       	ldd	r19, Y+60	; 0x3c
    1ce6:	4d ad       	ldd	r20, Y+61	; 0x3d
    1ce8:	5e ad       	ldd	r21, Y+62	; 0x3e
    1cea:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
		x2 + z2));
    1cee:	a3 01       	movw	r20, r6
    1cf0:	92 01       	movw	r18, r4
    1cf2:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
		+ x4 + y4 - 314 * z2 +
		z4 + 2 * y2 * (-107 + z2) -
		8 * sqrt(3) * p.x * (-157 + y2 + z2)
		+ 2 * x2 * (-133 + y2 +
		z2)));
	double C = (10 * (12 - 4 * sqrt(3) * p.x +
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e2       	ldi	r20, 0x20	; 32
    1cfc:	51 e4       	ldi	r21, 0x41	; 65
    1cfe:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1d02:	6b 01       	movw	r12, r22
    1d04:	7c 01       	movw	r14, r24
		x2 + z2));
	double arg1 = -(A + B) / C;
	double arg2 = -(A - B) / C;
    1d06:	a5 01       	movw	r20, r10
    1d08:	94 01       	movw	r18, r8
    1d0a:	23 96       	adiw	r28, 0x03	; 3
    1d0c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d0e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d10:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d12:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d14:	23 97       	sbiw	r28, 0x03	; 3
    1d16:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    1d1a:	90 58       	subi	r25, 0x80	; 128
    1d1c:	a7 01       	movw	r20, r14
    1d1e:	96 01       	movw	r18, r12
    1d20:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__divsf3>
    1d24:	2b 01       	movw	r4, r22
    1d26:	3c 01       	movw	r6, r24
		8 * sqrt(3) * p.x * (-157 + y2 + z2)
		+ 2 * x2 * (-133 + y2 +
		z2)));
	double C = (10 * (12 - 4 * sqrt(3) * p.x +
		x2 + z2));
	double arg1 = -(A + B) / C;
    1d28:	a5 01       	movw	r20, r10
    1d2a:	94 01       	movw	r18, r8
    1d2c:	23 96       	adiw	r28, 0x03	; 3
    1d2e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d30:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d32:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d34:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d36:	23 97       	sbiw	r28, 0x03	; 3
    1d38:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
    1d3c:	90 58       	subi	r25, 0x80	; 128
    1d3e:	a7 01       	movw	r20, r14
    1d40:	96 01       	movw	r18, r12
    1d42:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__divsf3>
    1d46:	ab 01       	movw	r20, r22
    1d48:	bc 01       	movw	r22, r24
	double arg2 = -(A - B) / C;

	processArgOptions(options, arg1, arg2);
    1d4a:	93 01       	movw	r18, r6
    1d4c:	82 01       	movw	r16, r4
    1d4e:	ce 01       	movw	r24, r28
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	f7 da       	rcall	.-2578   	; 0x1342 <processArgOptions>
    1d54:	de 01       	movw	r26, r28
    1d56:	11 96       	adiw	r26, 0x01	; 1
    1d58:	1d 01       	movw	r2, r26
    1d5a:	8e 01       	movw	r16, r28
    1d5c:	0f 5e       	subi	r16, 0xEF	; 239
    1d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d60:	1e a7       	std	Y+46, r17	; 0x2e
    1d62:	0d a7       	std	Y+45, r16	; 0x2d
	/* REMOVE INVALID SOLUTIONS */
	double values[4]; /* One val for each option; pick 2 smallest. */
	int i; /* Iterate over options. */
	for (i = 0; i < 4; i++)
	{
		if (isnan(options[i]))
    1d64:	f1 01       	movw	r30, r2
    1d66:	c1 90       	ld	r12, Z+
    1d68:	d1 90       	ld	r13, Z+
    1d6a:	e1 90       	ld	r14, Z+
    1d6c:	f1 90       	ld	r15, Z+
    1d6e:	1f 01       	movw	r2, r30
    1d70:	a7 01       	movw	r20, r14
    1d72:	96 01       	movw	r18, r12
    1d74:	c7 01       	movw	r24, r14
    1d76:	b6 01       	movw	r22, r12
    1d78:	0e 94 18 1a 	call	0x3430	; 0x3430 <__unordsf2>
    1d7c:	88 23       	and	r24, r24
    1d7e:	51 f0       	breq	.+20     	; 0x1d94 <getAngle1+0x40a>
			values[i] = DBL_MAX;
    1d80:	8f ef       	ldi	r24, 0xFF	; 255
    1d82:	9f ef       	ldi	r25, 0xFF	; 255
    1d84:	af e7       	ldi	r26, 0x7F	; 127
    1d86:	bf e7       	ldi	r27, 0x7F	; 127
    1d88:	f8 01       	movw	r30, r16
    1d8a:	80 83       	st	Z, r24
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	a2 83       	std	Z+2, r26	; 0x02
    1d90:	b3 83       	std	Z+3, r27	; 0x03
    1d92:	60 c0       	rjmp	.+192    	; 0x1e54 <getAngle1+0x4ca>
		else
			values[i] =
			fabs(sqr(p.x + (4 - 10) / sqrt(3) - 5 * cos(options[i]))
    1d94:	c7 01       	movw	r24, r14
    1d96:	b6 01       	movw	r22, r12
    1d98:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <cos>
    1d9c:	2b 01       	movw	r4, r22
    1d9e:	3c 01       	movw	r6, r24
    1da0:	28 ed       	ldi	r18, 0xD8	; 216
    1da2:	33 eb       	ldi	r19, 0xB3	; 179
    1da4:	4d e5       	ldi	r20, 0x5D	; 93
    1da6:	50 e4       	ldi	r21, 0x40	; 64
    1da8:	6b a9       	ldd	r22, Y+51	; 0x33
    1daa:	7c a9       	ldd	r23, Y+52	; 0x34
    1dac:	8d a9       	ldd	r24, Y+53	; 0x35
    1dae:	9e a9       	ldd	r25, Y+54	; 0x36
    1db0:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    1db4:	4b 01       	movw	r8, r22
    1db6:	5c 01       	movw	r10, r24
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 ea       	ldi	r20, 0xA0	; 160
    1dbe:	50 e4       	ldi	r21, 0x40	; 64
    1dc0:	c3 01       	movw	r24, r6
    1dc2:	b2 01       	movw	r22, r4
    1dc4:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1dc8:	9b 01       	movw	r18, r22
    1dca:	ac 01       	movw	r20, r24
    1dcc:	c5 01       	movw	r24, r10
    1dce:	b4 01       	movw	r22, r8
    1dd0:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    1dd4:	4b 01       	movw	r8, r22
    1dd6:	5c 01       	movw	r10, r24
			+ y2
			+ sqr(p.z - 5 * sin(options[i]))
    1dd8:	c7 01       	movw	r24, r14
    1dda:	b6 01       	movw	r22, r12
    1ddc:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <sin>
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 ea       	ldi	r20, 0xA0	; 160
    1de6:	50 e4       	ldi	r21, 0x40	; 64
    1de8:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1dec:	9b 01       	movw	r18, r22
    1dee:	ac 01       	movw	r20, r24
    1df0:	6f a9       	ldd	r22, Y+55	; 0x37
    1df2:	78 ad       	ldd	r23, Y+56	; 0x38
    1df4:	89 ad       	ldd	r24, Y+57	; 0x39
    1df6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1df8:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
    1dfc:	6b 01       	movw	r12, r22
    1dfe:	7c 01       	movw	r14, r24
}
/**
* Finds the square of x.
*/
double sqr(double x){
	return x*x;
    1e00:	a5 01       	movw	r20, r10
    1e02:	94 01       	movw	r18, r8
    1e04:	c5 01       	movw	r24, r10
    1e06:	b4 01       	movw	r22, r8
    1e08:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1e0c:	9b 01       	movw	r18, r22
    1e0e:	ac 01       	movw	r20, r24
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] =
			fabs(sqr(p.x + (4 - 10) / sqrt(3) - 5 * cos(options[i]))
			+ y2
    1e10:	6f a5       	ldd	r22, Y+47	; 0x2f
    1e12:	78 a9       	ldd	r23, Y+48	; 0x30
    1e14:	89 a9       	ldd	r24, Y+49	; 0x31
    1e16:	9a a9       	ldd	r25, Y+50	; 0x32
    1e18:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
    1e1c:	4b 01       	movw	r8, r22
    1e1e:	5c 01       	movw	r10, r24
}
/**
* Finds the square of x.
*/
double sqr(double x){
	return x*x;
    1e20:	a7 01       	movw	r20, r14
    1e22:	96 01       	movw	r18, r12
    1e24:	c7 01       	movw	r24, r14
    1e26:	b6 01       	movw	r22, r12
    1e28:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1e2c:	9b 01       	movw	r18, r22
    1e2e:	ac 01       	movw	r20, r24
			values[i] = DBL_MAX;
		else
			values[i] =
			fabs(sqr(p.x + (4 - 10) / sqrt(3) - 5 * cos(options[i]))
			+ y2
			+ sqr(p.z - 5 * sin(options[i]))
    1e30:	c5 01       	movw	r24, r10
    1e32:	b4 01       	movw	r22, r8
    1e34:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__addsf3>
			- 144);
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e1       	ldi	r20, 0x10	; 16
    1e3e:	53 e4       	ldi	r21, 0x43	; 67
    1e40:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__subsf3>
	{
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] =
			fabs(sqr(p.x + (4 - 10) / sqrt(3) - 5 * cos(options[i]))
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	bf 77       	andi	r27, 0x7F	; 127
	for (i = 0; i < 4; i++)
	{
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] =
    1e4a:	f8 01       	movw	r30, r16
    1e4c:	80 83       	st	Z, r24
    1e4e:	91 83       	std	Z+1, r25	; 0x01
    1e50:	a2 83       	std	Z+2, r26	; 0x02
    1e52:	b3 83       	std	Z+3, r27	; 0x03
    1e54:	0c 5f       	subi	r16, 0xFC	; 252
    1e56:	1f 4f       	sbci	r17, 0xFF	; 255


	/* REMOVE INVALID SOLUTIONS */
	double values[4]; /* One val for each option; pick 2 smallest. */
	int i; /* Iterate over options. */
	for (i = 0; i < 4; i++)
    1e58:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e5a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e5c:	28 16       	cp	r2, r24
    1e5e:	39 06       	cpc	r3, r25
    1e60:	09 f0       	breq	.+2      	; 0x1e64 <getAngle1+0x4da>
    1e62:	80 cf       	rjmp	.-256    	; 0x1d64 <getAngle1+0x3da>
			+ y2
			+ sqr(p.z - 5 * sin(options[i]))
			- 144);
		/* Above expression comes from original kinematics equation. */
	}
	return extractAngleSolution(values, options);
    1e64:	be 01       	movw	r22, r28
    1e66:	6f 5f       	subi	r22, 0xFF	; 255
    1e68:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	41 96       	adiw	r24, 0x11	; 17
    1e6e:	2f dd       	rcall	.-1442   	; 0x18ce <extractAngleSolution>
}
    1e70:	ca 5b       	subi	r28, 0xBA	; 186
    1e72:	df 4f       	sbci	r29, 0xFF	; 255
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
    1e82:	1f 91       	pop	r17
    1e84:	0f 91       	pop	r16
    1e86:	ff 90       	pop	r15
    1e88:	ef 90       	pop	r14
    1e8a:	df 90       	pop	r13
    1e8c:	cf 90       	pop	r12
    1e8e:	bf 90       	pop	r11
    1e90:	af 90       	pop	r10
    1e92:	9f 90       	pop	r9
    1e94:	8f 90       	pop	r8
    1e96:	7f 90       	pop	r7
    1e98:	6f 90       	pop	r6
    1e9a:	5f 90       	pop	r5
    1e9c:	4f 90       	pop	r4
    1e9e:	3f 90       	pop	r3
    1ea0:	2f 90       	pop	r2
    1ea2:	08 95       	ret

00001ea4 <getAngle2>:
/**
* Returns the required angle of servo actuator 2 to get to a desired point 'p'
* in degrees and servo coordinates. If no solution exists, returns NAN.
*/
double getAngle2(struct point p)
{
    1ea4:	2f 92       	push	r2
    1ea6:	3f 92       	push	r3
    1ea8:	4f 92       	push	r4
    1eaa:	5f 92       	push	r5
    1eac:	6f 92       	push	r6
    1eae:	7f 92       	push	r7
    1eb0:	8f 92       	push	r8
    1eb2:	9f 92       	push	r9
    1eb4:	af 92       	push	r10
    1eb6:	bf 92       	push	r11
    1eb8:	cf 92       	push	r12
    1eba:	df 92       	push	r13
    1ebc:	ef 92       	push	r14
    1ebe:	ff 92       	push	r15
    1ec0:	0f 93       	push	r16
    1ec2:	1f 93       	push	r17
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	cc 55       	subi	r28, 0x5C	; 92
    1ece:	d1 09       	sbc	r29, r1
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
    1eda:	e9 a2       	std	Y+33, r14	; 0x21
    1edc:	fa a2       	std	Y+34, r15	; 0x22
    1ede:	0b a3       	std	Y+35, r16	; 0x23
    1ee0:	1c a3       	std	Y+36, r17	; 0x24
    1ee2:	2d a3       	std	Y+37, r18	; 0x25
    1ee4:	3e a3       	std	Y+38, r19	; 0x26
    1ee6:	4f a3       	std	Y+39, r20	; 0x27
    1ee8:	58 a7       	std	Y+40, r21	; 0x28
    1eea:	69 a7       	std	Y+41, r22	; 0x29
    1eec:	7a a7       	std	Y+42, r23	; 0x2a
    1eee:	8b a7       	std	Y+43, r24	; 0x2b
    1ef0:	9c a7       	std	Y+44, r25	; 0x2c
    1ef2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ef4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ef6:	ab a1       	ldd	r26, Y+35	; 0x23
    1ef8:	bc a1       	ldd	r27, Y+36	; 0x24
    1efa:	8d ab       	std	Y+53, r24	; 0x35
    1efc:	9e ab       	std	Y+54, r25	; 0x36
    1efe:	af ab       	std	Y+55, r26	; 0x37
    1f00:	b8 af       	std	Y+56, r27	; 0x38
    1f02:	8d a1       	ldd	r24, Y+37	; 0x25
    1f04:	9e a1       	ldd	r25, Y+38	; 0x26
    1f06:	af a1       	ldd	r26, Y+39	; 0x27
    1f08:	b8 a5       	ldd	r27, Y+40	; 0x28
    1f0a:	89 ab       	std	Y+49, r24	; 0x31
    1f0c:	9a ab       	std	Y+50, r25	; 0x32
    1f0e:	ab ab       	std	Y+51, r26	; 0x33
    1f10:	bc ab       	std	Y+52, r27	; 0x34
    1f12:	89 a5       	ldd	r24, Y+41	; 0x29
    1f14:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f16:	ab a5       	ldd	r26, Y+43	; 0x2b
    1f18:	bc a5       	ldd	r27, Y+44	; 0x2c
    1f1a:	89 af       	std	Y+57, r24	; 0x39
    1f1c:	9a af       	std	Y+58, r25	; 0x3a
    1f1e:	ab af       	std	Y+59, r26	; 0x3b
    1f20:	bc af       	std	Y+60, r27	; 0x3c
	double options[4]; /* Mathematica outputs four possible expressions for the
					   angle. Two are invalid, and one is extraneous. */
	/* GENERATE FOUR POSSIBLE OPTIONS. */
	double x2 = p.x*p.x;
    1f22:	2d a9       	ldd	r18, Y+53	; 0x35
    1f24:	3e a9       	ldd	r19, Y+54	; 0x36
    1f26:	4f a9       	ldd	r20, Y+55	; 0x37
    1f28:	58 ad       	ldd	r21, Y+56	; 0x38
    1f2a:	ca 01       	movw	r24, r20
    1f2c:	b9 01       	movw	r22, r18
    1f2e:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1f32:	21 96       	adiw	r28, 0x01	; 1
    1f34:	6c af       	std	Y+60, r22	; 0x3c
    1f36:	7d af       	std	Y+61, r23	; 0x3d
    1f38:	8e af       	std	Y+62, r24	; 0x3e
    1f3a:	9f af       	std	Y+63, r25	; 0x3f
    1f3c:	21 97       	sbiw	r28, 0x01	; 1
	double x3 = x2*p.x;
    1f3e:	9b 01       	movw	r18, r22
    1f40:	ac 01       	movw	r20, r24
    1f42:	6d a9       	ldd	r22, Y+53	; 0x35
    1f44:	7e a9       	ldd	r23, Y+54	; 0x36
    1f46:	8f a9       	ldd	r24, Y+55	; 0x37
    1f48:	98 ad       	ldd	r25, Y+56	; 0x38
    1f4a:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1f4e:	4b 01       	movw	r8, r22
    1f50:	5c 01       	movw	r10, r24
	double x4 = x3*p.x;
	double y2 = p.y*p.y;
    1f52:	29 a9       	ldd	r18, Y+49	; 0x31
    1f54:	3a a9       	ldd	r19, Y+50	; 0x32
    1f56:	4b a9       	ldd	r20, Y+51	; 0x33
    1f58:	5c a9       	ldd	r21, Y+52	; 0x34
    1f5a:	ca 01       	movw	r24, r20
    1f5c:	b9 01       	movw	r22, r18
    1f5e:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1f62:	6d a7       	std	Y+45, r22	; 0x2d
    1f64:	7e a7       	std	Y+46, r23	; 0x2e
    1f66:	8f a7       	std	Y+47, r24	; 0x2f
    1f68:	98 ab       	std	Y+48, r25	; 0x30
	double y3 = y2*p.y;
    1f6a:	9b 01       	movw	r18, r22
    1f6c:	ac 01       	movw	r20, r24
    1f6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f70:	7a a9       	ldd	r23, Y+50	; 0x32
    1f72:	8b a9       	ldd	r24, Y+51	; 0x33
    1f74:	9c a9       	ldd	r25, Y+52	; 0x34
    1f76:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1f7a:	2d 96       	adiw	r28, 0x0d	; 13
    1f7c:	6c af       	std	Y+60, r22	; 0x3c
    1f7e:	7d af       	std	Y+61, r23	; 0x3d
    1f80:	8e af       	std	Y+62, r24	; 0x3e
    1f82:	9f af       	std	Y+63, r25	; 0x3f
    1f84:	2d 97       	sbiw	r28, 0x0d	; 13
	double y4 = y2*y2;
	double z2 = p.z*p.z;
    1f86:	29 ad       	ldd	r18, Y+57	; 0x39
    1f88:	3a ad       	ldd	r19, Y+58	; 0x3a
    1f8a:	4b ad       	ldd	r20, Y+59	; 0x3b
    1f8c:	5c ad       	ldd	r21, Y+60	; 0x3c
    1f8e:	ca 01       	movw	r24, r20
    1f90:	b9 01       	movw	r22, r18
    1f92:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1f96:	2b 01       	movw	r4, r22
    1f98:	3c 01       	movw	r6, r24
	double z4 = z3*p.z;
	double A = -428 * sqrt(3) + x3 - sqrt(3) * x2 *
		(-6 + p.y) + 83 * sqrt(3) *  p.y + 10 * sqrt(3) *
		y2 - sqrt(3) * y3 + 4 * sqrt(3) *
		z2 - sqrt(3) * p.y * z2 + p.x * (-83 -
		12 * p.y + y2 + z2);
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e4       	ldi	r20, 0x40	; 64
    1fa0:	51 e4       	ldi	r21, 0x41	; 65
    1fa2:	69 a9       	ldd	r22, Y+49	; 0x31
    1fa4:	7a a9       	ldd	r23, Y+50	; 0x32
    1fa6:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa8:	9c a9       	ldd	r25, Y+52	; 0x34
    1faa:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1fae:	29 96       	adiw	r28, 0x09	; 9
    1fb0:	6c af       	std	Y+60, r22	; 0x3c
    1fb2:	7d af       	std	Y+61, r23	; 0x3d
    1fb4:	8e af       	std	Y+62, r24	; 0x3e
    1fb6:	9f af       	std	Y+63, r25	; 0x3f
    1fb8:	29 97       	sbiw	r28, 0x09	; 9
	double y3 = y2*p.y;
	double y4 = y2*y2;
	double z2 = p.z*p.z;
	double z3 = z2*p.z;
	double z4 = z3*p.z;
	double A = -428 * sqrt(3) + x3 - sqrt(3) * x2 *
    1fba:	26 e5       	ldi	r18, 0x56	; 86
    1fbc:	34 e5       	ldi	r19, 0x54	; 84
    1fbe:	49 e3       	ldi	r20, 0x39	; 57
    1fc0:	54 e4       	ldi	r21, 0x44	; 68
    1fc2:	c5 01       	movw	r24, r10
    1fc4:	b4 01       	movw	r22, r8
    1fc6:	55 d7       	rcall	.+3754   	; 0x2e72 <__subsf3>
    1fc8:	6b 01       	movw	r12, r22
    1fca:	7c 01       	movw	r14, r24
    1fcc:	27 ed       	ldi	r18, 0xD7	; 215
    1fce:	33 eb       	ldi	r19, 0xB3	; 179
    1fd0:	4d ed       	ldi	r20, 0xDD	; 221
    1fd2:	5f e3       	ldi	r21, 0x3F	; 63
    1fd4:	21 96       	adiw	r28, 0x01	; 1
    1fd6:	6c ad       	ldd	r22, Y+60	; 0x3c
    1fd8:	7d ad       	ldd	r23, Y+61	; 0x3d
    1fda:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fdc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fde:	21 97       	sbiw	r28, 0x01	; 1
    1fe0:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    1fe4:	25 96       	adiw	r28, 0x05	; 5
    1fe6:	6c af       	std	Y+60, r22	; 0x3c
    1fe8:	7d af       	std	Y+61, r23	; 0x3d
    1fea:	8e af       	std	Y+62, r24	; 0x3e
    1fec:	9f af       	std	Y+63, r25	; 0x3f
    1fee:	25 97       	sbiw	r28, 0x05	; 5
		(-6 + p.y) + 83 * sqrt(3) *  p.y + 10 * sqrt(3) *
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 ec       	ldi	r20, 0xC0	; 192
    1ff6:	50 e4       	ldi	r21, 0x40	; 64
    1ff8:	69 a9       	ldd	r22, Y+49	; 0x31
    1ffa:	7a a9       	ldd	r23, Y+50	; 0x32
    1ffc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ffe:	9c a9       	ldd	r25, Y+52	; 0x34
    2000:	38 d7       	rcall	.+3696   	; 0x2e72 <__subsf3>
    2002:	9b 01       	movw	r18, r22
    2004:	ac 01       	movw	r20, r24
	double y3 = y2*p.y;
	double y4 = y2*y2;
	double z2 = p.z*p.z;
	double z3 = z2*p.z;
	double z4 = z3*p.z;
	double A = -428 * sqrt(3) + x3 - sqrt(3) * x2 *
    2006:	25 96       	adiw	r28, 0x05	; 5
    2008:	6c ad       	ldd	r22, Y+60	; 0x3c
    200a:	7d ad       	ldd	r23, Y+61	; 0x3d
    200c:	8e ad       	ldd	r24, Y+62	; 0x3e
    200e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2010:	25 97       	sbiw	r28, 0x05	; 5
    2012:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    2016:	9b 01       	movw	r18, r22
    2018:	ac 01       	movw	r20, r24
    201a:	c7 01       	movw	r24, r14
    201c:	b6 01       	movw	r22, r12
    201e:	29 d7       	rcall	.+3666   	; 0x2e72 <__subsf3>
    2020:	6b 01       	movw	r12, r22
    2022:	7c 01       	movw	r14, r24
		(-6 + p.y) + 83 * sqrt(3) *  p.y + 10 * sqrt(3) *
    2024:	2d e9       	ldi	r18, 0x9D	; 157
    2026:	32 ec       	ldi	r19, 0xC2	; 194
    2028:	4f e0       	ldi	r20, 0x0F	; 15
    202a:	53 e4       	ldi	r21, 0x43	; 67
    202c:	69 a9       	ldd	r22, Y+49	; 0x31
    202e:	7a a9       	ldd	r23, Y+50	; 0x32
    2030:	8b a9       	ldd	r24, Y+51	; 0x33
    2032:	9c a9       	ldd	r25, Y+52	; 0x34
    2034:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    2038:	9b 01       	movw	r18, r22
    203a:	ac 01       	movw	r20, r24
    203c:	c7 01       	movw	r24, r14
    203e:	b6 01       	movw	r22, r12
    2040:	19 d7       	rcall	.+3634   	; 0x2e74 <__addsf3>
    2042:	6b 01       	movw	r12, r22
    2044:	7c 01       	movw	r14, r24
    2046:	26 e6       	ldi	r18, 0x66	; 102
    2048:	30 e9       	ldi	r19, 0x90	; 144
    204a:	4a e8       	ldi	r20, 0x8A	; 138
    204c:	51 e4       	ldi	r21, 0x41	; 65
    204e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2050:	7e a5       	ldd	r23, Y+46	; 0x2e
    2052:	8f a5       	ldd	r24, Y+47	; 0x2f
    2054:	98 a9       	ldd	r25, Y+48	; 0x30
    2056:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    205a:	9b 01       	movw	r18, r22
    205c:	ac 01       	movw	r20, r24
    205e:	c7 01       	movw	r24, r14
    2060:	b6 01       	movw	r22, r12
    2062:	08 d7       	rcall	.+3600   	; 0x2e74 <__addsf3>
    2064:	6b 01       	movw	r12, r22
    2066:	7c 01       	movw	r14, r24
		y2 - sqrt(3) * y3 + 4 * sqrt(3) *
    2068:	27 ed       	ldi	r18, 0xD7	; 215
    206a:	33 eb       	ldi	r19, 0xB3	; 179
    206c:	4d ed       	ldi	r20, 0xDD	; 221
    206e:	5f e3       	ldi	r21, 0x3F	; 63
    2070:	2d 96       	adiw	r28, 0x0d	; 13
    2072:	6c ad       	ldd	r22, Y+60	; 0x3c
    2074:	7d ad       	ldd	r23, Y+61	; 0x3d
    2076:	8e ad       	ldd	r24, Y+62	; 0x3e
    2078:	9f ad       	ldd	r25, Y+63	; 0x3f
    207a:	2d 97       	sbiw	r28, 0x0d	; 13
    207c:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    2080:	9b 01       	movw	r18, r22
    2082:	ac 01       	movw	r20, r24
    2084:	c7 01       	movw	r24, r14
    2086:	b6 01       	movw	r22, r12
    2088:	f4 d6       	rcall	.+3560   	; 0x2e72 <__subsf3>
    208a:	6b 01       	movw	r12, r22
    208c:	7c 01       	movw	r14, r24
    208e:	27 ed       	ldi	r18, 0xD7	; 215
    2090:	33 eb       	ldi	r19, 0xB3	; 179
    2092:	4d ed       	ldi	r20, 0xDD	; 221
    2094:	50 e4       	ldi	r21, 0x40	; 64
    2096:	c3 01       	movw	r24, r6
    2098:	b2 01       	movw	r22, r4
    209a:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    209e:	9b 01       	movw	r18, r22
    20a0:	ac 01       	movw	r20, r24
    20a2:	c7 01       	movw	r24, r14
    20a4:	b6 01       	movw	r22, r12
    20a6:	e6 d6       	rcall	.+3532   	; 0x2e74 <__addsf3>
    20a8:	6b 01       	movw	r12, r22
    20aa:	7c 01       	movw	r14, r24
		z2 - sqrt(3) * p.y * z2 + p.x * (-83 -
    20ac:	27 ed       	ldi	r18, 0xD7	; 215
    20ae:	33 eb       	ldi	r19, 0xB3	; 179
    20b0:	4d ed       	ldi	r20, 0xDD	; 221
    20b2:	5f e3       	ldi	r21, 0x3F	; 63
    20b4:	69 a9       	ldd	r22, Y+49	; 0x31
    20b6:	7a a9       	ldd	r23, Y+50	; 0x32
    20b8:	8b a9       	ldd	r24, Y+51	; 0x33
    20ba:	9c a9       	ldd	r25, Y+52	; 0x34
    20bc:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    20c0:	a3 01       	movw	r20, r6
    20c2:	92 01       	movw	r18, r4
    20c4:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    20c8:	9b 01       	movw	r18, r22
    20ca:	ac 01       	movw	r20, r24
    20cc:	c7 01       	movw	r24, r14
    20ce:	b6 01       	movw	r22, r12
    20d0:	d0 d6       	rcall	.+3488   	; 0x2e72 <__subsf3>
    20d2:	6b 01       	movw	r12, r22
    20d4:	7c 01       	movw	r14, r24
    20d6:	29 96       	adiw	r28, 0x09	; 9
    20d8:	2c ad       	ldd	r18, Y+60	; 0x3c
    20da:	3d ad       	ldd	r19, Y+61	; 0x3d
    20dc:	4e ad       	ldd	r20, Y+62	; 0x3e
    20de:	5f ad       	ldd	r21, Y+63	; 0x3f
    20e0:	29 97       	sbiw	r28, 0x09	; 9
    20e2:	60 e0       	ldi	r22, 0x00	; 0
    20e4:	70 e0       	ldi	r23, 0x00	; 0
    20e6:	86 ea       	ldi	r24, 0xA6	; 166
    20e8:	92 ec       	ldi	r25, 0xC2	; 194
    20ea:	c3 d6       	rcall	.+3462   	; 0x2e72 <__subsf3>
		12 * p.y + y2 + z2);
    20ec:	2d a5       	ldd	r18, Y+45	; 0x2d
    20ee:	3e a5       	ldd	r19, Y+46	; 0x2e
    20f0:	4f a5       	ldd	r20, Y+47	; 0x2f
    20f2:	58 a9       	ldd	r21, Y+48	; 0x30
    20f4:	bf d6       	rcall	.+3454   	; 0x2e74 <__addsf3>
    20f6:	a3 01       	movw	r20, r6
    20f8:	92 01       	movw	r18, r4
    20fa:	bc d6       	rcall	.+3448   	; 0x2e74 <__addsf3>
    20fc:	9b 01       	movw	r18, r22
    20fe:	ac 01       	movw	r20, r24
	double z3 = z2*p.z;
	double z4 = z3*p.z;
	double A = -428 * sqrt(3) + x3 - sqrt(3) * x2 *
		(-6 + p.y) + 83 * sqrt(3) *  p.y + 10 * sqrt(3) *
		y2 - sqrt(3) * y3 + 4 * sqrt(3) *
		z2 - sqrt(3) * p.y * z2 + p.x * (-83 -
    2100:	6d a9       	ldd	r22, Y+53	; 0x35
    2102:	7e a9       	ldd	r23, Y+54	; 0x36
    2104:	8f a9       	ldd	r24, Y+55	; 0x37
    2106:	98 ad       	ldd	r25, Y+56	; 0x38
    2108:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    210c:	9b 01       	movw	r18, r22
    210e:	ac 01       	movw	r20, r24
	double y3 = y2*p.y;
	double y4 = y2*y2;
	double z2 = p.z*p.z;
	double z3 = z2*p.z;
	double z4 = z3*p.z;
	double A = -428 * sqrt(3) + x3 - sqrt(3) * x2 *
    2110:	c7 01       	movw	r24, r14
    2112:	b6 01       	movw	r22, r12
    2114:	af d6       	rcall	.+3422   	; 0x2e74 <__addsf3>
    2116:	25 96       	adiw	r28, 0x05	; 5
    2118:	6c af       	std	Y+60, r22	; 0x3c
    211a:	7d af       	std	Y+61, r23	; 0x3d
    211c:	8e af       	std	Y+62, r24	; 0x3e
    211e:	9f af       	std	Y+63, r25	; 0x3f
    2120:	25 97       	sbiw	r28, 0x05	; 5
		12 * p.y + y2 + z2);
	double B = 2 *
		sqrt(-z2 * (10249 + 4 * sqrt(3) * x3 +
		x4 - 12 * y3 + y4 - 314 *
		z2 + z4 - 12 * p.y * (-157 + z2)
		+ y2 * (-253 + 2 *
    2122:	a3 01       	movw	r20, r6
    2124:	92 01       	movw	r18, r4
    2126:	c3 01       	movw	r24, r6
    2128:	b2 01       	movw	r22, r4
    212a:	a4 d6       	rcall	.+3400   	; 0x2e74 <__addsf3>
    212c:	6b 01       	movw	r12, r22
    212e:	7c 01       	movw	r14, r24
		z2) + x2 * (-227 - 12 * p.y + 2 *
    2130:	2d a5       	ldd	r18, Y+45	; 0x2d
    2132:	3e a5       	ldd	r19, Y+46	; 0x2e
    2134:	4f a5       	ldd	r20, Y+47	; 0x2f
    2136:	58 a9       	ldd	r21, Y+48	; 0x30
    2138:	ca 01       	movw	r24, r20
    213a:	b9 01       	movw	r22, r18
    213c:	9b d6       	rcall	.+3382   	; 0x2e74 <__addsf3>
    213e:	61 96       	adiw	r28, 0x11	; 17
    2140:	6c af       	std	Y+60, r22	; 0x3c
    2142:	7d af       	std	Y+61, r23	; 0x3d
    2144:	8e af       	std	Y+62, r24	; 0x3e
    2146:	9f af       	std	Y+63, r25	; 0x3f
    2148:	61 97       	sbiw	r28, 0x11	; 17
		y2 + 2 * z2) + 2 * sqrt(3) * p.x * (-314 +
    214a:	27 ed       	ldi	r18, 0xD7	; 215
    214c:	33 eb       	ldi	r19, 0xB3	; 179
    214e:	4d e5       	ldi	r20, 0x5D	; 93
    2150:	50 e4       	ldi	r21, 0x40	; 64
    2152:	6d a9       	ldd	r22, Y+53	; 0x35
    2154:	7e a9       	ldd	r23, Y+54	; 0x36
    2156:	8f a9       	ldd	r24, Y+55	; 0x37
    2158:	98 ad       	ldd	r25, Y+56	; 0x38
    215a:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    215e:	65 96       	adiw	r28, 0x15	; 21
    2160:	6c af       	std	Y+60, r22	; 0x3c
    2162:	7d af       	std	Y+61, r23	; 0x3d
    2164:	8e af       	std	Y+62, r24	; 0x3e
    2166:	9f af       	std	Y+63, r25	; 0x3f
    2168:	65 97       	sbiw	r28, 0x15	; 21
		(-6 + p.y) + 83 * sqrt(3) *  p.y + 10 * sqrt(3) *
		y2 - sqrt(3) * y3 + 4 * sqrt(3) *
		z2 - sqrt(3) * p.y * z2 + p.x * (-83 -
		12 * p.y + y2 + z2);
	double B = 2 *
		sqrt(-z2 * (10249 + 4 * sqrt(3) * x3 +
    216a:	d3 01       	movw	r26, r6
    216c:	c2 01       	movw	r24, r4
    216e:	b0 58       	subi	r27, 0x80	; 128
    2170:	69 96       	adiw	r28, 0x19	; 25
    2172:	8c af       	std	Y+60, r24	; 0x3c
    2174:	9d af       	std	Y+61, r25	; 0x3d
    2176:	ae af       	std	Y+62, r26	; 0x3e
    2178:	bf af       	std	Y+63, r27	; 0x3f
    217a:	69 97       	sbiw	r28, 0x19	; 25
    217c:	27 ed       	ldi	r18, 0xD7	; 215
    217e:	33 eb       	ldi	r19, 0xB3	; 179
    2180:	4d ed       	ldi	r20, 0xDD	; 221
    2182:	50 e4       	ldi	r21, 0x40	; 64
    2184:	c5 01       	movw	r24, r10
    2186:	b4 01       	movw	r22, r8
    2188:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	34 e2       	ldi	r19, 0x24	; 36
    2190:	40 e2       	ldi	r20, 0x20	; 32
    2192:	56 e4       	ldi	r21, 0x46	; 70
    2194:	6f d6       	rcall	.+3294   	; 0x2e74 <__addsf3>
    2196:	6d 96       	adiw	r28, 0x1d	; 29
    2198:	6c af       	std	Y+60, r22	; 0x3c
    219a:	7d af       	std	Y+61, r23	; 0x3d
    219c:	8e af       	std	Y+62, r24	; 0x3e
    219e:	9f af       	std	Y+63, r25	; 0x3f
    21a0:	6d 97       	sbiw	r28, 0x1d	; 29
	double options[4]; /* Mathematica outputs four possible expressions for the
					   angle. Two are invalid, and one is extraneous. */
	/* GENERATE FOUR POSSIBLE OPTIONS. */
	double x2 = p.x*p.x;
	double x3 = x2*p.x;
	double x4 = x3*p.x;
    21a2:	a5 01       	movw	r20, r10
    21a4:	94 01       	movw	r18, r8
    21a6:	6d a9       	ldd	r22, Y+53	; 0x35
    21a8:	7e a9       	ldd	r23, Y+54	; 0x36
    21aa:	8f a9       	ldd	r24, Y+55	; 0x37
    21ac:	98 ad       	ldd	r25, Y+56	; 0x38
    21ae:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    21b2:	9b 01       	movw	r18, r22
    21b4:	ac 01       	movw	r20, r24
		(-6 + p.y) + 83 * sqrt(3) *  p.y + 10 * sqrt(3) *
		y2 - sqrt(3) * y3 + 4 * sqrt(3) *
		z2 - sqrt(3) * p.y * z2 + p.x * (-83 -
		12 * p.y + y2 + z2);
	double B = 2 *
		sqrt(-z2 * (10249 + 4 * sqrt(3) * x3 +
    21b6:	6d 96       	adiw	r28, 0x1d	; 29
    21b8:	6c ad       	ldd	r22, Y+60	; 0x3c
    21ba:	7d ad       	ldd	r23, Y+61	; 0x3d
    21bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    21be:	9f ad       	ldd	r25, Y+63	; 0x3f
    21c0:	6d 97       	sbiw	r28, 0x1d	; 29
    21c2:	58 d6       	rcall	.+3248   	; 0x2e74 <__addsf3>
    21c4:	4b 01       	movw	r8, r22
    21c6:	5c 01       	movw	r10, r24
		x4 - 12 * y3 + y4 - 314 *
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e4       	ldi	r20, 0x40	; 64
    21ce:	51 e4       	ldi	r21, 0x41	; 65
    21d0:	2d 96       	adiw	r28, 0x0d	; 13
    21d2:	6c ad       	ldd	r22, Y+60	; 0x3c
    21d4:	7d ad       	ldd	r23, Y+61	; 0x3d
    21d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    21d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    21da:	2d 97       	sbiw	r28, 0x0d	; 13
    21dc:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    21e0:	9b 01       	movw	r18, r22
    21e2:	ac 01       	movw	r20, r24
    21e4:	c5 01       	movw	r24, r10
    21e6:	b4 01       	movw	r22, r8
    21e8:	44 d6       	rcall	.+3208   	; 0x2e72 <__subsf3>
    21ea:	4b 01       	movw	r8, r22
    21ec:	5c 01       	movw	r10, r24
	double x2 = p.x*p.x;
	double x3 = x2*p.x;
	double x4 = x3*p.x;
	double y2 = p.y*p.y;
	double y3 = y2*p.y;
	double y4 = y2*y2;
    21ee:	2d a5       	ldd	r18, Y+45	; 0x2d
    21f0:	3e a5       	ldd	r19, Y+46	; 0x2e
    21f2:	4f a5       	ldd	r20, Y+47	; 0x2f
    21f4:	58 a9       	ldd	r21, Y+48	; 0x30
    21f6:	ca 01       	movw	r24, r20
    21f8:	b9 01       	movw	r22, r18
    21fa:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    21fe:	9b 01       	movw	r18, r22
    2200:	ac 01       	movw	r20, r24
		y2 - sqrt(3) * y3 + 4 * sqrt(3) *
		z2 - sqrt(3) * p.y * z2 + p.x * (-83 -
		12 * p.y + y2 + z2);
	double B = 2 *
		sqrt(-z2 * (10249 + 4 * sqrt(3) * x3 +
		x4 - 12 * y3 + y4 - 314 *
    2202:	c5 01       	movw	r24, r10
    2204:	b4 01       	movw	r22, r8
    2206:	36 d6       	rcall	.+3180   	; 0x2e74 <__addsf3>
    2208:	4b 01       	movw	r8, r22
    220a:	5c 01       	movw	r10, r24
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	4d e9       	ldi	r20, 0x9D	; 157
    2212:	53 e4       	ldi	r21, 0x43	; 67
    2214:	c3 01       	movw	r24, r6
    2216:	b2 01       	movw	r22, r4
    2218:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    221c:	9b 01       	movw	r18, r22
    221e:	ac 01       	movw	r20, r24
    2220:	c5 01       	movw	r24, r10
    2222:	b4 01       	movw	r22, r8
    2224:	26 d6       	rcall	.+3148   	; 0x2e72 <__subsf3>
    2226:	4b 01       	movw	r8, r22
    2228:	5c 01       	movw	r10, r24
	double x4 = x3*p.x;
	double y2 = p.y*p.y;
	double y3 = y2*p.y;
	double y4 = y2*y2;
	double z2 = p.z*p.z;
	double z3 = z2*p.z;
    222a:	a3 01       	movw	r20, r6
    222c:	92 01       	movw	r18, r4
    222e:	69 ad       	ldd	r22, Y+57	; 0x39
    2230:	7a ad       	ldd	r23, Y+58	; 0x3a
    2232:	8b ad       	ldd	r24, Y+59	; 0x3b
    2234:	9c ad       	ldd	r25, Y+60	; 0x3c
    2236:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    223a:	9b 01       	movw	r18, r22
    223c:	ac 01       	movw	r20, r24
	double z4 = z3*p.z;
    223e:	69 ad       	ldd	r22, Y+57	; 0x39
    2240:	7a ad       	ldd	r23, Y+58	; 0x3a
    2242:	8b ad       	ldd	r24, Y+59	; 0x3b
    2244:	9c ad       	ldd	r25, Y+60	; 0x3c
    2246:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    224a:	9b 01       	movw	r18, r22
    224c:	ac 01       	movw	r20, r24
		z2 - sqrt(3) * p.y * z2 + p.x * (-83 -
		12 * p.y + y2 + z2);
	double B = 2 *
		sqrt(-z2 * (10249 + 4 * sqrt(3) * x3 +
		x4 - 12 * y3 + y4 - 314 *
		z2 + z4 - 12 * p.y * (-157 + z2)
    224e:	c5 01       	movw	r24, r10
    2250:	b4 01       	movw	r22, r8
    2252:	10 d6       	rcall	.+3104   	; 0x2e74 <__addsf3>
    2254:	4b 01       	movw	r8, r22
    2256:	5c 01       	movw	r10, r24
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	4d e1       	ldi	r20, 0x1D	; 29
    225e:	53 e4       	ldi	r21, 0x43	; 67
    2260:	c3 01       	movw	r24, r6
    2262:	b2 01       	movw	r22, r4
    2264:	06 d6       	rcall	.+3084   	; 0x2e72 <__subsf3>
    2266:	9b 01       	movw	r18, r22
    2268:	ac 01       	movw	r20, r24
    226a:	29 96       	adiw	r28, 0x09	; 9
    226c:	6c ad       	ldd	r22, Y+60	; 0x3c
    226e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2270:	8e ad       	ldd	r24, Y+62	; 0x3e
    2272:	9f ad       	ldd	r25, Y+63	; 0x3f
    2274:	29 97       	sbiw	r28, 0x09	; 9
    2276:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    227a:	9b 01       	movw	r18, r22
    227c:	ac 01       	movw	r20, r24
    227e:	c5 01       	movw	r24, r10
    2280:	b4 01       	movw	r22, r8
    2282:	f7 d5       	rcall	.+3054   	; 0x2e72 <__subsf3>
    2284:	4b 01       	movw	r8, r22
    2286:	5c 01       	movw	r10, r24
		+ y2 * (-253 + 2 *
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	4d e7       	ldi	r20, 0x7D	; 125
    228e:	53 e4       	ldi	r21, 0x43	; 67
    2290:	c7 01       	movw	r24, r14
    2292:	b6 01       	movw	r22, r12
    2294:	ee d5       	rcall	.+3036   	; 0x2e72 <__subsf3>
    2296:	2d a5       	ldd	r18, Y+45	; 0x2d
    2298:	3e a5       	ldd	r19, Y+46	; 0x2e
    229a:	4f a5       	ldd	r20, Y+47	; 0x2f
    229c:	58 a9       	ldd	r21, Y+48	; 0x30
    229e:	0e 94 6d 19 	call	0x32da	; 0x32da <__mulsf3>
    22a2:	9b 01       	movw	r18, r22
    22a4:	ac 01       	movw	r20, r24
    22a6:	c5 01       	movw	r24, r10
    22a8:	b4 01       	movw	r22, r8
    22aa:	e4 d5       	rcall	.+3016   	; 0x2e74 <__addsf3>
    22ac:	4b 01       	movw	r8, r22
    22ae:	5c 01       	movw	r10, r24
		z2) + x2 * (-227 - 12 * p.y + 2 *
    22b0:	29 96       	adiw	r28, 0x09	; 9
    22b2:	2c ad       	ldd	r18, Y+60	; 0x3c
    22b4:	3d ad       	ldd	r19, Y+61	; 0x3d
    22b6:	4e ad       	ldd	r20, Y+62	; 0x3e
    22b8:	5f ad       	ldd	r21, Y+63	; 0x3f
    22ba:	29 97       	sbiw	r28, 0x09	; 9
    22bc:	60 e0       	ldi	r22, 0x00	; 0
    22be:	70 e0       	ldi	r23, 0x00	; 0
    22c0:	83 e6       	ldi	r24, 0x63	; 99
    22c2:	93 ec       	ldi	r25, 0xC3	; 195
    22c4:	d6 d5       	rcall	.+2988   	; 0x2e72 <__subsf3>
    22c6:	61 96       	adiw	r28, 0x11	; 17
    22c8:	2c ad       	ldd	r18, Y+60	; 0x3c
    22ca:	3d ad       	ldd	r19, Y+61	; 0x3d
    22cc:	4e ad       	ldd	r20, Y+62	; 0x3e
    22ce:	5f ad       	ldd	r21, Y+63	; 0x3f
    22d0:	61 97       	sbiw	r28, 0x11	; 17
    22d2:	d0 d5       	rcall	.+2976   	; 0x2e74 <__addsf3>
    22d4:	9b 01       	movw	r18, r22
    22d6:	ac 01       	movw	r20, r24
		y2 + 2 * z2) + 2 * sqrt(3) * p.x * (-314 +
    22d8:	c7 01       	movw	r24, r14
    22da:	b6 01       	movw	r22, r12
    22dc:	cb d5       	rcall	.+2966   	; 0x2e74 <__addsf3>
	double B = 2 *
		sqrt(-z2 * (10249 + 4 * sqrt(3) * x3 +
		x4 - 12 * y3 + y4 - 314 *
		z2 + z4 - 12 * p.y * (-157 + z2)
		+ y2 * (-253 + 2 *
		z2) + x2 * (-227 - 12 * p.y + 2 *
    22de:	21 96       	adiw	r28, 0x01	; 1
    22e0:	2c ad       	ldd	r18, Y+60	; 0x3c
    22e2:	3d ad       	ldd	r19, Y+61	; 0x3d
    22e4:	4e ad       	ldd	r20, Y+62	; 0x3e
    22e6:	5f ad       	ldd	r21, Y+63	; 0x3f
    22e8:	21 97       	sbiw	r28, 0x01	; 1
    22ea:	f7 d7       	rcall	.+4078   	; 0x32da <__mulsf3>
    22ec:	9b 01       	movw	r18, r22
    22ee:	ac 01       	movw	r20, r24
    22f0:	c5 01       	movw	r24, r10
    22f2:	b4 01       	movw	r22, r8
    22f4:	bf d5       	rcall	.+2942   	; 0x2e74 <__addsf3>
    22f6:	4b 01       	movw	r8, r22
    22f8:	5c 01       	movw	r10, r24
		y2 + 2 * z2) + 2 * sqrt(3) * p.x * (-314 +
		13 * p.y + 2 * y2 + 2 * z2)));
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e5       	ldi	r20, 0x50	; 80
    2300:	51 e4       	ldi	r21, 0x41	; 65
    2302:	69 a9       	ldd	r22, Y+49	; 0x31
    2304:	7a a9       	ldd	r23, Y+50	; 0x32
    2306:	8b a9       	ldd	r24, Y+51	; 0x33
    2308:	9c a9       	ldd	r25, Y+52	; 0x34
    230a:	e7 d7       	rcall	.+4046   	; 0x32da <__mulsf3>
		sqrt(-z2 * (10249 + 4 * sqrt(3) * x3 +
		x4 - 12 * y3 + y4 - 314 *
		z2 + z4 - 12 * p.y * (-157 + z2)
		+ y2 * (-253 + 2 *
		z2) + x2 * (-227 - 12 * p.y + 2 *
		y2 + 2 * z2) + 2 * sqrt(3) * p.x * (-314 +
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	4d e9       	ldi	r20, 0x9D	; 157
    2312:	53 e4       	ldi	r21, 0x43	; 67
    2314:	ae d5       	rcall	.+2908   	; 0x2e72 <__subsf3>
    2316:	9b 01       	movw	r18, r22
    2318:	ac 01       	movw	r20, r24
		13 * p.y + 2 * y2 + 2 * z2)));
    231a:	61 96       	adiw	r28, 0x11	; 17
    231c:	6c ad       	ldd	r22, Y+60	; 0x3c
    231e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2320:	8e ad       	ldd	r24, Y+62	; 0x3e
    2322:	9f ad       	ldd	r25, Y+63	; 0x3f
    2324:	61 97       	sbiw	r28, 0x11	; 17
    2326:	a6 d5       	rcall	.+2892   	; 0x2e74 <__addsf3>
    2328:	9b 01       	movw	r18, r22
    232a:	ac 01       	movw	r20, r24
    232c:	c7 01       	movw	r24, r14
    232e:	b6 01       	movw	r22, r12
    2330:	a1 d5       	rcall	.+2882   	; 0x2e74 <__addsf3>
    2332:	9b 01       	movw	r18, r22
    2334:	ac 01       	movw	r20, r24
		sqrt(-z2 * (10249 + 4 * sqrt(3) * x3 +
		x4 - 12 * y3 + y4 - 314 *
		z2 + z4 - 12 * p.y * (-157 + z2)
		+ y2 * (-253 + 2 *
		z2) + x2 * (-227 - 12 * p.y + 2 *
		y2 + 2 * z2) + 2 * sqrt(3) * p.x * (-314 +
    2336:	65 96       	adiw	r28, 0x15	; 21
    2338:	6c ad       	ldd	r22, Y+60	; 0x3c
    233a:	7d ad       	ldd	r23, Y+61	; 0x3d
    233c:	8e ad       	ldd	r24, Y+62	; 0x3e
    233e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2340:	65 97       	sbiw	r28, 0x15	; 21
    2342:	cb d7       	rcall	.+3990   	; 0x32da <__mulsf3>
    2344:	9b 01       	movw	r18, r22
    2346:	ac 01       	movw	r20, r24
    2348:	c5 01       	movw	r24, r10
    234a:	b4 01       	movw	r22, r8
    234c:	93 d5       	rcall	.+2854   	; 0x2e74 <__addsf3>
    234e:	9b 01       	movw	r18, r22
    2350:	ac 01       	movw	r20, r24
		(-6 + p.y) + 83 * sqrt(3) *  p.y + 10 * sqrt(3) *
		y2 - sqrt(3) * y3 + 4 * sqrt(3) *
		z2 - sqrt(3) * p.y * z2 + p.x * (-83 -
		12 * p.y + y2 + z2);
	double B = 2 *
		sqrt(-z2 * (10249 + 4 * sqrt(3) * x3 +
    2352:	69 96       	adiw	r28, 0x19	; 25
    2354:	6c ad       	ldd	r22, Y+60	; 0x3c
    2356:	7d ad       	ldd	r23, Y+61	; 0x3d
    2358:	8e ad       	ldd	r24, Y+62	; 0x3e
    235a:	9f ad       	ldd	r25, Y+63	; 0x3f
    235c:	69 97       	sbiw	r28, 0x19	; 25
    235e:	bd d7       	rcall	.+3962   	; 0x32da <__mulsf3>
    2360:	0e 94 da 19 	call	0x33b4	; 0x33b4 <sqrt>
	double A = -428 * sqrt(3) + x3 - sqrt(3) * x2 *
		(-6 + p.y) + 83 * sqrt(3) *  p.y + 10 * sqrt(3) *
		y2 - sqrt(3) * y3 + 4 * sqrt(3) *
		z2 - sqrt(3) * p.y * z2 + p.x * (-83 -
		12 * p.y + y2 + z2);
	double B = 2 *
    2364:	9b 01       	movw	r18, r22
    2366:	ac 01       	movw	r20, r24
    2368:	85 d5       	rcall	.+2826   	; 0x2e74 <__addsf3>
    236a:	6b 01       	movw	r12, r22
    236c:	7c 01       	movw	r14, r24
		z2 + z4 - 12 * p.y * (-157 + z2)
		+ y2 * (-253 + 2 *
		z2) + x2 * (-227 - 12 * p.y + 2 *
		y2 + 2 * z2) + 2 * sqrt(3) * p.x * (-314 +
		13 * p.y + 2 * y2 + 2 * z2)));
	double C = (5 * (48 +
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e4       	ldi	r20, 0x40	; 64
    2374:	52 e4       	ldi	r21, 0x42	; 66
    2376:	21 96       	adiw	r28, 0x01	; 1
    2378:	6c ad       	ldd	r22, Y+60	; 0x3c
    237a:	7d ad       	ldd	r23, Y+61	; 0x3d
    237c:	8e ad       	ldd	r24, Y+62	; 0x3e
    237e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2380:	21 97       	sbiw	r28, 0x01	; 1
    2382:	78 d5       	rcall	.+2800   	; 0x2e74 <__addsf3>
    2384:	4b 01       	movw	r8, r22
    2386:	5c 01       	movw	r10, r24
		x2 - 2 * sqrt(3) * p.x * (-4 + p.y) - 24 * p.y + 3
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e8       	ldi	r20, 0x80	; 128
    238e:	50 e4       	ldi	r21, 0x40	; 64
    2390:	69 a9       	ldd	r22, Y+49	; 0x31
    2392:	7a a9       	ldd	r23, Y+50	; 0x32
    2394:	8b a9       	ldd	r24, Y+51	; 0x33
    2396:	9c a9       	ldd	r25, Y+52	; 0x34
    2398:	6c d5       	rcall	.+2776   	; 0x2e72 <__subsf3>
    239a:	9b 01       	movw	r18, r22
    239c:	ac 01       	movw	r20, r24
    239e:	65 96       	adiw	r28, 0x15	; 21
    23a0:	6c ad       	ldd	r22, Y+60	; 0x3c
    23a2:	7d ad       	ldd	r23, Y+61	; 0x3d
    23a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    23a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    23a8:	65 97       	sbiw	r28, 0x15	; 21
    23aa:	97 d7       	rcall	.+3886   	; 0x32da <__mulsf3>
    23ac:	9b 01       	movw	r18, r22
    23ae:	ac 01       	movw	r20, r24
    23b0:	c5 01       	movw	r24, r10
    23b2:	b4 01       	movw	r22, r8
    23b4:	5e d5       	rcall	.+2748   	; 0x2e72 <__subsf3>
    23b6:	4b 01       	movw	r8, r22
    23b8:	5c 01       	movw	r10, r24
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 ec       	ldi	r20, 0xC0	; 192
    23c0:	51 e4       	ldi	r21, 0x41	; 65
    23c2:	69 a9       	ldd	r22, Y+49	; 0x31
    23c4:	7a a9       	ldd	r23, Y+50	; 0x32
    23c6:	8b a9       	ldd	r24, Y+51	; 0x33
    23c8:	9c a9       	ldd	r25, Y+52	; 0x34
    23ca:	87 d7       	rcall	.+3854   	; 0x32da <__mulsf3>
    23cc:	9b 01       	movw	r18, r22
    23ce:	ac 01       	movw	r20, r24
    23d0:	c5 01       	movw	r24, r10
    23d2:	b4 01       	movw	r22, r8
    23d4:	4e d5       	rcall	.+2716   	; 0x2e72 <__subsf3>
    23d6:	4b 01       	movw	r8, r22
    23d8:	5c 01       	movw	r10, r24
		* y2 + 4 * z2));
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e4       	ldi	r20, 0x40	; 64
    23e0:	50 e4       	ldi	r21, 0x40	; 64
    23e2:	6d a5       	ldd	r22, Y+45	; 0x2d
    23e4:	7e a5       	ldd	r23, Y+46	; 0x2e
    23e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e8:	98 a9       	ldd	r25, Y+48	; 0x30
    23ea:	77 d7       	rcall	.+3822   	; 0x32da <__mulsf3>
    23ec:	9b 01       	movw	r18, r22
    23ee:	ac 01       	movw	r20, r24
		+ y2 * (-253 + 2 *
		z2) + x2 * (-227 - 12 * p.y + 2 *
		y2 + 2 * z2) + 2 * sqrt(3) * p.x * (-314 +
		13 * p.y + 2 * y2 + 2 * z2)));
	double C = (5 * (48 +
		x2 - 2 * sqrt(3) * p.x * (-4 + p.y) - 24 * p.y + 3
    23f0:	c5 01       	movw	r24, r10
    23f2:	b4 01       	movw	r22, r8
    23f4:	3f d5       	rcall	.+2686   	; 0x2e74 <__addsf3>
    23f6:	4b 01       	movw	r8, r22
    23f8:	5c 01       	movw	r10, r24
		* y2 + 4 * z2));
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e8       	ldi	r20, 0x80	; 128
    2400:	50 e4       	ldi	r21, 0x40	; 64
    2402:	c3 01       	movw	r24, r6
    2404:	b2 01       	movw	r22, r4
    2406:	69 d7       	rcall	.+3794   	; 0x32da <__mulsf3>
    2408:	9b 01       	movw	r18, r22
    240a:	ac 01       	movw	r20, r24
    240c:	c5 01       	movw	r24, r10
    240e:	b4 01       	movw	r22, r8
    2410:	31 d5       	rcall	.+2658   	; 0x2e74 <__addsf3>
		z2 + z4 - 12 * p.y * (-157 + z2)
		+ y2 * (-253 + 2 *
		z2) + x2 * (-227 - 12 * p.y + 2 *
		y2 + 2 * z2) + 2 * sqrt(3) * p.x * (-314 +
		13 * p.y + 2 * y2 + 2 * z2)));
	double C = (5 * (48 +
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 ea       	ldi	r20, 0xA0	; 160
    2418:	50 e4       	ldi	r21, 0x40	; 64
    241a:	5f d7       	rcall	.+3774   	; 0x32da <__mulsf3>
    241c:	4b 01       	movw	r8, r22
    241e:	5c 01       	movw	r10, r24
		x2 - 2 * sqrt(3) * p.x * (-4 + p.y) - 24 * p.y + 3
		* y2 + 4 * z2));
	double arg1 = -(A + B) / C;
	double arg2 = -(A - B) / C;
    2420:	a7 01       	movw	r20, r14
    2422:	96 01       	movw	r18, r12
    2424:	25 96       	adiw	r28, 0x05	; 5
    2426:	6c ad       	ldd	r22, Y+60	; 0x3c
    2428:	7d ad       	ldd	r23, Y+61	; 0x3d
    242a:	8e ad       	ldd	r24, Y+62	; 0x3e
    242c:	9f ad       	ldd	r25, Y+63	; 0x3f
    242e:	25 97       	sbiw	r28, 0x05	; 5
    2430:	20 d5       	rcall	.+2624   	; 0x2e72 <__subsf3>
    2432:	90 58       	subi	r25, 0x80	; 128
    2434:	a5 01       	movw	r20, r10
    2436:	94 01       	movw	r18, r8
    2438:	88 d5       	rcall	.+2832   	; 0x2f4a <__divsf3>
    243a:	2b 01       	movw	r4, r22
    243c:	3c 01       	movw	r6, r24
		y2 + 2 * z2) + 2 * sqrt(3) * p.x * (-314 +
		13 * p.y + 2 * y2 + 2 * z2)));
	double C = (5 * (48 +
		x2 - 2 * sqrt(3) * p.x * (-4 + p.y) - 24 * p.y + 3
		* y2 + 4 * z2));
	double arg1 = -(A + B) / C;
    243e:	a7 01       	movw	r20, r14
    2440:	96 01       	movw	r18, r12
    2442:	25 96       	adiw	r28, 0x05	; 5
    2444:	6c ad       	ldd	r22, Y+60	; 0x3c
    2446:	7d ad       	ldd	r23, Y+61	; 0x3d
    2448:	8e ad       	ldd	r24, Y+62	; 0x3e
    244a:	9f ad       	ldd	r25, Y+63	; 0x3f
    244c:	25 97       	sbiw	r28, 0x05	; 5
    244e:	12 d5       	rcall	.+2596   	; 0x2e74 <__addsf3>
    2450:	90 58       	subi	r25, 0x80	; 128
    2452:	a5 01       	movw	r20, r10
    2454:	94 01       	movw	r18, r8
    2456:	79 d5       	rcall	.+2802   	; 0x2f4a <__divsf3>
    2458:	ab 01       	movw	r20, r22
    245a:	bc 01       	movw	r22, r24
	double arg2 = -(A - B) / C;



	//printf("NEW ARGS: %f %f \n", arg1,arg2);
	processArgOptions(options, arg1, arg2);
    245c:	93 01       	movw	r18, r6
    245e:	82 01       	movw	r16, r4
    2460:	ce 01       	movw	r24, r28
    2462:	01 96       	adiw	r24, 0x01	; 1
    2464:	0e 94 a1 09 	call	0x1342	; 0x1342 <processArgOptions>
    2468:	de 01       	movw	r26, r28
    246a:	11 96       	adiw	r26, 0x01	; 1
    246c:	1d 01       	movw	r2, r26
    246e:	fe 01       	movw	r30, r28
    2470:	71 96       	adiw	r30, 0x11	; 17
    2472:	fe a7       	std	Y+46, r31	; 0x2e
    2474:	ed a7       	std	Y+45, r30	; 0x2d
    2476:	8f 01       	movw	r16, r30
	/* REMOVE INVALID SOLUTIONS */
	double values[4]; /* One val for each option; pick 2 smallest. */
	int i; /* Iterate over options. */
	for (i = 0; i < 4; i++)
	{
		if (isnan(options[i]))
    2478:	d1 01       	movw	r26, r2
    247a:	cd 90       	ld	r12, X+
    247c:	dd 90       	ld	r13, X+
    247e:	ed 90       	ld	r14, X+
    2480:	fd 90       	ld	r15, X+
    2482:	1d 01       	movw	r2, r26
    2484:	a7 01       	movw	r20, r14
    2486:	96 01       	movw	r18, r12
    2488:	c7 01       	movw	r24, r14
    248a:	b6 01       	movw	r22, r12
    248c:	d1 d7       	rcall	.+4002   	; 0x3430 <__unordsf2>
    248e:	88 23       	and	r24, r24
    2490:	59 f0       	breq	.+22     	; 0x24a8 <__stack+0x2a9>
			values[i] = DBL_MAX;
    2492:	8f ef       	ldi	r24, 0xFF	; 255
    2494:	9f ef       	ldi	r25, 0xFF	; 255
    2496:	af e7       	ldi	r26, 0x7F	; 127
    2498:	bf e7       	ldi	r27, 0x7F	; 127
    249a:	ed a5       	ldd	r30, Y+45	; 0x2d
    249c:	fe a5       	ldd	r31, Y+46	; 0x2e
    249e:	80 83       	st	Z, r24
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	a2 83       	std	Z+2, r26	; 0x02
    24a4:	b3 83       	std	Z+3, r27	; 0x03
    24a6:	7b c0       	rjmp	.+246    	; 0x259e <__stack+0x39f>
		else
			values[i] = fabs(sqr(p.x + (10 - 4) / (2 * sqrt(3)) + 5 *
			cos(options[i]) / 2.0) + sqr(p.y + (4 - 10 - 5 *
    24a8:	c7 01       	movw	r24, r14
    24aa:	b6 01       	movw	r22, r12
    24ac:	4b d5       	rcall	.+2710   	; 0x2f44 <cos>
    24ae:	4b 01       	movw	r8, r22
    24b0:	5c 01       	movw	r10, r24
	for (i = 0; i < 4; i++)
	{
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] = fabs(sqr(p.x + (10 - 4) / (2 * sqrt(3)) + 5 *
    24b2:	28 ed       	ldi	r18, 0xD8	; 216
    24b4:	33 eb       	ldi	r19, 0xB3	; 179
    24b6:	4d ed       	ldi	r20, 0xDD	; 221
    24b8:	5f e3       	ldi	r21, 0x3F	; 63
    24ba:	6d a9       	ldd	r22, Y+53	; 0x35
    24bc:	7e a9       	ldd	r23, Y+54	; 0x36
    24be:	8f a9       	ldd	r24, Y+55	; 0x37
    24c0:	98 ad       	ldd	r25, Y+56	; 0x38
    24c2:	d8 d4       	rcall	.+2480   	; 0x2e74 <__addsf3>
    24c4:	2b 01       	movw	r4, r22
    24c6:	3c 01       	movw	r6, r24
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 ea       	ldi	r20, 0xA0	; 160
    24ce:	50 e4       	ldi	r21, 0x40	; 64
    24d0:	c5 01       	movw	r24, r10
    24d2:	b4 01       	movw	r22, r8
    24d4:	02 d7       	rcall	.+3588   	; 0x32da <__mulsf3>
			cos(options[i]) / 2.0) + sqr(p.y + (4 - 10 - 5 *
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	5f e3       	ldi	r21, 0x3F	; 63
    24de:	fd d6       	rcall	.+3578   	; 0x32da <__mulsf3>
    24e0:	9b 01       	movw	r18, r22
    24e2:	ac 01       	movw	r20, r24
	for (i = 0; i < 4; i++)
	{
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] = fabs(sqr(p.x + (10 - 4) / (2 * sqrt(3)) + 5 *
    24e4:	c3 01       	movw	r24, r6
    24e6:	b2 01       	movw	r22, r4
    24e8:	c5 d4       	rcall	.+2442   	; 0x2e74 <__addsf3>
    24ea:	2b 01       	movw	r4, r22
    24ec:	3c 01       	movw	r6, r24
			cos(options[i]) / 2.0) + sqr(p.y + (4 - 10 - 5 *
			sqrt(3) * cos(options[i])) / 2.0) + sqr(p.z - 5 *
    24ee:	26 e6       	ldi	r18, 0x66	; 102
    24f0:	30 e9       	ldi	r19, 0x90	; 144
    24f2:	4a e0       	ldi	r20, 0x0A	; 10
    24f4:	51 e4       	ldi	r21, 0x41	; 65
    24f6:	c5 01       	movw	r24, r10
    24f8:	b4 01       	movw	r22, r8
    24fa:	ef d6       	rcall	.+3550   	; 0x32da <__mulsf3>
    24fc:	9b 01       	movw	r18, r22
    24fe:	ac 01       	movw	r20, r24
	{
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] = fabs(sqr(p.x + (10 - 4) / (2 * sqrt(3)) + 5 *
			cos(options[i]) / 2.0) + sqr(p.y + (4 - 10 - 5 *
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	70 e0       	ldi	r23, 0x00	; 0
    2504:	80 ec       	ldi	r24, 0xC0	; 192
    2506:	90 ec       	ldi	r25, 0xC0	; 192
    2508:	b4 d4       	rcall	.+2408   	; 0x2e72 <__subsf3>
			sqrt(3) * cos(options[i])) / 2.0) + sqr(p.z - 5 *
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e0       	ldi	r20, 0x00	; 0
    2510:	5f e3       	ldi	r21, 0x3F	; 63
    2512:	e3 d6       	rcall	.+3526   	; 0x32da <__mulsf3>
    2514:	9b 01       	movw	r18, r22
    2516:	ac 01       	movw	r20, r24
	{
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] = fabs(sqr(p.x + (10 - 4) / (2 * sqrt(3)) + 5 *
			cos(options[i]) / 2.0) + sqr(p.y + (4 - 10 - 5 *
    2518:	69 a9       	ldd	r22, Y+49	; 0x31
    251a:	7a a9       	ldd	r23, Y+50	; 0x32
    251c:	8b a9       	ldd	r24, Y+51	; 0x33
    251e:	9c a9       	ldd	r25, Y+52	; 0x34
    2520:	a9 d4       	rcall	.+2386   	; 0x2e74 <__addsf3>
    2522:	4b 01       	movw	r8, r22
    2524:	5c 01       	movw	r10, r24
			sqrt(3) * cos(options[i])) / 2.0) + sqr(p.z - 5 *
			sin(options[i])) - 144);
    2526:	c7 01       	movw	r24, r14
    2528:	b6 01       	movw	r22, r12
    252a:	3a d7       	rcall	.+3700   	; 0x33a0 <sin>
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] = fabs(sqr(p.x + (10 - 4) / (2 * sqrt(3)) + 5 *
			cos(options[i]) / 2.0) + sqr(p.y + (4 - 10 - 5 *
			sqrt(3) * cos(options[i])) / 2.0) + sqr(p.z - 5 *
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 ea       	ldi	r20, 0xA0	; 160
    2532:	50 e4       	ldi	r21, 0x40	; 64
    2534:	d2 d6       	rcall	.+3492   	; 0x32da <__mulsf3>
    2536:	9b 01       	movw	r18, r22
    2538:	ac 01       	movw	r20, r24
    253a:	69 ad       	ldd	r22, Y+57	; 0x39
    253c:	7a ad       	ldd	r23, Y+58	; 0x3a
    253e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2540:	9c ad       	ldd	r25, Y+60	; 0x3c
    2542:	97 d4       	rcall	.+2350   	; 0x2e72 <__subsf3>
    2544:	6b 01       	movw	r12, r22
    2546:	7c 01       	movw	r14, r24
}
/**
* Finds the square of x.
*/
double sqr(double x){
	return x*x;
    2548:	a3 01       	movw	r20, r6
    254a:	92 01       	movw	r18, r4
    254c:	c3 01       	movw	r24, r6
    254e:	b2 01       	movw	r22, r4
    2550:	c4 d6       	rcall	.+3464   	; 0x32da <__mulsf3>
    2552:	2b 01       	movw	r4, r22
    2554:	3c 01       	movw	r6, r24
    2556:	a5 01       	movw	r20, r10
    2558:	94 01       	movw	r18, r8
    255a:	c5 01       	movw	r24, r10
    255c:	b4 01       	movw	r22, r8
    255e:	bd d6       	rcall	.+3450   	; 0x32da <__mulsf3>
    2560:	9b 01       	movw	r18, r22
    2562:	ac 01       	movw	r20, r24
	{
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] = fabs(sqr(p.x + (10 - 4) / (2 * sqrt(3)) + 5 *
			cos(options[i]) / 2.0) + sqr(p.y + (4 - 10 - 5 *
    2564:	c3 01       	movw	r24, r6
    2566:	b2 01       	movw	r22, r4
    2568:	85 d4       	rcall	.+2314   	; 0x2e74 <__addsf3>
    256a:	4b 01       	movw	r8, r22
    256c:	5c 01       	movw	r10, r24
}
/**
* Finds the square of x.
*/
double sqr(double x){
	return x*x;
    256e:	a7 01       	movw	r20, r14
    2570:	96 01       	movw	r18, r12
    2572:	c7 01       	movw	r24, r14
    2574:	b6 01       	movw	r22, r12
    2576:	b1 d6       	rcall	.+3426   	; 0x32da <__mulsf3>
    2578:	9b 01       	movw	r18, r22
    257a:	ac 01       	movw	r20, r24
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] = fabs(sqr(p.x + (10 - 4) / (2 * sqrt(3)) + 5 *
			cos(options[i]) / 2.0) + sqr(p.y + (4 - 10 - 5 *
			sqrt(3) * cos(options[i])) / 2.0) + sqr(p.z - 5 *
    257c:	c5 01       	movw	r24, r10
    257e:	b4 01       	movw	r22, r8
    2580:	79 d4       	rcall	.+2290   	; 0x2e74 <__addsf3>
			sin(options[i])) - 144);
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e1       	ldi	r20, 0x10	; 16
    2588:	53 e4       	ldi	r21, 0x43	; 67
    258a:	73 d4       	rcall	.+2278   	; 0x2e72 <__subsf3>
	for (i = 0; i < 4; i++)
	{
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] = fabs(sqr(p.x + (10 - 4) / (2 * sqrt(3)) + 5 *
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	bf 77       	andi	r27, 0x7F	; 127
    2592:	ed a5       	ldd	r30, Y+45	; 0x2d
    2594:	fe a5       	ldd	r31, Y+46	; 0x2e
    2596:	80 83       	st	Z, r24
    2598:	91 83       	std	Z+1, r25	; 0x01
    259a:	a2 83       	std	Z+2, r26	; 0x02
    259c:	b3 83       	std	Z+3, r27	; 0x03
    259e:	8d a5       	ldd	r24, Y+45	; 0x2d
    25a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    25a2:	04 96       	adiw	r24, 0x04	; 4
    25a4:	9e a7       	std	Y+46, r25	; 0x2e
    25a6:	8d a7       	std	Y+45, r24	; 0x2d
	//printf("NEW: %f %f %f %f \n", options[0], options[1], options[2], options[3]);

	/* REMOVE INVALID SOLUTIONS */
	double values[4]; /* One val for each option; pick 2 smallest. */
	int i; /* Iterate over options. */
	for (i = 0; i < 4; i++)
    25a8:	20 16       	cp	r2, r16
    25aa:	31 06       	cpc	r3, r17
    25ac:	09 f0       	breq	.+2      	; 0x25b0 <__stack+0x3b1>
    25ae:	64 cf       	rjmp	.-312    	; 0x2478 <__stack+0x279>
			sqrt(3) * cos(options[i])) / 2.0) + sqr(p.z - 5 *
			sin(options[i])) - 144);
		/* Above expression comes from original kinematics equation. */
	}
	//printf("NEW: %f %f %f %f \n", values[0], values[1], values[2], values[3]);
	return extractAngleSolution(values, options);
    25b0:	be 01       	movw	r22, r28
    25b2:	6f 5f       	subi	r22, 0xFF	; 255
    25b4:	7f 4f       	sbci	r23, 0xFF	; 255
    25b6:	ce 01       	movw	r24, r28
    25b8:	41 96       	adiw	r24, 0x11	; 17
    25ba:	89 d9       	rcall	.-3310   	; 0x18ce <extractAngleSolution>
}
    25bc:	c4 5a       	subi	r28, 0xA4	; 164
    25be:	df 4f       	sbci	r29, 0xFF	; 255
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	de bf       	out	0x3e, r29	; 62
    25c6:	0f be       	out	0x3f, r0	; 63
    25c8:	cd bf       	out	0x3d, r28	; 61
    25ca:	df 91       	pop	r29
    25cc:	cf 91       	pop	r28
    25ce:	1f 91       	pop	r17
    25d0:	0f 91       	pop	r16
    25d2:	ff 90       	pop	r15
    25d4:	ef 90       	pop	r14
    25d6:	df 90       	pop	r13
    25d8:	cf 90       	pop	r12
    25da:	bf 90       	pop	r11
    25dc:	af 90       	pop	r10
    25de:	9f 90       	pop	r9
    25e0:	8f 90       	pop	r8
    25e2:	7f 90       	pop	r7
    25e4:	6f 90       	pop	r6
    25e6:	5f 90       	pop	r5
    25e8:	4f 90       	pop	r4
    25ea:	3f 90       	pop	r3
    25ec:	2f 90       	pop	r2
    25ee:	08 95       	ret

000025f0 <getAngle3>:
/**
* Returns the required angle of servo actuator 3 to get to a desired point 'p'
* in degrees and servo coordinates. If no solution exists, returns NAN.
*/
double getAngle3(struct point p)
{
    25f0:	2f 92       	push	r2
    25f2:	3f 92       	push	r3
    25f4:	4f 92       	push	r4
    25f6:	5f 92       	push	r5
    25f8:	6f 92       	push	r6
    25fa:	7f 92       	push	r7
    25fc:	8f 92       	push	r8
    25fe:	9f 92       	push	r9
    2600:	af 92       	push	r10
    2602:	bf 92       	push	r11
    2604:	cf 92       	push	r12
    2606:	df 92       	push	r13
    2608:	ef 92       	push	r14
    260a:	ff 92       	push	r15
    260c:	0f 93       	push	r16
    260e:	1f 93       	push	r17
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	cc 55       	subi	r28, 0x5C	; 92
    261a:	d1 09       	sbc	r29, r1
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	e9 a2       	std	Y+33, r14	; 0x21
    2628:	fa a2       	std	Y+34, r15	; 0x22
    262a:	0b a3       	std	Y+35, r16	; 0x23
    262c:	1c a3       	std	Y+36, r17	; 0x24
    262e:	2d a3       	std	Y+37, r18	; 0x25
    2630:	3e a3       	std	Y+38, r19	; 0x26
    2632:	4f a3       	std	Y+39, r20	; 0x27
    2634:	58 a7       	std	Y+40, r21	; 0x28
    2636:	69 a7       	std	Y+41, r22	; 0x29
    2638:	7a a7       	std	Y+42, r23	; 0x2a
    263a:	8b a7       	std	Y+43, r24	; 0x2b
    263c:	9c a7       	std	Y+44, r25	; 0x2c
    263e:	89 a1       	ldd	r24, Y+33	; 0x21
    2640:	9a a1       	ldd	r25, Y+34	; 0x22
    2642:	ab a1       	ldd	r26, Y+35	; 0x23
    2644:	bc a1       	ldd	r27, Y+36	; 0x24
    2646:	8d ab       	std	Y+53, r24	; 0x35
    2648:	9e ab       	std	Y+54, r25	; 0x36
    264a:	af ab       	std	Y+55, r26	; 0x37
    264c:	b8 af       	std	Y+56, r27	; 0x38
    264e:	8d a1       	ldd	r24, Y+37	; 0x25
    2650:	9e a1       	ldd	r25, Y+38	; 0x26
    2652:	af a1       	ldd	r26, Y+39	; 0x27
    2654:	b8 a5       	ldd	r27, Y+40	; 0x28
    2656:	89 ab       	std	Y+49, r24	; 0x31
    2658:	9a ab       	std	Y+50, r25	; 0x32
    265a:	ab ab       	std	Y+51, r26	; 0x33
    265c:	bc ab       	std	Y+52, r27	; 0x34
    265e:	89 a5       	ldd	r24, Y+41	; 0x29
    2660:	9a a5       	ldd	r25, Y+42	; 0x2a
    2662:	ab a5       	ldd	r26, Y+43	; 0x2b
    2664:	bc a5       	ldd	r27, Y+44	; 0x2c
    2666:	89 af       	std	Y+57, r24	; 0x39
    2668:	9a af       	std	Y+58, r25	; 0x3a
    266a:	ab af       	std	Y+59, r26	; 0x3b
    266c:	bc af       	std	Y+60, r27	; 0x3c
	double options[4]; /* Mathematica outputs four possible expressions for the
					   angle. Two are invalid, and one is extraneous. */
	/* GENERATE FOUR POSSIBLE OPTIONS. */
	double x2 = p.x*p.x;
    266e:	2d a9       	ldd	r18, Y+53	; 0x35
    2670:	3e a9       	ldd	r19, Y+54	; 0x36
    2672:	4f a9       	ldd	r20, Y+55	; 0x37
    2674:	58 ad       	ldd	r21, Y+56	; 0x38
    2676:	ca 01       	movw	r24, r20
    2678:	b9 01       	movw	r22, r18
    267a:	2f d6       	rcall	.+3166   	; 0x32da <__mulsf3>
    267c:	21 96       	adiw	r28, 0x01	; 1
    267e:	6c af       	std	Y+60, r22	; 0x3c
    2680:	7d af       	std	Y+61, r23	; 0x3d
    2682:	8e af       	std	Y+62, r24	; 0x3e
    2684:	9f af       	std	Y+63, r25	; 0x3f
    2686:	21 97       	sbiw	r28, 0x01	; 1
	double x3 = x2*p.x;
    2688:	9b 01       	movw	r18, r22
    268a:	ac 01       	movw	r20, r24
    268c:	6d a9       	ldd	r22, Y+53	; 0x35
    268e:	7e a9       	ldd	r23, Y+54	; 0x36
    2690:	8f a9       	ldd	r24, Y+55	; 0x37
    2692:	98 ad       	ldd	r25, Y+56	; 0x38
    2694:	22 d6       	rcall	.+3140   	; 0x32da <__mulsf3>
    2696:	4b 01       	movw	r8, r22
    2698:	5c 01       	movw	r10, r24
	double x4 = x3*p.x;
	double y2 = p.y*p.y;
    269a:	29 a9       	ldd	r18, Y+49	; 0x31
    269c:	3a a9       	ldd	r19, Y+50	; 0x32
    269e:	4b a9       	ldd	r20, Y+51	; 0x33
    26a0:	5c a9       	ldd	r21, Y+52	; 0x34
    26a2:	ca 01       	movw	r24, r20
    26a4:	b9 01       	movw	r22, r18
    26a6:	19 d6       	rcall	.+3122   	; 0x32da <__mulsf3>
    26a8:	6d a7       	std	Y+45, r22	; 0x2d
    26aa:	7e a7       	std	Y+46, r23	; 0x2e
    26ac:	8f a7       	std	Y+47, r24	; 0x2f
    26ae:	98 ab       	std	Y+48, r25	; 0x30
	double y3 = y2*p.y;
    26b0:	9b 01       	movw	r18, r22
    26b2:	ac 01       	movw	r20, r24
    26b4:	69 a9       	ldd	r22, Y+49	; 0x31
    26b6:	7a a9       	ldd	r23, Y+50	; 0x32
    26b8:	8b a9       	ldd	r24, Y+51	; 0x33
    26ba:	9c a9       	ldd	r25, Y+52	; 0x34
    26bc:	0e d6       	rcall	.+3100   	; 0x32da <__mulsf3>
    26be:	2d 96       	adiw	r28, 0x0d	; 13
    26c0:	6c af       	std	Y+60, r22	; 0x3c
    26c2:	7d af       	std	Y+61, r23	; 0x3d
    26c4:	8e af       	std	Y+62, r24	; 0x3e
    26c6:	9f af       	std	Y+63, r25	; 0x3f
    26c8:	2d 97       	sbiw	r28, 0x0d	; 13
	double y4 = y2*y2;
	double z2 = p.z*p.z;
    26ca:	29 ad       	ldd	r18, Y+57	; 0x39
    26cc:	3a ad       	ldd	r19, Y+58	; 0x3a
    26ce:	4b ad       	ldd	r20, Y+59	; 0x3b
    26d0:	5c ad       	ldd	r21, Y+60	; 0x3c
    26d2:	ca 01       	movw	r24, r20
    26d4:	b9 01       	movw	r22, r18
    26d6:	01 d6       	rcall	.+3074   	; 0x32da <__mulsf3>
    26d8:	2b 01       	movw	r4, r22
    26da:	3c 01       	movw	r6, r24
	double z4 = z3*p.z;
	double A = -428 * sqrt(3) + x3 - 83 * sqrt(3) * p.y +
		10 * sqrt(3) * y2 + sqrt(3) * y3 +
		sqrt(3) * x2 * (6 + p.y) + 4 * sqrt(3) *
		z2 + sqrt(3) * p.y * z2 + p.x * (-83 +
		12 * p.y + y2 + z2);
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e4       	ldi	r20, 0x40	; 64
    26e2:	51 e4       	ldi	r21, 0x41	; 65
    26e4:	69 a9       	ldd	r22, Y+49	; 0x31
    26e6:	7a a9       	ldd	r23, Y+50	; 0x32
    26e8:	8b a9       	ldd	r24, Y+51	; 0x33
    26ea:	9c a9       	ldd	r25, Y+52	; 0x34
    26ec:	f6 d5       	rcall	.+3052   	; 0x32da <__mulsf3>
    26ee:	29 96       	adiw	r28, 0x09	; 9
    26f0:	6c af       	std	Y+60, r22	; 0x3c
    26f2:	7d af       	std	Y+61, r23	; 0x3d
    26f4:	8e af       	std	Y+62, r24	; 0x3e
    26f6:	9f af       	std	Y+63, r25	; 0x3f
    26f8:	29 97       	sbiw	r28, 0x09	; 9
	double y3 = y2*p.y;
	double y4 = y2*y2;
	double z2 = p.z*p.z;
	double z3 = z2*p.z;
	double z4 = z3*p.z;
	double A = -428 * sqrt(3) + x3 - 83 * sqrt(3) * p.y +
    26fa:	26 e5       	ldi	r18, 0x56	; 86
    26fc:	34 e5       	ldi	r19, 0x54	; 84
    26fe:	49 e3       	ldi	r20, 0x39	; 57
    2700:	54 e4       	ldi	r21, 0x44	; 68
    2702:	c5 01       	movw	r24, r10
    2704:	b4 01       	movw	r22, r8
    2706:	b5 d3       	rcall	.+1898   	; 0x2e72 <__subsf3>
    2708:	6b 01       	movw	r12, r22
    270a:	7c 01       	movw	r14, r24
    270c:	2d e9       	ldi	r18, 0x9D	; 157
    270e:	32 ec       	ldi	r19, 0xC2	; 194
    2710:	4f e0       	ldi	r20, 0x0F	; 15
    2712:	53 e4       	ldi	r21, 0x43	; 67
    2714:	69 a9       	ldd	r22, Y+49	; 0x31
    2716:	7a a9       	ldd	r23, Y+50	; 0x32
    2718:	8b a9       	ldd	r24, Y+51	; 0x33
    271a:	9c a9       	ldd	r25, Y+52	; 0x34
    271c:	de d5       	rcall	.+3004   	; 0x32da <__mulsf3>
    271e:	9b 01       	movw	r18, r22
    2720:	ac 01       	movw	r20, r24
    2722:	c7 01       	movw	r24, r14
    2724:	b6 01       	movw	r22, r12
    2726:	a5 d3       	rcall	.+1866   	; 0x2e72 <__subsf3>
    2728:	6b 01       	movw	r12, r22
    272a:	7c 01       	movw	r14, r24
		10 * sqrt(3) * y2 + sqrt(3) * y3 +
    272c:	26 e6       	ldi	r18, 0x66	; 102
    272e:	30 e9       	ldi	r19, 0x90	; 144
    2730:	4a e8       	ldi	r20, 0x8A	; 138
    2732:	51 e4       	ldi	r21, 0x41	; 65
    2734:	6d a5       	ldd	r22, Y+45	; 0x2d
    2736:	7e a5       	ldd	r23, Y+46	; 0x2e
    2738:	8f a5       	ldd	r24, Y+47	; 0x2f
    273a:	98 a9       	ldd	r25, Y+48	; 0x30
    273c:	ce d5       	rcall	.+2972   	; 0x32da <__mulsf3>
    273e:	9b 01       	movw	r18, r22
    2740:	ac 01       	movw	r20, r24
	double y3 = y2*p.y;
	double y4 = y2*y2;
	double z2 = p.z*p.z;
	double z3 = z2*p.z;
	double z4 = z3*p.z;
	double A = -428 * sqrt(3) + x3 - 83 * sqrt(3) * p.y +
    2742:	c7 01       	movw	r24, r14
    2744:	b6 01       	movw	r22, r12
    2746:	96 d3       	rcall	.+1836   	; 0x2e74 <__addsf3>
    2748:	6b 01       	movw	r12, r22
    274a:	7c 01       	movw	r14, r24
		10 * sqrt(3) * y2 + sqrt(3) * y3 +
    274c:	27 ed       	ldi	r18, 0xD7	; 215
    274e:	33 eb       	ldi	r19, 0xB3	; 179
    2750:	4d ed       	ldi	r20, 0xDD	; 221
    2752:	5f e3       	ldi	r21, 0x3F	; 63
    2754:	2d 96       	adiw	r28, 0x0d	; 13
    2756:	6c ad       	ldd	r22, Y+60	; 0x3c
    2758:	7d ad       	ldd	r23, Y+61	; 0x3d
    275a:	8e ad       	ldd	r24, Y+62	; 0x3e
    275c:	9f ad       	ldd	r25, Y+63	; 0x3f
    275e:	2d 97       	sbiw	r28, 0x0d	; 13
    2760:	bc d5       	rcall	.+2936   	; 0x32da <__mulsf3>
    2762:	9b 01       	movw	r18, r22
    2764:	ac 01       	movw	r20, r24
    2766:	c7 01       	movw	r24, r14
    2768:	b6 01       	movw	r22, r12
    276a:	84 d3       	rcall	.+1800   	; 0x2e74 <__addsf3>
    276c:	6b 01       	movw	r12, r22
    276e:	7c 01       	movw	r14, r24
		sqrt(3) * x2 * (6 + p.y) + 4 * sqrt(3) *
    2770:	27 ed       	ldi	r18, 0xD7	; 215
    2772:	33 eb       	ldi	r19, 0xB3	; 179
    2774:	4d ed       	ldi	r20, 0xDD	; 221
    2776:	5f e3       	ldi	r21, 0x3F	; 63
    2778:	21 96       	adiw	r28, 0x01	; 1
    277a:	6c ad       	ldd	r22, Y+60	; 0x3c
    277c:	7d ad       	ldd	r23, Y+61	; 0x3d
    277e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2780:	9f ad       	ldd	r25, Y+63	; 0x3f
    2782:	21 97       	sbiw	r28, 0x01	; 1
    2784:	aa d5       	rcall	.+2900   	; 0x32da <__mulsf3>
    2786:	25 96       	adiw	r28, 0x05	; 5
    2788:	6c af       	std	Y+60, r22	; 0x3c
    278a:	7d af       	std	Y+61, r23	; 0x3d
    278c:	8e af       	std	Y+62, r24	; 0x3e
    278e:	9f af       	std	Y+63, r25	; 0x3f
    2790:	25 97       	sbiw	r28, 0x05	; 5
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	40 ec       	ldi	r20, 0xC0	; 192
    2798:	50 e4       	ldi	r21, 0x40	; 64
    279a:	69 a9       	ldd	r22, Y+49	; 0x31
    279c:	7a a9       	ldd	r23, Y+50	; 0x32
    279e:	8b a9       	ldd	r24, Y+51	; 0x33
    27a0:	9c a9       	ldd	r25, Y+52	; 0x34
    27a2:	68 d3       	rcall	.+1744   	; 0x2e74 <__addsf3>
    27a4:	9b 01       	movw	r18, r22
    27a6:	ac 01       	movw	r20, r24
    27a8:	25 96       	adiw	r28, 0x05	; 5
    27aa:	6c ad       	ldd	r22, Y+60	; 0x3c
    27ac:	7d ad       	ldd	r23, Y+61	; 0x3d
    27ae:	8e ad       	ldd	r24, Y+62	; 0x3e
    27b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    27b2:	25 97       	sbiw	r28, 0x05	; 5
    27b4:	92 d5       	rcall	.+2852   	; 0x32da <__mulsf3>
    27b6:	9b 01       	movw	r18, r22
    27b8:	ac 01       	movw	r20, r24
	double y4 = y2*y2;
	double z2 = p.z*p.z;
	double z3 = z2*p.z;
	double z4 = z3*p.z;
	double A = -428 * sqrt(3) + x3 - 83 * sqrt(3) * p.y +
		10 * sqrt(3) * y2 + sqrt(3) * y3 +
    27ba:	c7 01       	movw	r24, r14
    27bc:	b6 01       	movw	r22, r12
    27be:	5a d3       	rcall	.+1716   	; 0x2e74 <__addsf3>
    27c0:	6b 01       	movw	r12, r22
    27c2:	7c 01       	movw	r14, r24
		sqrt(3) * x2 * (6 + p.y) + 4 * sqrt(3) *
    27c4:	27 ed       	ldi	r18, 0xD7	; 215
    27c6:	33 eb       	ldi	r19, 0xB3	; 179
    27c8:	4d ed       	ldi	r20, 0xDD	; 221
    27ca:	50 e4       	ldi	r21, 0x40	; 64
    27cc:	c3 01       	movw	r24, r6
    27ce:	b2 01       	movw	r22, r4
    27d0:	84 d5       	rcall	.+2824   	; 0x32da <__mulsf3>
    27d2:	9b 01       	movw	r18, r22
    27d4:	ac 01       	movw	r20, r24
    27d6:	c7 01       	movw	r24, r14
    27d8:	b6 01       	movw	r22, r12
    27da:	4c d3       	rcall	.+1688   	; 0x2e74 <__addsf3>
    27dc:	6b 01       	movw	r12, r22
    27de:	7c 01       	movw	r14, r24
		z2 + sqrt(3) * p.y * z2 + p.x * (-83 +
    27e0:	27 ed       	ldi	r18, 0xD7	; 215
    27e2:	33 eb       	ldi	r19, 0xB3	; 179
    27e4:	4d ed       	ldi	r20, 0xDD	; 221
    27e6:	5f e3       	ldi	r21, 0x3F	; 63
    27e8:	69 a9       	ldd	r22, Y+49	; 0x31
    27ea:	7a a9       	ldd	r23, Y+50	; 0x32
    27ec:	8b a9       	ldd	r24, Y+51	; 0x33
    27ee:	9c a9       	ldd	r25, Y+52	; 0x34
    27f0:	74 d5       	rcall	.+2792   	; 0x32da <__mulsf3>
    27f2:	a3 01       	movw	r20, r6
    27f4:	92 01       	movw	r18, r4
    27f6:	71 d5       	rcall	.+2786   	; 0x32da <__mulsf3>
    27f8:	9b 01       	movw	r18, r22
    27fa:	ac 01       	movw	r20, r24
    27fc:	c7 01       	movw	r24, r14
    27fe:	b6 01       	movw	r22, r12
    2800:	39 d3       	rcall	.+1650   	; 0x2e74 <__addsf3>
    2802:	6b 01       	movw	r12, r22
    2804:	7c 01       	movw	r14, r24
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	46 ea       	ldi	r20, 0xA6	; 166
    280c:	52 e4       	ldi	r21, 0x42	; 66
    280e:	29 96       	adiw	r28, 0x09	; 9
    2810:	6c ad       	ldd	r22, Y+60	; 0x3c
    2812:	7d ad       	ldd	r23, Y+61	; 0x3d
    2814:	8e ad       	ldd	r24, Y+62	; 0x3e
    2816:	9f ad       	ldd	r25, Y+63	; 0x3f
    2818:	29 97       	sbiw	r28, 0x09	; 9
    281a:	2b d3       	rcall	.+1622   	; 0x2e72 <__subsf3>
		12 * p.y + y2 + z2);
    281c:	2d a5       	ldd	r18, Y+45	; 0x2d
    281e:	3e a5       	ldd	r19, Y+46	; 0x2e
    2820:	4f a5       	ldd	r20, Y+47	; 0x2f
    2822:	58 a9       	ldd	r21, Y+48	; 0x30
    2824:	27 d3       	rcall	.+1614   	; 0x2e74 <__addsf3>
    2826:	a3 01       	movw	r20, r6
    2828:	92 01       	movw	r18, r4
    282a:	24 d3       	rcall	.+1608   	; 0x2e74 <__addsf3>
    282c:	9b 01       	movw	r18, r22
    282e:	ac 01       	movw	r20, r24
	double z3 = z2*p.z;
	double z4 = z3*p.z;
	double A = -428 * sqrt(3) + x3 - 83 * sqrt(3) * p.y +
		10 * sqrt(3) * y2 + sqrt(3) * y3 +
		sqrt(3) * x2 * (6 + p.y) + 4 * sqrt(3) *
		z2 + sqrt(3) * p.y * z2 + p.x * (-83 +
    2830:	6d a9       	ldd	r22, Y+53	; 0x35
    2832:	7e a9       	ldd	r23, Y+54	; 0x36
    2834:	8f a9       	ldd	r24, Y+55	; 0x37
    2836:	98 ad       	ldd	r25, Y+56	; 0x38
    2838:	50 d5       	rcall	.+2720   	; 0x32da <__mulsf3>
    283a:	9b 01       	movw	r18, r22
    283c:	ac 01       	movw	r20, r24
	double y3 = y2*p.y;
	double y4 = y2*y2;
	double z2 = p.z*p.z;
	double z3 = z2*p.z;
	double z4 = z3*p.z;
	double A = -428 * sqrt(3) + x3 - 83 * sqrt(3) * p.y +
    283e:	c7 01       	movw	r24, r14
    2840:	b6 01       	movw	r22, r12
    2842:	18 d3       	rcall	.+1584   	; 0x2e74 <__addsf3>
    2844:	25 96       	adiw	r28, 0x05	; 5
    2846:	6c af       	std	Y+60, r22	; 0x3c
    2848:	7d af       	std	Y+61, r23	; 0x3d
    284a:	8e af       	std	Y+62, r24	; 0x3e
    284c:	9f af       	std	Y+63, r25	; 0x3f
    284e:	25 97       	sbiw	r28, 0x05	; 5
		12 * p.y + y2 + z2);
	double B = 2 * sqrt(
		-z2 * (10249 + 4 * sqrt(3) * x3 +
		x4 + 12 * y3 + y4 -
		314 * z2 + z4 + 12 * p.y * (-157 +
		z2) + y2 * (-253 + 2 * z2) +
    2850:	a3 01       	movw	r20, r6
    2852:	92 01       	movw	r18, r4
    2854:	c3 01       	movw	r24, r6
    2856:	b2 01       	movw	r22, r4
    2858:	0d d3       	rcall	.+1562   	; 0x2e74 <__addsf3>
    285a:	6b 01       	movw	r12, r22
    285c:	7c 01       	movw	r14, r24
		2 * sqrt(3) * p.x * (-314 - 13 * p.y + 2 * y2 +
    285e:	27 ed       	ldi	r18, 0xD7	; 215
    2860:	33 eb       	ldi	r19, 0xB3	; 179
    2862:	4d e5       	ldi	r20, 0x5D	; 93
    2864:	50 e4       	ldi	r21, 0x40	; 64
    2866:	6d a9       	ldd	r22, Y+53	; 0x35
    2868:	7e a9       	ldd	r23, Y+54	; 0x36
    286a:	8f a9       	ldd	r24, Y+55	; 0x37
    286c:	98 ad       	ldd	r25, Y+56	; 0x38
    286e:	35 d5       	rcall	.+2666   	; 0x32da <__mulsf3>
    2870:	61 96       	adiw	r28, 0x11	; 17
    2872:	6c af       	std	Y+60, r22	; 0x3c
    2874:	7d af       	std	Y+61, r23	; 0x3d
    2876:	8e af       	std	Y+62, r24	; 0x3e
    2878:	9f af       	std	Y+63, r25	; 0x3f
    287a:	61 97       	sbiw	r28, 0x11	; 17
    287c:	2d a5       	ldd	r18, Y+45	; 0x2d
    287e:	3e a5       	ldd	r19, Y+46	; 0x2e
    2880:	4f a5       	ldd	r20, Y+47	; 0x2f
    2882:	58 a9       	ldd	r21, Y+48	; 0x30
    2884:	ca 01       	movw	r24, r20
    2886:	b9 01       	movw	r22, r18
    2888:	f5 d2       	rcall	.+1514   	; 0x2e74 <__addsf3>
    288a:	65 96       	adiw	r28, 0x15	; 21
    288c:	6c af       	std	Y+60, r22	; 0x3c
    288e:	7d af       	std	Y+61, r23	; 0x3d
    2890:	8e af       	std	Y+62, r24	; 0x3e
    2892:	9f af       	std	Y+63, r25	; 0x3f
    2894:	65 97       	sbiw	r28, 0x15	; 21
		10 * sqrt(3) * y2 + sqrt(3) * y3 +
		sqrt(3) * x2 * (6 + p.y) + 4 * sqrt(3) *
		z2 + sqrt(3) * p.y * z2 + p.x * (-83 +
		12 * p.y + y2 + z2);
	double B = 2 * sqrt(
		-z2 * (10249 + 4 * sqrt(3) * x3 +
    2896:	d3 01       	movw	r26, r6
    2898:	c2 01       	movw	r24, r4
    289a:	b0 58       	subi	r27, 0x80	; 128
    289c:	69 96       	adiw	r28, 0x19	; 25
    289e:	8c af       	std	Y+60, r24	; 0x3c
    28a0:	9d af       	std	Y+61, r25	; 0x3d
    28a2:	ae af       	std	Y+62, r26	; 0x3e
    28a4:	bf af       	std	Y+63, r27	; 0x3f
    28a6:	69 97       	sbiw	r28, 0x19	; 25
    28a8:	27 ed       	ldi	r18, 0xD7	; 215
    28aa:	33 eb       	ldi	r19, 0xB3	; 179
    28ac:	4d ed       	ldi	r20, 0xDD	; 221
    28ae:	50 e4       	ldi	r21, 0x40	; 64
    28b0:	c5 01       	movw	r24, r10
    28b2:	b4 01       	movw	r22, r8
    28b4:	12 d5       	rcall	.+2596   	; 0x32da <__mulsf3>
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	34 e2       	ldi	r19, 0x24	; 36
    28ba:	40 e2       	ldi	r20, 0x20	; 32
    28bc:	56 e4       	ldi	r21, 0x46	; 70
    28be:	da d2       	rcall	.+1460   	; 0x2e74 <__addsf3>
    28c0:	6d 96       	adiw	r28, 0x1d	; 29
    28c2:	6c af       	std	Y+60, r22	; 0x3c
    28c4:	7d af       	std	Y+61, r23	; 0x3d
    28c6:	8e af       	std	Y+62, r24	; 0x3e
    28c8:	9f af       	std	Y+63, r25	; 0x3f
    28ca:	6d 97       	sbiw	r28, 0x1d	; 29
	double options[4]; /* Mathematica outputs four possible expressions for the
					   angle. Two are invalid, and one is extraneous. */
	/* GENERATE FOUR POSSIBLE OPTIONS. */
	double x2 = p.x*p.x;
	double x3 = x2*p.x;
	double x4 = x3*p.x;
    28cc:	a5 01       	movw	r20, r10
    28ce:	94 01       	movw	r18, r8
    28d0:	6d a9       	ldd	r22, Y+53	; 0x35
    28d2:	7e a9       	ldd	r23, Y+54	; 0x36
    28d4:	8f a9       	ldd	r24, Y+55	; 0x37
    28d6:	98 ad       	ldd	r25, Y+56	; 0x38
    28d8:	00 d5       	rcall	.+2560   	; 0x32da <__mulsf3>
    28da:	9b 01       	movw	r18, r22
    28dc:	ac 01       	movw	r20, r24
		10 * sqrt(3) * y2 + sqrt(3) * y3 +
		sqrt(3) * x2 * (6 + p.y) + 4 * sqrt(3) *
		z2 + sqrt(3) * p.y * z2 + p.x * (-83 +
		12 * p.y + y2 + z2);
	double B = 2 * sqrt(
		-z2 * (10249 + 4 * sqrt(3) * x3 +
    28de:	6d 96       	adiw	r28, 0x1d	; 29
    28e0:	6c ad       	ldd	r22, Y+60	; 0x3c
    28e2:	7d ad       	ldd	r23, Y+61	; 0x3d
    28e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    28e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    28e8:	6d 97       	sbiw	r28, 0x1d	; 29
    28ea:	c4 d2       	rcall	.+1416   	; 0x2e74 <__addsf3>
    28ec:	4b 01       	movw	r8, r22
    28ee:	5c 01       	movw	r10, r24
		x4 + 12 * y3 + y4 -
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	40 e4       	ldi	r20, 0x40	; 64
    28f6:	51 e4       	ldi	r21, 0x41	; 65
    28f8:	2d 96       	adiw	r28, 0x0d	; 13
    28fa:	6c ad       	ldd	r22, Y+60	; 0x3c
    28fc:	7d ad       	ldd	r23, Y+61	; 0x3d
    28fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    2900:	9f ad       	ldd	r25, Y+63	; 0x3f
    2902:	2d 97       	sbiw	r28, 0x0d	; 13
    2904:	ea d4       	rcall	.+2516   	; 0x32da <__mulsf3>
    2906:	9b 01       	movw	r18, r22
    2908:	ac 01       	movw	r20, r24
    290a:	c5 01       	movw	r24, r10
    290c:	b4 01       	movw	r22, r8
    290e:	b2 d2       	rcall	.+1380   	; 0x2e74 <__addsf3>
    2910:	4b 01       	movw	r8, r22
    2912:	5c 01       	movw	r10, r24
	double x2 = p.x*p.x;
	double x3 = x2*p.x;
	double x4 = x3*p.x;
	double y2 = p.y*p.y;
	double y3 = y2*p.y;
	double y4 = y2*y2;
    2914:	2d a5       	ldd	r18, Y+45	; 0x2d
    2916:	3e a5       	ldd	r19, Y+46	; 0x2e
    2918:	4f a5       	ldd	r20, Y+47	; 0x2f
    291a:	58 a9       	ldd	r21, Y+48	; 0x30
    291c:	ca 01       	movw	r24, r20
    291e:	b9 01       	movw	r22, r18
    2920:	dc d4       	rcall	.+2488   	; 0x32da <__mulsf3>
    2922:	9b 01       	movw	r18, r22
    2924:	ac 01       	movw	r20, r24
		sqrt(3) * x2 * (6 + p.y) + 4 * sqrt(3) *
		z2 + sqrt(3) * p.y * z2 + p.x * (-83 +
		12 * p.y + y2 + z2);
	double B = 2 * sqrt(
		-z2 * (10249 + 4 * sqrt(3) * x3 +
		x4 + 12 * y3 + y4 -
    2926:	c5 01       	movw	r24, r10
    2928:	b4 01       	movw	r22, r8
    292a:	a4 d2       	rcall	.+1352   	; 0x2e74 <__addsf3>
    292c:	4b 01       	movw	r8, r22
    292e:	5c 01       	movw	r10, r24
		314 * z2 + z4 + 12 * p.y * (-157 +
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	4d e9       	ldi	r20, 0x9D	; 157
    2936:	53 e4       	ldi	r21, 0x43	; 67
    2938:	c3 01       	movw	r24, r6
    293a:	b2 01       	movw	r22, r4
    293c:	ce d4       	rcall	.+2460   	; 0x32da <__mulsf3>
    293e:	9b 01       	movw	r18, r22
    2940:	ac 01       	movw	r20, r24
		sqrt(3) * x2 * (6 + p.y) + 4 * sqrt(3) *
		z2 + sqrt(3) * p.y * z2 + p.x * (-83 +
		12 * p.y + y2 + z2);
	double B = 2 * sqrt(
		-z2 * (10249 + 4 * sqrt(3) * x3 +
		x4 + 12 * y3 + y4 -
    2942:	c5 01       	movw	r24, r10
    2944:	b4 01       	movw	r22, r8
    2946:	95 d2       	rcall	.+1322   	; 0x2e72 <__subsf3>
    2948:	4b 01       	movw	r8, r22
    294a:	5c 01       	movw	r10, r24
	double x4 = x3*p.x;
	double y2 = p.y*p.y;
	double y3 = y2*p.y;
	double y4 = y2*y2;
	double z2 = p.z*p.z;
	double z3 = z2*p.z;
    294c:	a3 01       	movw	r20, r6
    294e:	92 01       	movw	r18, r4
    2950:	69 ad       	ldd	r22, Y+57	; 0x39
    2952:	7a ad       	ldd	r23, Y+58	; 0x3a
    2954:	8b ad       	ldd	r24, Y+59	; 0x3b
    2956:	9c ad       	ldd	r25, Y+60	; 0x3c
    2958:	c0 d4       	rcall	.+2432   	; 0x32da <__mulsf3>
    295a:	9b 01       	movw	r18, r22
    295c:	ac 01       	movw	r20, r24
	double z4 = z3*p.z;
    295e:	69 ad       	ldd	r22, Y+57	; 0x39
    2960:	7a ad       	ldd	r23, Y+58	; 0x3a
    2962:	8b ad       	ldd	r24, Y+59	; 0x3b
    2964:	9c ad       	ldd	r25, Y+60	; 0x3c
    2966:	b9 d4       	rcall	.+2418   	; 0x32da <__mulsf3>
    2968:	9b 01       	movw	r18, r22
    296a:	ac 01       	movw	r20, r24
		z2 + sqrt(3) * p.y * z2 + p.x * (-83 +
		12 * p.y + y2 + z2);
	double B = 2 * sqrt(
		-z2 * (10249 + 4 * sqrt(3) * x3 +
		x4 + 12 * y3 + y4 -
		314 * z2 + z4 + 12 * p.y * (-157 +
    296c:	c5 01       	movw	r24, r10
    296e:	b4 01       	movw	r22, r8
    2970:	81 d2       	rcall	.+1282   	; 0x2e74 <__addsf3>
    2972:	4b 01       	movw	r8, r22
    2974:	5c 01       	movw	r10, r24
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	4d e1       	ldi	r20, 0x1D	; 29
    297c:	53 e4       	ldi	r21, 0x43	; 67
    297e:	c3 01       	movw	r24, r6
    2980:	b2 01       	movw	r22, r4
    2982:	77 d2       	rcall	.+1262   	; 0x2e72 <__subsf3>
    2984:	9b 01       	movw	r18, r22
    2986:	ac 01       	movw	r20, r24
    2988:	29 96       	adiw	r28, 0x09	; 9
    298a:	6c ad       	ldd	r22, Y+60	; 0x3c
    298c:	7d ad       	ldd	r23, Y+61	; 0x3d
    298e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2990:	9f ad       	ldd	r25, Y+63	; 0x3f
    2992:	29 97       	sbiw	r28, 0x09	; 9
    2994:	a2 d4       	rcall	.+2372   	; 0x32da <__mulsf3>
    2996:	9b 01       	movw	r18, r22
    2998:	ac 01       	movw	r20, r24
    299a:	c5 01       	movw	r24, r10
    299c:	b4 01       	movw	r22, r8
    299e:	6a d2       	rcall	.+1236   	; 0x2e74 <__addsf3>
    29a0:	4b 01       	movw	r8, r22
    29a2:	5c 01       	movw	r10, r24
		z2) + y2 * (-253 + 2 * z2) +
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	4d e7       	ldi	r20, 0x7D	; 125
    29aa:	53 e4       	ldi	r21, 0x43	; 67
    29ac:	c7 01       	movw	r24, r14
    29ae:	b6 01       	movw	r22, r12
    29b0:	60 d2       	rcall	.+1216   	; 0x2e72 <__subsf3>
    29b2:	2d a5       	ldd	r18, Y+45	; 0x2d
    29b4:	3e a5       	ldd	r19, Y+46	; 0x2e
    29b6:	4f a5       	ldd	r20, Y+47	; 0x2f
    29b8:	58 a9       	ldd	r21, Y+48	; 0x30
    29ba:	8f d4       	rcall	.+2334   	; 0x32da <__mulsf3>
    29bc:	9b 01       	movw	r18, r22
    29be:	ac 01       	movw	r20, r24
    29c0:	c5 01       	movw	r24, r10
    29c2:	b4 01       	movw	r22, r8
    29c4:	57 d2       	rcall	.+1198   	; 0x2e74 <__addsf3>
    29c6:	4b 01       	movw	r8, r22
    29c8:	5c 01       	movw	r10, r24
		2 * sqrt(3) * p.x * (-314 - 13 * p.y + 2 * y2 +
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e5       	ldi	r20, 0x50	; 80
    29d0:	51 e4       	ldi	r21, 0x41	; 65
    29d2:	69 a9       	ldd	r22, Y+49	; 0x31
    29d4:	7a a9       	ldd	r23, Y+50	; 0x32
    29d6:	8b a9       	ldd	r24, Y+51	; 0x33
    29d8:	9c a9       	ldd	r25, Y+52	; 0x34
    29da:	7f d4       	rcall	.+2302   	; 0x32da <__mulsf3>
    29dc:	9b 01       	movw	r18, r22
    29de:	ac 01       	movw	r20, r24
    29e0:	60 e0       	ldi	r22, 0x00	; 0
    29e2:	70 e0       	ldi	r23, 0x00	; 0
    29e4:	8d e9       	ldi	r24, 0x9D	; 157
    29e6:	93 ec       	ldi	r25, 0xC3	; 195
    29e8:	44 d2       	rcall	.+1160   	; 0x2e72 <__subsf3>
    29ea:	65 96       	adiw	r28, 0x15	; 21
    29ec:	2c ad       	ldd	r18, Y+60	; 0x3c
    29ee:	3d ad       	ldd	r19, Y+61	; 0x3d
    29f0:	4e ad       	ldd	r20, Y+62	; 0x3e
    29f2:	5f ad       	ldd	r21, Y+63	; 0x3f
    29f4:	65 97       	sbiw	r28, 0x15	; 21
    29f6:	3e d2       	rcall	.+1148   	; 0x2e74 <__addsf3>
    29f8:	9b 01       	movw	r18, r22
    29fa:	ac 01       	movw	r20, r24
    29fc:	c7 01       	movw	r24, r14
    29fe:	b6 01       	movw	r22, r12
    2a00:	39 d2       	rcall	.+1138   	; 0x2e74 <__addsf3>
    2a02:	9b 01       	movw	r18, r22
    2a04:	ac 01       	movw	r20, r24
    2a06:	61 96       	adiw	r28, 0x11	; 17
    2a08:	6c ad       	ldd	r22, Y+60	; 0x3c
    2a0a:	7d ad       	ldd	r23, Y+61	; 0x3d
    2a0c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a0e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a10:	61 97       	sbiw	r28, 0x11	; 17
    2a12:	63 d4       	rcall	.+2246   	; 0x32da <__mulsf3>
    2a14:	9b 01       	movw	r18, r22
    2a16:	ac 01       	movw	r20, r24
		12 * p.y + y2 + z2);
	double B = 2 * sqrt(
		-z2 * (10249 + 4 * sqrt(3) * x3 +
		x4 + 12 * y3 + y4 -
		314 * z2 + z4 + 12 * p.y * (-157 +
		z2) + y2 * (-253 + 2 * z2) +
    2a18:	c5 01       	movw	r24, r10
    2a1a:	b4 01       	movw	r22, r8
    2a1c:	2b d2       	rcall	.+1110   	; 0x2e74 <__addsf3>
    2a1e:	4b 01       	movw	r8, r22
    2a20:	5c 01       	movw	r10, r24
		2 * sqrt(3) * p.x * (-314 - 13 * p.y + 2 * y2 +
		2 * z2) + x2 * (-227 + 12 * p.y + 2 *
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	43 e6       	ldi	r20, 0x63	; 99
    2a28:	53 e4       	ldi	r21, 0x43	; 67
    2a2a:	29 96       	adiw	r28, 0x09	; 9
    2a2c:	6c ad       	ldd	r22, Y+60	; 0x3c
    2a2e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2a30:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a32:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a34:	29 97       	sbiw	r28, 0x09	; 9
    2a36:	1d d2       	rcall	.+1082   	; 0x2e72 <__subsf3>
    2a38:	9b 01       	movw	r18, r22
    2a3a:	ac 01       	movw	r20, r24
    2a3c:	65 96       	adiw	r28, 0x15	; 21
    2a3e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2a40:	7d ad       	ldd	r23, Y+61	; 0x3d
    2a42:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a44:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a46:	65 97       	sbiw	r28, 0x15	; 21
    2a48:	15 d2       	rcall	.+1066   	; 0x2e74 <__addsf3>
    2a4a:	9b 01       	movw	r18, r22
    2a4c:	ac 01       	movw	r20, r24
		y2 + 2 * z2)));
    2a4e:	c7 01       	movw	r24, r14
    2a50:	b6 01       	movw	r22, r12
    2a52:	10 d2       	rcall	.+1056   	; 0x2e74 <__addsf3>
		-z2 * (10249 + 4 * sqrt(3) * x3 +
		x4 + 12 * y3 + y4 -
		314 * z2 + z4 + 12 * p.y * (-157 +
		z2) + y2 * (-253 + 2 * z2) +
		2 * sqrt(3) * p.x * (-314 - 13 * p.y + 2 * y2 +
		2 * z2) + x2 * (-227 + 12 * p.y + 2 *
    2a54:	21 96       	adiw	r28, 0x01	; 1
    2a56:	2c ad       	ldd	r18, Y+60	; 0x3c
    2a58:	3d ad       	ldd	r19, Y+61	; 0x3d
    2a5a:	4e ad       	ldd	r20, Y+62	; 0x3e
    2a5c:	5f ad       	ldd	r21, Y+63	; 0x3f
    2a5e:	21 97       	sbiw	r28, 0x01	; 1
    2a60:	3c d4       	rcall	.+2168   	; 0x32da <__mulsf3>
    2a62:	9b 01       	movw	r18, r22
    2a64:	ac 01       	movw	r20, r24
    2a66:	c5 01       	movw	r24, r10
    2a68:	b4 01       	movw	r22, r8
    2a6a:	04 d2       	rcall	.+1032   	; 0x2e74 <__addsf3>
    2a6c:	9b 01       	movw	r18, r22
    2a6e:	ac 01       	movw	r20, r24
	double A = -428 * sqrt(3) + x3 - 83 * sqrt(3) * p.y +
		10 * sqrt(3) * y2 + sqrt(3) * y3 +
		sqrt(3) * x2 * (6 + p.y) + 4 * sqrt(3) *
		z2 + sqrt(3) * p.y * z2 + p.x * (-83 +
		12 * p.y + y2 + z2);
	double B = 2 * sqrt(
    2a70:	69 96       	adiw	r28, 0x19	; 25
    2a72:	6c ad       	ldd	r22, Y+60	; 0x3c
    2a74:	7d ad       	ldd	r23, Y+61	; 0x3d
    2a76:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a78:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a7a:	69 97       	sbiw	r28, 0x19	; 25
    2a7c:	2e d4       	rcall	.+2140   	; 0x32da <__mulsf3>
    2a7e:	9a d4       	rcall	.+2356   	; 0x33b4 <sqrt>
    2a80:	9b 01       	movw	r18, r22
    2a82:	ac 01       	movw	r20, r24
    2a84:	f7 d1       	rcall	.+1006   	; 0x2e74 <__addsf3>
    2a86:	6b 01       	movw	r12, r22
    2a88:	7c 01       	movw	r14, r24
		314 * z2 + z4 + 12 * p.y * (-157 +
		z2) + y2 * (-253 + 2 * z2) +
		2 * sqrt(3) * p.x * (-314 - 13 * p.y + 2 * y2 +
		2 * z2) + x2 * (-227 + 12 * p.y + 2 *
		y2 + 2 * z2)));
	double C = (5 * (48 + x2 +
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e4       	ldi	r20, 0x40	; 64
    2a90:	52 e4       	ldi	r21, 0x42	; 66
    2a92:	21 96       	adiw	r28, 0x01	; 1
    2a94:	6c ad       	ldd	r22, Y+60	; 0x3c
    2a96:	7d ad       	ldd	r23, Y+61	; 0x3d
    2a98:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a9c:	21 97       	sbiw	r28, 0x01	; 1
    2a9e:	ea d1       	rcall	.+980    	; 0x2e74 <__addsf3>
    2aa0:	4b 01       	movw	r8, r22
    2aa2:	5c 01       	movw	r10, r24
		24 * p.y + 3 * y2 + 2 * sqrt(3) * p.x * (4 + p.y)
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	40 ec       	ldi	r20, 0xC0	; 192
    2aaa:	51 e4       	ldi	r21, 0x41	; 65
    2aac:	69 a9       	ldd	r22, Y+49	; 0x31
    2aae:	7a a9       	ldd	r23, Y+50	; 0x32
    2ab0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ab2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ab4:	12 d4       	rcall	.+2084   	; 0x32da <__mulsf3>
    2ab6:	9b 01       	movw	r18, r22
    2ab8:	ac 01       	movw	r20, r24
		314 * z2 + z4 + 12 * p.y * (-157 +
		z2) + y2 * (-253 + 2 * z2) +
		2 * sqrt(3) * p.x * (-314 - 13 * p.y + 2 * y2 +
		2 * z2) + x2 * (-227 + 12 * p.y + 2 *
		y2 + 2 * z2)));
	double C = (5 * (48 + x2 +
    2aba:	c5 01       	movw	r24, r10
    2abc:	b4 01       	movw	r22, r8
    2abe:	da d1       	rcall	.+948    	; 0x2e74 <__addsf3>
    2ac0:	4b 01       	movw	r8, r22
    2ac2:	5c 01       	movw	r10, r24
		24 * p.y + 3 * y2 + 2 * sqrt(3) * p.x * (4 + p.y)
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e4       	ldi	r20, 0x40	; 64
    2aca:	50 e4       	ldi	r21, 0x40	; 64
    2acc:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ace:	7e a5       	ldd	r23, Y+46	; 0x2e
    2ad0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ad2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ad4:	02 d4       	rcall	.+2052   	; 0x32da <__mulsf3>
    2ad6:	9b 01       	movw	r18, r22
    2ad8:	ac 01       	movw	r20, r24
    2ada:	c5 01       	movw	r24, r10
    2adc:	b4 01       	movw	r22, r8
    2ade:	ca d1       	rcall	.+916    	; 0x2e74 <__addsf3>
    2ae0:	4b 01       	movw	r8, r22
    2ae2:	5c 01       	movw	r10, r24
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e8       	ldi	r20, 0x80	; 128
    2aea:	50 e4       	ldi	r21, 0x40	; 64
    2aec:	69 a9       	ldd	r22, Y+49	; 0x31
    2aee:	7a a9       	ldd	r23, Y+50	; 0x32
    2af0:	8b a9       	ldd	r24, Y+51	; 0x33
    2af2:	9c a9       	ldd	r25, Y+52	; 0x34
    2af4:	bf d1       	rcall	.+894    	; 0x2e74 <__addsf3>
    2af6:	9b 01       	movw	r18, r22
    2af8:	ac 01       	movw	r20, r24
    2afa:	61 96       	adiw	r28, 0x11	; 17
    2afc:	6c ad       	ldd	r22, Y+60	; 0x3c
    2afe:	7d ad       	ldd	r23, Y+61	; 0x3d
    2b00:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b02:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b04:	61 97       	sbiw	r28, 0x11	; 17
    2b06:	e9 d3       	rcall	.+2002   	; 0x32da <__mulsf3>
    2b08:	9b 01       	movw	r18, r22
    2b0a:	ac 01       	movw	r20, r24
    2b0c:	c5 01       	movw	r24, r10
    2b0e:	b4 01       	movw	r22, r8
    2b10:	b1 d1       	rcall	.+866    	; 0x2e74 <__addsf3>
    2b12:	4b 01       	movw	r8, r22
    2b14:	5c 01       	movw	r10, r24
		+ 4 * z2));
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	40 e8       	ldi	r20, 0x80	; 128
    2b1c:	50 e4       	ldi	r21, 0x40	; 64
    2b1e:	c3 01       	movw	r24, r6
    2b20:	b2 01       	movw	r22, r4
    2b22:	db d3       	rcall	.+1974   	; 0x32da <__mulsf3>
    2b24:	9b 01       	movw	r18, r22
    2b26:	ac 01       	movw	r20, r24
    2b28:	c5 01       	movw	r24, r10
    2b2a:	b4 01       	movw	r22, r8
    2b2c:	a3 d1       	rcall	.+838    	; 0x2e74 <__addsf3>
		314 * z2 + z4 + 12 * p.y * (-157 +
		z2) + y2 * (-253 + 2 * z2) +
		2 * sqrt(3) * p.x * (-314 - 13 * p.y + 2 * y2 +
		2 * z2) + x2 * (-227 + 12 * p.y + 2 *
		y2 + 2 * z2)));
	double C = (5 * (48 + x2 +
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 ea       	ldi	r20, 0xA0	; 160
    2b34:	50 e4       	ldi	r21, 0x40	; 64
    2b36:	d1 d3       	rcall	.+1954   	; 0x32da <__mulsf3>
    2b38:	4b 01       	movw	r8, r22
    2b3a:	5c 01       	movw	r10, r24
		24 * p.y + 3 * y2 + 2 * sqrt(3) * p.x * (4 + p.y)
		+ 4 * z2));
	double arg1 = -(A + B) / C;
	double arg2 = -(A - B) / C;
    2b3c:	a7 01       	movw	r20, r14
    2b3e:	96 01       	movw	r18, r12
    2b40:	25 96       	adiw	r28, 0x05	; 5
    2b42:	6c ad       	ldd	r22, Y+60	; 0x3c
    2b44:	7d ad       	ldd	r23, Y+61	; 0x3d
    2b46:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b48:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b4a:	25 97       	sbiw	r28, 0x05	; 5
    2b4c:	92 d1       	rcall	.+804    	; 0x2e72 <__subsf3>
    2b4e:	90 58       	subi	r25, 0x80	; 128
    2b50:	a5 01       	movw	r20, r10
    2b52:	94 01       	movw	r18, r8
    2b54:	fa d1       	rcall	.+1012   	; 0x2f4a <__divsf3>
    2b56:	2b 01       	movw	r4, r22
    2b58:	3c 01       	movw	r6, r24
		2 * z2) + x2 * (-227 + 12 * p.y + 2 *
		y2 + 2 * z2)));
	double C = (5 * (48 + x2 +
		24 * p.y + 3 * y2 + 2 * sqrt(3) * p.x * (4 + p.y)
		+ 4 * z2));
	double arg1 = -(A + B) / C;
    2b5a:	a7 01       	movw	r20, r14
    2b5c:	96 01       	movw	r18, r12
    2b5e:	25 96       	adiw	r28, 0x05	; 5
    2b60:	6c ad       	ldd	r22, Y+60	; 0x3c
    2b62:	7d ad       	ldd	r23, Y+61	; 0x3d
    2b64:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b66:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b68:	25 97       	sbiw	r28, 0x05	; 5
    2b6a:	84 d1       	rcall	.+776    	; 0x2e74 <__addsf3>
    2b6c:	90 58       	subi	r25, 0x80	; 128
    2b6e:	a5 01       	movw	r20, r10
    2b70:	94 01       	movw	r18, r8
    2b72:	eb d1       	rcall	.+982    	; 0x2f4a <__divsf3>
    2b74:	ab 01       	movw	r20, r22
    2b76:	bc 01       	movw	r22, r24
	double arg2 = -(A - B) / C;

	processArgOptions(options, arg1, arg2);
    2b78:	93 01       	movw	r18, r6
    2b7a:	82 01       	movw	r16, r4
    2b7c:	ce 01       	movw	r24, r28
    2b7e:	01 96       	adiw	r24, 0x01	; 1
    2b80:	0e 94 a1 09 	call	0x1342	; 0x1342 <processArgOptions>
    2b84:	de 01       	movw	r26, r28
    2b86:	11 96       	adiw	r26, 0x01	; 1
    2b88:	1d 01       	movw	r2, r26
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	71 96       	adiw	r30, 0x11	; 17
    2b8e:	fe a7       	std	Y+46, r31	; 0x2e
    2b90:	ed a7       	std	Y+45, r30	; 0x2d
    2b92:	8f 01       	movw	r16, r30
	/* REMOVE INVALID SOLUTIONS */
	double values[4]; /* One val for each option; pick 2 smallest. */
	int i; /* Iterate over options. */
	for (i = 0; i < 4; i++)
	{
		if (isnan(options[i]))
    2b94:	d1 01       	movw	r26, r2
    2b96:	cd 90       	ld	r12, X+
    2b98:	dd 90       	ld	r13, X+
    2b9a:	ed 90       	ld	r14, X+
    2b9c:	fd 90       	ld	r15, X+
    2b9e:	1d 01       	movw	r2, r26
    2ba0:	a7 01       	movw	r20, r14
    2ba2:	96 01       	movw	r18, r12
    2ba4:	c7 01       	movw	r24, r14
    2ba6:	b6 01       	movw	r22, r12
    2ba8:	43 d4       	rcall	.+2182   	; 0x3430 <__unordsf2>
    2baa:	88 23       	and	r24, r24
    2bac:	59 f0       	breq	.+22     	; 0x2bc4 <getAngle3+0x5d4>
			values[i] = DBL_MAX;
    2bae:	8f ef       	ldi	r24, 0xFF	; 255
    2bb0:	9f ef       	ldi	r25, 0xFF	; 255
    2bb2:	af e7       	ldi	r26, 0x7F	; 127
    2bb4:	bf e7       	ldi	r27, 0x7F	; 127
    2bb6:	ed a5       	ldd	r30, Y+45	; 0x2d
    2bb8:	fe a5       	ldd	r31, Y+46	; 0x2e
    2bba:	80 83       	st	Z, r24
    2bbc:	91 83       	std	Z+1, r25	; 0x01
    2bbe:	a2 83       	std	Z+2, r26	; 0x02
    2bc0:	b3 83       	std	Z+3, r27	; 0x03
    2bc2:	79 c0       	rjmp	.+242    	; 0x2cb6 <getAngle3+0x6c6>
		else
			values[i] = fabs(sqr(p.x + (10 - 4) / (2 * sqrt(3)) + 5 *
			cos(options[i]) / 2.0) + sqr(p.y + (10 - 4 + 5 *
    2bc4:	c7 01       	movw	r24, r14
    2bc6:	b6 01       	movw	r22, r12
    2bc8:	bd d1       	rcall	.+890    	; 0x2f44 <cos>
    2bca:	4b 01       	movw	r8, r22
    2bcc:	5c 01       	movw	r10, r24
	for (i = 0; i < 4; i++)
	{
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] = fabs(sqr(p.x + (10 - 4) / (2 * sqrt(3)) + 5 *
    2bce:	28 ed       	ldi	r18, 0xD8	; 216
    2bd0:	33 eb       	ldi	r19, 0xB3	; 179
    2bd2:	4d ed       	ldi	r20, 0xDD	; 221
    2bd4:	5f e3       	ldi	r21, 0x3F	; 63
    2bd6:	6d a9       	ldd	r22, Y+53	; 0x35
    2bd8:	7e a9       	ldd	r23, Y+54	; 0x36
    2bda:	8f a9       	ldd	r24, Y+55	; 0x37
    2bdc:	98 ad       	ldd	r25, Y+56	; 0x38
    2bde:	4a d1       	rcall	.+660    	; 0x2e74 <__addsf3>
    2be0:	2b 01       	movw	r4, r22
    2be2:	3c 01       	movw	r6, r24
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 ea       	ldi	r20, 0xA0	; 160
    2bea:	50 e4       	ldi	r21, 0x40	; 64
    2bec:	c5 01       	movw	r24, r10
    2bee:	b4 01       	movw	r22, r8
    2bf0:	74 d3       	rcall	.+1768   	; 0x32da <__mulsf3>
			cos(options[i]) / 2.0) + sqr(p.y + (10 - 4 + 5 *
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e0       	ldi	r20, 0x00	; 0
    2bf8:	5f e3       	ldi	r21, 0x3F	; 63
    2bfa:	6f d3       	rcall	.+1758   	; 0x32da <__mulsf3>
    2bfc:	9b 01       	movw	r18, r22
    2bfe:	ac 01       	movw	r20, r24
	for (i = 0; i < 4; i++)
	{
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] = fabs(sqr(p.x + (10 - 4) / (2 * sqrt(3)) + 5 *
    2c00:	c3 01       	movw	r24, r6
    2c02:	b2 01       	movw	r22, r4
    2c04:	37 d1       	rcall	.+622    	; 0x2e74 <__addsf3>
    2c06:	2b 01       	movw	r4, r22
    2c08:	3c 01       	movw	r6, r24
			cos(options[i]) / 2.0) + sqr(p.y + (10 - 4 + 5 *
			sqrt(3) * cos(options[i])) / 2.0) + sqr(p.z - 5 *
    2c0a:	26 e6       	ldi	r18, 0x66	; 102
    2c0c:	30 e9       	ldi	r19, 0x90	; 144
    2c0e:	4a e0       	ldi	r20, 0x0A	; 10
    2c10:	51 e4       	ldi	r21, 0x41	; 65
    2c12:	c5 01       	movw	r24, r10
    2c14:	b4 01       	movw	r22, r8
    2c16:	61 d3       	rcall	.+1730   	; 0x32da <__mulsf3>
	{
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] = fabs(sqr(p.x + (10 - 4) / (2 * sqrt(3)) + 5 *
			cos(options[i]) / 2.0) + sqr(p.y + (10 - 4 + 5 *
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	40 ec       	ldi	r20, 0xC0	; 192
    2c1e:	50 e4       	ldi	r21, 0x40	; 64
    2c20:	29 d1       	rcall	.+594    	; 0x2e74 <__addsf3>
			sqrt(3) * cos(options[i])) / 2.0) + sqr(p.z - 5 *
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e0       	ldi	r20, 0x00	; 0
    2c28:	5f e3       	ldi	r21, 0x3F	; 63
    2c2a:	57 d3       	rcall	.+1710   	; 0x32da <__mulsf3>
    2c2c:	9b 01       	movw	r18, r22
    2c2e:	ac 01       	movw	r20, r24
	{
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] = fabs(sqr(p.x + (10 - 4) / (2 * sqrt(3)) + 5 *
			cos(options[i]) / 2.0) + sqr(p.y + (10 - 4 + 5 *
    2c30:	69 a9       	ldd	r22, Y+49	; 0x31
    2c32:	7a a9       	ldd	r23, Y+50	; 0x32
    2c34:	8b a9       	ldd	r24, Y+51	; 0x33
    2c36:	9c a9       	ldd	r25, Y+52	; 0x34
    2c38:	1d d1       	rcall	.+570    	; 0x2e74 <__addsf3>
    2c3a:	4b 01       	movw	r8, r22
    2c3c:	5c 01       	movw	r10, r24
			sqrt(3) * cos(options[i])) / 2.0) + sqr(p.z - 5 *
			sin(options[i])) - 144);
    2c3e:	c7 01       	movw	r24, r14
    2c40:	b6 01       	movw	r22, r12
    2c42:	ae d3       	rcall	.+1884   	; 0x33a0 <sin>
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] = fabs(sqr(p.x + (10 - 4) / (2 * sqrt(3)) + 5 *
			cos(options[i]) / 2.0) + sqr(p.y + (10 - 4 + 5 *
			sqrt(3) * cos(options[i])) / 2.0) + sqr(p.z - 5 *
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 ea       	ldi	r20, 0xA0	; 160
    2c4a:	50 e4       	ldi	r21, 0x40	; 64
    2c4c:	46 d3       	rcall	.+1676   	; 0x32da <__mulsf3>
    2c4e:	9b 01       	movw	r18, r22
    2c50:	ac 01       	movw	r20, r24
    2c52:	69 ad       	ldd	r22, Y+57	; 0x39
    2c54:	7a ad       	ldd	r23, Y+58	; 0x3a
    2c56:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c58:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c5a:	0b d1       	rcall	.+534    	; 0x2e72 <__subsf3>
    2c5c:	6b 01       	movw	r12, r22
    2c5e:	7c 01       	movw	r14, r24
}
/**
* Finds the square of x.
*/
double sqr(double x){
	return x*x;
    2c60:	a3 01       	movw	r20, r6
    2c62:	92 01       	movw	r18, r4
    2c64:	c3 01       	movw	r24, r6
    2c66:	b2 01       	movw	r22, r4
    2c68:	38 d3       	rcall	.+1648   	; 0x32da <__mulsf3>
    2c6a:	2b 01       	movw	r4, r22
    2c6c:	3c 01       	movw	r6, r24
    2c6e:	a5 01       	movw	r20, r10
    2c70:	94 01       	movw	r18, r8
    2c72:	c5 01       	movw	r24, r10
    2c74:	b4 01       	movw	r22, r8
    2c76:	31 d3       	rcall	.+1634   	; 0x32da <__mulsf3>
    2c78:	9b 01       	movw	r18, r22
    2c7a:	ac 01       	movw	r20, r24
	{
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] = fabs(sqr(p.x + (10 - 4) / (2 * sqrt(3)) + 5 *
			cos(options[i]) / 2.0) + sqr(p.y + (10 - 4 + 5 *
    2c7c:	c3 01       	movw	r24, r6
    2c7e:	b2 01       	movw	r22, r4
    2c80:	f9 d0       	rcall	.+498    	; 0x2e74 <__addsf3>
    2c82:	4b 01       	movw	r8, r22
    2c84:	5c 01       	movw	r10, r24
}
/**
* Finds the square of x.
*/
double sqr(double x){
	return x*x;
    2c86:	a7 01       	movw	r20, r14
    2c88:	96 01       	movw	r18, r12
    2c8a:	c7 01       	movw	r24, r14
    2c8c:	b6 01       	movw	r22, r12
    2c8e:	25 d3       	rcall	.+1610   	; 0x32da <__mulsf3>
    2c90:	9b 01       	movw	r18, r22
    2c92:	ac 01       	movw	r20, r24
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] = fabs(sqr(p.x + (10 - 4) / (2 * sqrt(3)) + 5 *
			cos(options[i]) / 2.0) + sqr(p.y + (10 - 4 + 5 *
			sqrt(3) * cos(options[i])) / 2.0) + sqr(p.z - 5 *
    2c94:	c5 01       	movw	r24, r10
    2c96:	b4 01       	movw	r22, r8
    2c98:	ed d0       	rcall	.+474    	; 0x2e74 <__addsf3>
			sin(options[i])) - 144);
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e1       	ldi	r20, 0x10	; 16
    2ca0:	53 e4       	ldi	r21, 0x43	; 67
    2ca2:	e7 d0       	rcall	.+462    	; 0x2e72 <__subsf3>
	for (i = 0; i < 4; i++)
	{
		if (isnan(options[i]))
			values[i] = DBL_MAX;
		else
			values[i] = fabs(sqr(p.x + (10 - 4) / (2 * sqrt(3)) + 5 *
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	bf 77       	andi	r27, 0x7F	; 127
    2caa:	ed a5       	ldd	r30, Y+45	; 0x2d
    2cac:	fe a5       	ldd	r31, Y+46	; 0x2e
    2cae:	80 83       	st	Z, r24
    2cb0:	91 83       	std	Z+1, r25	; 0x01
    2cb2:	a2 83       	std	Z+2, r26	; 0x02
    2cb4:	b3 83       	std	Z+3, r27	; 0x03
    2cb6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cb8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cba:	04 96       	adiw	r24, 0x04	; 4
    2cbc:	9e a7       	std	Y+46, r25	; 0x2e
    2cbe:	8d a7       	std	Y+45, r24	; 0x2d
	processArgOptions(options, arg1, arg2);

	/* REMOVE INVALID SOLUTIONS */
	double values[4]; /* One val for each option; pick 2 smallest. */
	int i; /* Iterate over options. */
	for (i = 0; i < 4; i++)
    2cc0:	20 16       	cp	r2, r16
    2cc2:	31 06       	cpc	r3, r17
    2cc4:	09 f0       	breq	.+2      	; 0x2cc8 <getAngle3+0x6d8>
    2cc6:	66 cf       	rjmp	.-308    	; 0x2b94 <getAngle3+0x5a4>
			cos(options[i]) / 2.0) + sqr(p.y + (10 - 4 + 5 *
			sqrt(3) * cos(options[i])) / 2.0) + sqr(p.z - 5 *
			sin(options[i])) - 144);
		/* Above expression comes from original kinematics equation. */
	}
	return extractAngleSolution(values, options);
    2cc8:	be 01       	movw	r22, r28
    2cca:	6f 5f       	subi	r22, 0xFF	; 255
    2ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cce:	ce 01       	movw	r24, r28
    2cd0:	41 96       	adiw	r24, 0x11	; 17
    2cd2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <extractAngleSolution>
}
    2cd6:	c4 5a       	subi	r28, 0xA4	; 164
    2cd8:	df 4f       	sbci	r29, 0xFF	; 255
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	f8 94       	cli
    2cde:	de bf       	out	0x3e, r29	; 62
    2ce0:	0f be       	out	0x3f, r0	; 63
    2ce2:	cd bf       	out	0x3d, r28	; 61
    2ce4:	df 91       	pop	r29
    2ce6:	cf 91       	pop	r28
    2ce8:	1f 91       	pop	r17
    2cea:	0f 91       	pop	r16
    2cec:	ff 90       	pop	r15
    2cee:	ef 90       	pop	r14
    2cf0:	df 90       	pop	r13
    2cf2:	cf 90       	pop	r12
    2cf4:	bf 90       	pop	r11
    2cf6:	af 90       	pop	r10
    2cf8:	9f 90       	pop	r9
    2cfa:	8f 90       	pop	r8
    2cfc:	7f 90       	pop	r7
    2cfe:	6f 90       	pop	r6
    2d00:	5f 90       	pop	r5
    2d02:	4f 90       	pop	r4
    2d04:	3f 90       	pop	r3
    2d06:	2f 90       	pop	r2
    2d08:	08 95       	ret

00002d0a <getAngles>:
* to get to a desired point 'p' (in degrees & in servo coordinates), and stores
* the result in 'angles'. If no solution exists, sets 'angles[0]', 'angles[1]',
* and 'angles[2]' equal to NAN.
*/
void getAngles(double* angles, struct point p)
{
    2d0a:	6f 92       	push	r6
    2d0c:	7f 92       	push	r7
    2d0e:	8f 92       	push	r8
    2d10:	9f 92       	push	r9
    2d12:	af 92       	push	r10
    2d14:	bf 92       	push	r11
    2d16:	cf 92       	push	r12
    2d18:	df 92       	push	r13
    2d1a:	ef 92       	push	r14
    2d1c:	ff 92       	push	r15
    2d1e:	0f 93       	push	r16
    2d20:	1f 93       	push	r17
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	2c 97       	sbiw	r28, 0x0c	; 12
    2d2c:	0f b6       	in	r0, 0x3f	; 63
    2d2e:	f8 94       	cli
    2d30:	de bf       	out	0x3e, r29	; 62
    2d32:	0f be       	out	0x3f, r0	; 63
    2d34:	cd bf       	out	0x3d, r28	; 61
    2d36:	5c 01       	movw	r10, r24
    2d38:	ec 2d       	mov	r30, r12
    2d3a:	c9 82       	std	Y+1, r12	; 0x01
    2d3c:	fd 2d       	mov	r31, r13
    2d3e:	da 82       	std	Y+2, r13	; 0x02
    2d40:	6e 2c       	mov	r6, r14
    2d42:	eb 82       	std	Y+3, r14	; 0x03
    2d44:	7f 2c       	mov	r7, r15
    2d46:	fc 82       	std	Y+4, r15	; 0x04
    2d48:	80 2e       	mov	r8, r16
    2d4a:	0d 83       	std	Y+5, r16	; 0x05
    2d4c:	91 2e       	mov	r9, r17
    2d4e:	1e 83       	std	Y+6, r17	; 0x06
    2d50:	c2 2e       	mov	r12, r18
    2d52:	2f 83       	std	Y+7, r18	; 0x07
    2d54:	d3 2e       	mov	r13, r19
    2d56:	38 87       	std	Y+8, r19	; 0x08
    2d58:	b4 2f       	mov	r27, r20
    2d5a:	49 87       	std	Y+9, r20	; 0x09
    2d5c:	a5 2f       	mov	r26, r21
    2d5e:	5a 87       	std	Y+10, r21	; 0x0a
    2d60:	86 2f       	mov	r24, r22
    2d62:	6b 87       	std	Y+11, r22	; 0x0b
    2d64:	97 2f       	mov	r25, r23
    2d66:	7c 87       	std	Y+12, r23	; 0x0c
	angles[0] = getAngle1(p);
    2d68:	ee 2e       	mov	r14, r30
    2d6a:	ff 2e       	mov	r15, r31
    2d6c:	06 2d       	mov	r16, r6
    2d6e:	17 2d       	mov	r17, r7
    2d70:	28 2d       	mov	r18, r8
    2d72:	39 2d       	mov	r19, r9
    2d74:	4c 2d       	mov	r20, r12
    2d76:	5d 2d       	mov	r21, r13
    2d78:	6b 2f       	mov	r22, r27
    2d7a:	7a 2f       	mov	r23, r26
    2d7c:	0e 94 c5 0c 	call	0x198a	; 0x198a <getAngle1>
    2d80:	f5 01       	movw	r30, r10
    2d82:	60 83       	st	Z, r22
    2d84:	71 83       	std	Z+1, r23	; 0x01
    2d86:	82 83       	std	Z+2, r24	; 0x02
    2d88:	93 83       	std	Z+3, r25	; 0x03
	angles[1] = getAngle2(p);
    2d8a:	e9 80       	ldd	r14, Y+1	; 0x01
    2d8c:	fa 80       	ldd	r15, Y+2	; 0x02
    2d8e:	0b 81       	ldd	r16, Y+3	; 0x03
    2d90:	1c 81       	ldd	r17, Y+4	; 0x04
    2d92:	2d 81       	ldd	r18, Y+5	; 0x05
    2d94:	3e 81       	ldd	r19, Y+6	; 0x06
    2d96:	4f 81       	ldd	r20, Y+7	; 0x07
    2d98:	58 85       	ldd	r21, Y+8	; 0x08
    2d9a:	69 85       	ldd	r22, Y+9	; 0x09
    2d9c:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2da0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2da2:	80 d8       	rcall	.-3840   	; 0x1ea4 <getAngle2>
    2da4:	f5 01       	movw	r30, r10
    2da6:	64 83       	std	Z+4, r22	; 0x04
    2da8:	75 83       	std	Z+5, r23	; 0x05
    2daa:	86 83       	std	Z+6, r24	; 0x06
    2dac:	97 83       	std	Z+7, r25	; 0x07
	angles[2] = getAngle3(p);
    2dae:	e9 80       	ldd	r14, Y+1	; 0x01
    2db0:	fa 80       	ldd	r15, Y+2	; 0x02
    2db2:	0b 81       	ldd	r16, Y+3	; 0x03
    2db4:	1c 81       	ldd	r17, Y+4	; 0x04
    2db6:	2d 81       	ldd	r18, Y+5	; 0x05
    2db8:	3e 81       	ldd	r19, Y+6	; 0x06
    2dba:	4f 81       	ldd	r20, Y+7	; 0x07
    2dbc:	58 85       	ldd	r21, Y+8	; 0x08
    2dbe:	69 85       	ldd	r22, Y+9	; 0x09
    2dc0:	7a 85       	ldd	r23, Y+10	; 0x0a
    2dc2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dc4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2dc6:	14 dc       	rcall	.-2008   	; 0x25f0 <getAngle3>
    2dc8:	6b 01       	movw	r12, r22
    2dca:	7c 01       	movw	r14, r24
    2dcc:	f5 01       	movw	r30, r10
    2dce:	60 87       	std	Z+8, r22	; 0x08
    2dd0:	71 87       	std	Z+9, r23	; 0x09
    2dd2:	82 87       	std	Z+10, r24	; 0x0a
    2dd4:	93 87       	std	Z+11, r25	; 0x0b
	if (isnan(angles[0]) || isnan(angles[1]) || isnan(angles[2]))
    2dd6:	60 81       	ld	r22, Z
    2dd8:	71 81       	ldd	r23, Z+1	; 0x01
    2dda:	82 81       	ldd	r24, Z+2	; 0x02
    2ddc:	93 81       	ldd	r25, Z+3	; 0x03
    2dde:	9b 01       	movw	r18, r22
    2de0:	ac 01       	movw	r20, r24
    2de2:	26 d3       	rcall	.+1612   	; 0x3430 <__unordsf2>
    2de4:	81 11       	cpse	r24, r1
    2de6:	11 c0       	rjmp	.+34     	; 0x2e0a <getAngles+0x100>
    2de8:	f5 01       	movw	r30, r10
    2dea:	64 81       	ldd	r22, Z+4	; 0x04
    2dec:	75 81       	ldd	r23, Z+5	; 0x05
    2dee:	86 81       	ldd	r24, Z+6	; 0x06
    2df0:	97 81       	ldd	r25, Z+7	; 0x07
    2df2:	9b 01       	movw	r18, r22
    2df4:	ac 01       	movw	r20, r24
    2df6:	1c d3       	rcall	.+1592   	; 0x3430 <__unordsf2>
    2df8:	81 11       	cpse	r24, r1
    2dfa:	07 c0       	rjmp	.+14     	; 0x2e0a <getAngles+0x100>
    2dfc:	a7 01       	movw	r20, r14
    2dfe:	96 01       	movw	r18, r12
    2e00:	c7 01       	movw	r24, r14
    2e02:	b6 01       	movw	r22, r12
    2e04:	15 d3       	rcall	.+1578   	; 0x3430 <__unordsf2>
    2e06:	88 23       	and	r24, r24
    2e08:	89 f0       	breq	.+34     	; 0x2e2c <getAngles+0x122>
	{
		angles[0] = NAN;
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	a0 ec       	ldi	r26, 0xC0	; 192
    2e10:	bf e7       	ldi	r27, 0x7F	; 127
    2e12:	f5 01       	movw	r30, r10
    2e14:	80 83       	st	Z, r24
    2e16:	91 83       	std	Z+1, r25	; 0x01
    2e18:	a2 83       	std	Z+2, r26	; 0x02
    2e1a:	b3 83       	std	Z+3, r27	; 0x03
		angles[1] = NAN;
    2e1c:	84 83       	std	Z+4, r24	; 0x04
    2e1e:	95 83       	std	Z+5, r25	; 0x05
    2e20:	a6 83       	std	Z+6, r26	; 0x06
    2e22:	b7 83       	std	Z+7, r27	; 0x07
		angles[2] = NAN;
    2e24:	80 87       	std	Z+8, r24	; 0x08
    2e26:	91 87       	std	Z+9, r25	; 0x09
    2e28:	a2 87       	std	Z+10, r26	; 0x0a
    2e2a:	b3 87       	std	Z+11, r27	; 0x0b
	}
}
    2e2c:	2c 96       	adiw	r28, 0x0c	; 12
    2e2e:	0f b6       	in	r0, 0x3f	; 63
    2e30:	f8 94       	cli
    2e32:	de bf       	out	0x3e, r29	; 62
    2e34:	0f be       	out	0x3f, r0	; 63
    2e36:	cd bf       	out	0x3d, r28	; 61
    2e38:	df 91       	pop	r29
    2e3a:	cf 91       	pop	r28
    2e3c:	1f 91       	pop	r17
    2e3e:	0f 91       	pop	r16
    2e40:	ff 90       	pop	r15
    2e42:	ef 90       	pop	r14
    2e44:	df 90       	pop	r13
    2e46:	cf 90       	pop	r12
    2e48:	bf 90       	pop	r11
    2e4a:	af 90       	pop	r10
    2e4c:	9f 90       	pop	r9
    2e4e:	8f 90       	pop	r8
    2e50:	7f 90       	pop	r7
    2e52:	6f 90       	pop	r6
    2e54:	08 95       	ret

00002e56 <acos>:
    2e56:	9f 93       	push	r25
    2e58:	9f 77       	andi	r25, 0x7F	; 127
    2e5a:	4d d1       	rcall	.+666    	; 0x30f6 <__fp_arccos>
    2e5c:	0f 90       	pop	r0
    2e5e:	00 20       	and	r0, r0
    2e60:	3a f4       	brpl	.+14     	; 0x2e70 <acos+0x1a>
    2e62:	90 58       	subi	r25, 0x80	; 128
    2e64:	a2 ea       	ldi	r26, 0xA2	; 162
    2e66:	2a ed       	ldi	r18, 0xDA	; 218
    2e68:	3f e0       	ldi	r19, 0x0F	; 15
    2e6a:	49 e4       	ldi	r20, 0x49	; 73
    2e6c:	50 e4       	ldi	r21, 0x40	; 64
    2e6e:	13 d0       	rcall	.+38     	; 0x2e96 <__addsf3x>
    2e70:	e5 c1       	rjmp	.+970    	; 0x323c <__fp_round>

00002e72 <__subsf3>:
    2e72:	50 58       	subi	r21, 0x80	; 128

00002e74 <__addsf3>:
    2e74:	bb 27       	eor	r27, r27
    2e76:	aa 27       	eor	r26, r26
    2e78:	0e d0       	rcall	.+28     	; 0x2e96 <__addsf3x>
    2e7a:	e0 c1       	rjmp	.+960    	; 0x323c <__fp_round>
    2e7c:	a9 d1       	rcall	.+850    	; 0x31d0 <__fp_pscA>
    2e7e:	30 f0       	brcs	.+12     	; 0x2e8c <__addsf3+0x18>
    2e80:	ae d1       	rcall	.+860    	; 0x31de <__fp_pscB>
    2e82:	20 f0       	brcs	.+8      	; 0x2e8c <__addsf3+0x18>
    2e84:	31 f4       	brne	.+12     	; 0x2e92 <__addsf3+0x1e>
    2e86:	9f 3f       	cpi	r25, 0xFF	; 255
    2e88:	11 f4       	brne	.+4      	; 0x2e8e <__addsf3+0x1a>
    2e8a:	1e f4       	brtc	.+6      	; 0x2e92 <__addsf3+0x1e>
    2e8c:	79 c1       	rjmp	.+754    	; 0x3180 <__fp_nan>
    2e8e:	0e f4       	brtc	.+2      	; 0x2e92 <__addsf3+0x1e>
    2e90:	e0 95       	com	r30
    2e92:	e7 fb       	bst	r30, 7
    2e94:	6f c1       	rjmp	.+734    	; 0x3174 <__fp_inf>

00002e96 <__addsf3x>:
    2e96:	e9 2f       	mov	r30, r25
    2e98:	f3 d1       	rcall	.+998    	; 0x3280 <__fp_split3>
    2e9a:	80 f3       	brcs	.-32     	; 0x2e7c <__addsf3+0x8>
    2e9c:	ba 17       	cp	r27, r26
    2e9e:	62 07       	cpc	r22, r18
    2ea0:	73 07       	cpc	r23, r19
    2ea2:	84 07       	cpc	r24, r20
    2ea4:	95 07       	cpc	r25, r21
    2ea6:	18 f0       	brcs	.+6      	; 0x2eae <__addsf3x+0x18>
    2ea8:	71 f4       	brne	.+28     	; 0x2ec6 <__addsf3x+0x30>
    2eaa:	9e f5       	brtc	.+102    	; 0x2f12 <__addsf3x+0x7c>
    2eac:	0b c2       	rjmp	.+1046   	; 0x32c4 <__fp_zero>
    2eae:	0e f4       	brtc	.+2      	; 0x2eb2 <__addsf3x+0x1c>
    2eb0:	e0 95       	com	r30
    2eb2:	0b 2e       	mov	r0, r27
    2eb4:	ba 2f       	mov	r27, r26
    2eb6:	a0 2d       	mov	r26, r0
    2eb8:	0b 01       	movw	r0, r22
    2eba:	b9 01       	movw	r22, r18
    2ebc:	90 01       	movw	r18, r0
    2ebe:	0c 01       	movw	r0, r24
    2ec0:	ca 01       	movw	r24, r20
    2ec2:	a0 01       	movw	r20, r0
    2ec4:	11 24       	eor	r1, r1
    2ec6:	ff 27       	eor	r31, r31
    2ec8:	59 1b       	sub	r21, r25
    2eca:	99 f0       	breq	.+38     	; 0x2ef2 <__addsf3x+0x5c>
    2ecc:	59 3f       	cpi	r21, 0xF9	; 249
    2ece:	50 f4       	brcc	.+20     	; 0x2ee4 <__addsf3x+0x4e>
    2ed0:	50 3e       	cpi	r21, 0xE0	; 224
    2ed2:	68 f1       	brcs	.+90     	; 0x2f2e <__addsf3x+0x98>
    2ed4:	1a 16       	cp	r1, r26
    2ed6:	f0 40       	sbci	r31, 0x00	; 0
    2ed8:	a2 2f       	mov	r26, r18
    2eda:	23 2f       	mov	r18, r19
    2edc:	34 2f       	mov	r19, r20
    2ede:	44 27       	eor	r20, r20
    2ee0:	58 5f       	subi	r21, 0xF8	; 248
    2ee2:	f3 cf       	rjmp	.-26     	; 0x2eca <__addsf3x+0x34>
    2ee4:	46 95       	lsr	r20
    2ee6:	37 95       	ror	r19
    2ee8:	27 95       	ror	r18
    2eea:	a7 95       	ror	r26
    2eec:	f0 40       	sbci	r31, 0x00	; 0
    2eee:	53 95       	inc	r21
    2ef0:	c9 f7       	brne	.-14     	; 0x2ee4 <__addsf3x+0x4e>
    2ef2:	7e f4       	brtc	.+30     	; 0x2f12 <__addsf3x+0x7c>
    2ef4:	1f 16       	cp	r1, r31
    2ef6:	ba 0b       	sbc	r27, r26
    2ef8:	62 0b       	sbc	r22, r18
    2efa:	73 0b       	sbc	r23, r19
    2efc:	84 0b       	sbc	r24, r20
    2efe:	ba f0       	brmi	.+46     	; 0x2f2e <__addsf3x+0x98>
    2f00:	91 50       	subi	r25, 0x01	; 1
    2f02:	a1 f0       	breq	.+40     	; 0x2f2c <__addsf3x+0x96>
    2f04:	ff 0f       	add	r31, r31
    2f06:	bb 1f       	adc	r27, r27
    2f08:	66 1f       	adc	r22, r22
    2f0a:	77 1f       	adc	r23, r23
    2f0c:	88 1f       	adc	r24, r24
    2f0e:	c2 f7       	brpl	.-16     	; 0x2f00 <__addsf3x+0x6a>
    2f10:	0e c0       	rjmp	.+28     	; 0x2f2e <__addsf3x+0x98>
    2f12:	ba 0f       	add	r27, r26
    2f14:	62 1f       	adc	r22, r18
    2f16:	73 1f       	adc	r23, r19
    2f18:	84 1f       	adc	r24, r20
    2f1a:	48 f4       	brcc	.+18     	; 0x2f2e <__addsf3x+0x98>
    2f1c:	87 95       	ror	r24
    2f1e:	77 95       	ror	r23
    2f20:	67 95       	ror	r22
    2f22:	b7 95       	ror	r27
    2f24:	f7 95       	ror	r31
    2f26:	9e 3f       	cpi	r25, 0xFE	; 254
    2f28:	08 f0       	brcs	.+2      	; 0x2f2c <__addsf3x+0x96>
    2f2a:	b3 cf       	rjmp	.-154    	; 0x2e92 <__addsf3+0x1e>
    2f2c:	93 95       	inc	r25
    2f2e:	88 0f       	add	r24, r24
    2f30:	08 f0       	brcs	.+2      	; 0x2f34 <__addsf3x+0x9e>
    2f32:	99 27       	eor	r25, r25
    2f34:	ee 0f       	add	r30, r30
    2f36:	97 95       	ror	r25
    2f38:	87 95       	ror	r24
    2f3a:	08 95       	ret

00002f3c <__cmpsf2>:
    2f3c:	f7 d0       	rcall	.+494    	; 0x312c <__fp_cmp>
    2f3e:	08 f4       	brcc	.+2      	; 0x2f42 <__cmpsf2+0x6>
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	08 95       	ret

00002f44 <cos>:
    2f44:	54 d1       	rcall	.+680    	; 0x31ee <__fp_rempio2>
    2f46:	e3 95       	inc	r30
    2f48:	8a c1       	rjmp	.+788    	; 0x325e <__fp_sinus>

00002f4a <__divsf3>:
    2f4a:	0c d0       	rcall	.+24     	; 0x2f64 <__divsf3x>
    2f4c:	77 c1       	rjmp	.+750    	; 0x323c <__fp_round>
    2f4e:	47 d1       	rcall	.+654    	; 0x31de <__fp_pscB>
    2f50:	40 f0       	brcs	.+16     	; 0x2f62 <__divsf3+0x18>
    2f52:	3e d1       	rcall	.+636    	; 0x31d0 <__fp_pscA>
    2f54:	30 f0       	brcs	.+12     	; 0x2f62 <__divsf3+0x18>
    2f56:	21 f4       	brne	.+8      	; 0x2f60 <__divsf3+0x16>
    2f58:	5f 3f       	cpi	r21, 0xFF	; 255
    2f5a:	19 f0       	breq	.+6      	; 0x2f62 <__divsf3+0x18>
    2f5c:	0b c1       	rjmp	.+534    	; 0x3174 <__fp_inf>
    2f5e:	51 11       	cpse	r21, r1
    2f60:	b2 c1       	rjmp	.+868    	; 0x32c6 <__fp_szero>
    2f62:	0e c1       	rjmp	.+540    	; 0x3180 <__fp_nan>

00002f64 <__divsf3x>:
    2f64:	8d d1       	rcall	.+794    	; 0x3280 <__fp_split3>
    2f66:	98 f3       	brcs	.-26     	; 0x2f4e <__divsf3+0x4>

00002f68 <__divsf3_pse>:
    2f68:	99 23       	and	r25, r25
    2f6a:	c9 f3       	breq	.-14     	; 0x2f5e <__divsf3+0x14>
    2f6c:	55 23       	and	r21, r21
    2f6e:	b1 f3       	breq	.-20     	; 0x2f5c <__divsf3+0x12>
    2f70:	95 1b       	sub	r25, r21
    2f72:	55 0b       	sbc	r21, r21
    2f74:	bb 27       	eor	r27, r27
    2f76:	aa 27       	eor	r26, r26
    2f78:	62 17       	cp	r22, r18
    2f7a:	73 07       	cpc	r23, r19
    2f7c:	84 07       	cpc	r24, r20
    2f7e:	38 f0       	brcs	.+14     	; 0x2f8e <__divsf3_pse+0x26>
    2f80:	9f 5f       	subi	r25, 0xFF	; 255
    2f82:	5f 4f       	sbci	r21, 0xFF	; 255
    2f84:	22 0f       	add	r18, r18
    2f86:	33 1f       	adc	r19, r19
    2f88:	44 1f       	adc	r20, r20
    2f8a:	aa 1f       	adc	r26, r26
    2f8c:	a9 f3       	breq	.-22     	; 0x2f78 <__divsf3_pse+0x10>
    2f8e:	33 d0       	rcall	.+102    	; 0x2ff6 <__divsf3_pse+0x8e>
    2f90:	0e 2e       	mov	r0, r30
    2f92:	3a f0       	brmi	.+14     	; 0x2fa2 <__divsf3_pse+0x3a>
    2f94:	e0 e8       	ldi	r30, 0x80	; 128
    2f96:	30 d0       	rcall	.+96     	; 0x2ff8 <__divsf3_pse+0x90>
    2f98:	91 50       	subi	r25, 0x01	; 1
    2f9a:	50 40       	sbci	r21, 0x00	; 0
    2f9c:	e6 95       	lsr	r30
    2f9e:	00 1c       	adc	r0, r0
    2fa0:	ca f7       	brpl	.-14     	; 0x2f94 <__divsf3_pse+0x2c>
    2fa2:	29 d0       	rcall	.+82     	; 0x2ff6 <__divsf3_pse+0x8e>
    2fa4:	fe 2f       	mov	r31, r30
    2fa6:	27 d0       	rcall	.+78     	; 0x2ff6 <__divsf3_pse+0x8e>
    2fa8:	66 0f       	add	r22, r22
    2faa:	77 1f       	adc	r23, r23
    2fac:	88 1f       	adc	r24, r24
    2fae:	bb 1f       	adc	r27, r27
    2fb0:	26 17       	cp	r18, r22
    2fb2:	37 07       	cpc	r19, r23
    2fb4:	48 07       	cpc	r20, r24
    2fb6:	ab 07       	cpc	r26, r27
    2fb8:	b0 e8       	ldi	r27, 0x80	; 128
    2fba:	09 f0       	breq	.+2      	; 0x2fbe <__divsf3_pse+0x56>
    2fbc:	bb 0b       	sbc	r27, r27
    2fbe:	80 2d       	mov	r24, r0
    2fc0:	bf 01       	movw	r22, r30
    2fc2:	ff 27       	eor	r31, r31
    2fc4:	93 58       	subi	r25, 0x83	; 131
    2fc6:	5f 4f       	sbci	r21, 0xFF	; 255
    2fc8:	2a f0       	brmi	.+10     	; 0x2fd4 <__divsf3_pse+0x6c>
    2fca:	9e 3f       	cpi	r25, 0xFE	; 254
    2fcc:	51 05       	cpc	r21, r1
    2fce:	68 f0       	brcs	.+26     	; 0x2fea <__divsf3_pse+0x82>
    2fd0:	d1 c0       	rjmp	.+418    	; 0x3174 <__fp_inf>
    2fd2:	79 c1       	rjmp	.+754    	; 0x32c6 <__fp_szero>
    2fd4:	5f 3f       	cpi	r21, 0xFF	; 255
    2fd6:	ec f3       	brlt	.-6      	; 0x2fd2 <__divsf3_pse+0x6a>
    2fd8:	98 3e       	cpi	r25, 0xE8	; 232
    2fda:	dc f3       	brlt	.-10     	; 0x2fd2 <__divsf3_pse+0x6a>
    2fdc:	86 95       	lsr	r24
    2fde:	77 95       	ror	r23
    2fe0:	67 95       	ror	r22
    2fe2:	b7 95       	ror	r27
    2fe4:	f7 95       	ror	r31
    2fe6:	9f 5f       	subi	r25, 0xFF	; 255
    2fe8:	c9 f7       	brne	.-14     	; 0x2fdc <__divsf3_pse+0x74>
    2fea:	88 0f       	add	r24, r24
    2fec:	91 1d       	adc	r25, r1
    2fee:	96 95       	lsr	r25
    2ff0:	87 95       	ror	r24
    2ff2:	97 f9       	bld	r25, 7
    2ff4:	08 95       	ret
    2ff6:	e1 e0       	ldi	r30, 0x01	; 1
    2ff8:	66 0f       	add	r22, r22
    2ffa:	77 1f       	adc	r23, r23
    2ffc:	88 1f       	adc	r24, r24
    2ffe:	bb 1f       	adc	r27, r27
    3000:	62 17       	cp	r22, r18
    3002:	73 07       	cpc	r23, r19
    3004:	84 07       	cpc	r24, r20
    3006:	ba 07       	cpc	r27, r26
    3008:	20 f0       	brcs	.+8      	; 0x3012 <__divsf3_pse+0xaa>
    300a:	62 1b       	sub	r22, r18
    300c:	73 0b       	sbc	r23, r19
    300e:	84 0b       	sbc	r24, r20
    3010:	ba 0b       	sbc	r27, r26
    3012:	ee 1f       	adc	r30, r30
    3014:	88 f7       	brcc	.-30     	; 0x2ff8 <__divsf3_pse+0x90>
    3016:	e0 95       	com	r30
    3018:	08 95       	ret

0000301a <__fixsfsi>:
    301a:	04 d0       	rcall	.+8      	; 0x3024 <__fixunssfsi>
    301c:	68 94       	set
    301e:	b1 11       	cpse	r27, r1
    3020:	52 c1       	rjmp	.+676    	; 0x32c6 <__fp_szero>
    3022:	08 95       	ret

00003024 <__fixunssfsi>:
    3024:	35 d1       	rcall	.+618    	; 0x3290 <__fp_splitA>
    3026:	88 f0       	brcs	.+34     	; 0x304a <__fixunssfsi+0x26>
    3028:	9f 57       	subi	r25, 0x7F	; 127
    302a:	90 f0       	brcs	.+36     	; 0x3050 <__fixunssfsi+0x2c>
    302c:	b9 2f       	mov	r27, r25
    302e:	99 27       	eor	r25, r25
    3030:	b7 51       	subi	r27, 0x17	; 23
    3032:	a0 f0       	brcs	.+40     	; 0x305c <__fixunssfsi+0x38>
    3034:	d1 f0       	breq	.+52     	; 0x306a <__fixunssfsi+0x46>
    3036:	66 0f       	add	r22, r22
    3038:	77 1f       	adc	r23, r23
    303a:	88 1f       	adc	r24, r24
    303c:	99 1f       	adc	r25, r25
    303e:	1a f0       	brmi	.+6      	; 0x3046 <__fixunssfsi+0x22>
    3040:	ba 95       	dec	r27
    3042:	c9 f7       	brne	.-14     	; 0x3036 <__fixunssfsi+0x12>
    3044:	12 c0       	rjmp	.+36     	; 0x306a <__fixunssfsi+0x46>
    3046:	b1 30       	cpi	r27, 0x01	; 1
    3048:	81 f0       	breq	.+32     	; 0x306a <__fixunssfsi+0x46>
    304a:	3c d1       	rcall	.+632    	; 0x32c4 <__fp_zero>
    304c:	b1 e0       	ldi	r27, 0x01	; 1
    304e:	08 95       	ret
    3050:	39 c1       	rjmp	.+626    	; 0x32c4 <__fp_zero>
    3052:	67 2f       	mov	r22, r23
    3054:	78 2f       	mov	r23, r24
    3056:	88 27       	eor	r24, r24
    3058:	b8 5f       	subi	r27, 0xF8	; 248
    305a:	39 f0       	breq	.+14     	; 0x306a <__fixunssfsi+0x46>
    305c:	b9 3f       	cpi	r27, 0xF9	; 249
    305e:	cc f3       	brlt	.-14     	; 0x3052 <__fixunssfsi+0x2e>
    3060:	86 95       	lsr	r24
    3062:	77 95       	ror	r23
    3064:	67 95       	ror	r22
    3066:	b3 95       	inc	r27
    3068:	d9 f7       	brne	.-10     	; 0x3060 <__fixunssfsi+0x3c>
    306a:	3e f4       	brtc	.+14     	; 0x307a <__fixunssfsi+0x56>
    306c:	90 95       	com	r25
    306e:	80 95       	com	r24
    3070:	70 95       	com	r23
    3072:	61 95       	neg	r22
    3074:	7f 4f       	sbci	r23, 0xFF	; 255
    3076:	8f 4f       	sbci	r24, 0xFF	; 255
    3078:	9f 4f       	sbci	r25, 0xFF	; 255
    307a:	08 95       	ret

0000307c <__floatunsisf>:
    307c:	e8 94       	clt
    307e:	09 c0       	rjmp	.+18     	; 0x3092 <__floatsisf+0x12>

00003080 <__floatsisf>:
    3080:	97 fb       	bst	r25, 7
    3082:	3e f4       	brtc	.+14     	; 0x3092 <__floatsisf+0x12>
    3084:	90 95       	com	r25
    3086:	80 95       	com	r24
    3088:	70 95       	com	r23
    308a:	61 95       	neg	r22
    308c:	7f 4f       	sbci	r23, 0xFF	; 255
    308e:	8f 4f       	sbci	r24, 0xFF	; 255
    3090:	9f 4f       	sbci	r25, 0xFF	; 255
    3092:	99 23       	and	r25, r25
    3094:	a9 f0       	breq	.+42     	; 0x30c0 <__floatsisf+0x40>
    3096:	f9 2f       	mov	r31, r25
    3098:	96 e9       	ldi	r25, 0x96	; 150
    309a:	bb 27       	eor	r27, r27
    309c:	93 95       	inc	r25
    309e:	f6 95       	lsr	r31
    30a0:	87 95       	ror	r24
    30a2:	77 95       	ror	r23
    30a4:	67 95       	ror	r22
    30a6:	b7 95       	ror	r27
    30a8:	f1 11       	cpse	r31, r1
    30aa:	f8 cf       	rjmp	.-16     	; 0x309c <__floatsisf+0x1c>
    30ac:	fa f4       	brpl	.+62     	; 0x30ec <__floatsisf+0x6c>
    30ae:	bb 0f       	add	r27, r27
    30b0:	11 f4       	brne	.+4      	; 0x30b6 <__floatsisf+0x36>
    30b2:	60 ff       	sbrs	r22, 0
    30b4:	1b c0       	rjmp	.+54     	; 0x30ec <__floatsisf+0x6c>
    30b6:	6f 5f       	subi	r22, 0xFF	; 255
    30b8:	7f 4f       	sbci	r23, 0xFF	; 255
    30ba:	8f 4f       	sbci	r24, 0xFF	; 255
    30bc:	9f 4f       	sbci	r25, 0xFF	; 255
    30be:	16 c0       	rjmp	.+44     	; 0x30ec <__floatsisf+0x6c>
    30c0:	88 23       	and	r24, r24
    30c2:	11 f0       	breq	.+4      	; 0x30c8 <__floatsisf+0x48>
    30c4:	96 e9       	ldi	r25, 0x96	; 150
    30c6:	11 c0       	rjmp	.+34     	; 0x30ea <__floatsisf+0x6a>
    30c8:	77 23       	and	r23, r23
    30ca:	21 f0       	breq	.+8      	; 0x30d4 <__floatsisf+0x54>
    30cc:	9e e8       	ldi	r25, 0x8E	; 142
    30ce:	87 2f       	mov	r24, r23
    30d0:	76 2f       	mov	r23, r22
    30d2:	05 c0       	rjmp	.+10     	; 0x30de <__floatsisf+0x5e>
    30d4:	66 23       	and	r22, r22
    30d6:	71 f0       	breq	.+28     	; 0x30f4 <__floatsisf+0x74>
    30d8:	96 e8       	ldi	r25, 0x86	; 134
    30da:	86 2f       	mov	r24, r22
    30dc:	70 e0       	ldi	r23, 0x00	; 0
    30de:	60 e0       	ldi	r22, 0x00	; 0
    30e0:	2a f0       	brmi	.+10     	; 0x30ec <__floatsisf+0x6c>
    30e2:	9a 95       	dec	r25
    30e4:	66 0f       	add	r22, r22
    30e6:	77 1f       	adc	r23, r23
    30e8:	88 1f       	adc	r24, r24
    30ea:	da f7       	brpl	.-10     	; 0x30e2 <__floatsisf+0x62>
    30ec:	88 0f       	add	r24, r24
    30ee:	96 95       	lsr	r25
    30f0:	87 95       	ror	r24
    30f2:	97 f9       	bld	r25, 7
    30f4:	08 95       	ret

000030f6 <__fp_arccos>:
    30f6:	df 93       	push	r29
    30f8:	cf 93       	push	r28
    30fa:	1f 93       	push	r17
    30fc:	0f 93       	push	r16
    30fe:	8b 01       	movw	r16, r22
    3100:	ec 01       	movw	r28, r24
    3102:	ec ec       	ldi	r30, 0xCC	; 204
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	3f d0       	rcall	.+126    	; 0x3186 <__fp_powser>
    3108:	99 d0       	rcall	.+306    	; 0x323c <__fp_round>
    310a:	98 01       	movw	r18, r16
    310c:	ae 01       	movw	r20, r28
    310e:	8b 01       	movw	r16, r22
    3110:	ec 01       	movw	r28, r24
    3112:	60 e0       	ldi	r22, 0x00	; 0
    3114:	70 e0       	ldi	r23, 0x00	; 0
    3116:	80 e8       	ldi	r24, 0x80	; 128
    3118:	9f e3       	ldi	r25, 0x3F	; 63
    311a:	ab de       	rcall	.-682    	; 0x2e72 <__subsf3>
    311c:	4b d1       	rcall	.+662    	; 0x33b4 <sqrt>
    311e:	98 01       	movw	r18, r16
    3120:	ae 01       	movw	r20, r28
    3122:	0f 91       	pop	r16
    3124:	1f 91       	pop	r17
    3126:	cf 91       	pop	r28
    3128:	df 91       	pop	r29
    312a:	e3 c0       	rjmp	.+454    	; 0x32f2 <__mulsf3x>

0000312c <__fp_cmp>:
    312c:	99 0f       	add	r25, r25
    312e:	00 08       	sbc	r0, r0
    3130:	55 0f       	add	r21, r21
    3132:	aa 0b       	sbc	r26, r26
    3134:	e0 e8       	ldi	r30, 0x80	; 128
    3136:	fe ef       	ldi	r31, 0xFE	; 254
    3138:	16 16       	cp	r1, r22
    313a:	17 06       	cpc	r1, r23
    313c:	e8 07       	cpc	r30, r24
    313e:	f9 07       	cpc	r31, r25
    3140:	c0 f0       	brcs	.+48     	; 0x3172 <__fp_cmp+0x46>
    3142:	12 16       	cp	r1, r18
    3144:	13 06       	cpc	r1, r19
    3146:	e4 07       	cpc	r30, r20
    3148:	f5 07       	cpc	r31, r21
    314a:	98 f0       	brcs	.+38     	; 0x3172 <__fp_cmp+0x46>
    314c:	62 1b       	sub	r22, r18
    314e:	73 0b       	sbc	r23, r19
    3150:	84 0b       	sbc	r24, r20
    3152:	95 0b       	sbc	r25, r21
    3154:	39 f4       	brne	.+14     	; 0x3164 <__fp_cmp+0x38>
    3156:	0a 26       	eor	r0, r26
    3158:	61 f0       	breq	.+24     	; 0x3172 <__fp_cmp+0x46>
    315a:	23 2b       	or	r18, r19
    315c:	24 2b       	or	r18, r20
    315e:	25 2b       	or	r18, r21
    3160:	21 f4       	brne	.+8      	; 0x316a <__fp_cmp+0x3e>
    3162:	08 95       	ret
    3164:	0a 26       	eor	r0, r26
    3166:	09 f4       	brne	.+2      	; 0x316a <__fp_cmp+0x3e>
    3168:	a1 40       	sbci	r26, 0x01	; 1
    316a:	a6 95       	lsr	r26
    316c:	8f ef       	ldi	r24, 0xFF	; 255
    316e:	81 1d       	adc	r24, r1
    3170:	81 1d       	adc	r24, r1
    3172:	08 95       	ret

00003174 <__fp_inf>:
    3174:	97 f9       	bld	r25, 7
    3176:	9f 67       	ori	r25, 0x7F	; 127
    3178:	80 e8       	ldi	r24, 0x80	; 128
    317a:	70 e0       	ldi	r23, 0x00	; 0
    317c:	60 e0       	ldi	r22, 0x00	; 0
    317e:	08 95       	ret

00003180 <__fp_nan>:
    3180:	9f ef       	ldi	r25, 0xFF	; 255
    3182:	80 ec       	ldi	r24, 0xC0	; 192
    3184:	08 95       	ret

00003186 <__fp_powser>:
    3186:	df 93       	push	r29
    3188:	cf 93       	push	r28
    318a:	1f 93       	push	r17
    318c:	0f 93       	push	r16
    318e:	ff 92       	push	r15
    3190:	ef 92       	push	r14
    3192:	df 92       	push	r13
    3194:	7b 01       	movw	r14, r22
    3196:	8c 01       	movw	r16, r24
    3198:	68 94       	set
    319a:	05 c0       	rjmp	.+10     	; 0x31a6 <__fp_powser+0x20>
    319c:	da 2e       	mov	r13, r26
    319e:	ef 01       	movw	r28, r30
    31a0:	a8 d0       	rcall	.+336    	; 0x32f2 <__mulsf3x>
    31a2:	fe 01       	movw	r30, r28
    31a4:	e8 94       	clt
    31a6:	a5 91       	lpm	r26, Z+
    31a8:	25 91       	lpm	r18, Z+
    31aa:	35 91       	lpm	r19, Z+
    31ac:	45 91       	lpm	r20, Z+
    31ae:	55 91       	lpm	r21, Z+
    31b0:	ae f3       	brts	.-22     	; 0x319c <__fp_powser+0x16>
    31b2:	ef 01       	movw	r28, r30
    31b4:	70 de       	rcall	.-800    	; 0x2e96 <__addsf3x>
    31b6:	fe 01       	movw	r30, r28
    31b8:	97 01       	movw	r18, r14
    31ba:	a8 01       	movw	r20, r16
    31bc:	da 94       	dec	r13
    31be:	79 f7       	brne	.-34     	; 0x319e <__fp_powser+0x18>
    31c0:	df 90       	pop	r13
    31c2:	ef 90       	pop	r14
    31c4:	ff 90       	pop	r15
    31c6:	0f 91       	pop	r16
    31c8:	1f 91       	pop	r17
    31ca:	cf 91       	pop	r28
    31cc:	df 91       	pop	r29
    31ce:	08 95       	ret

000031d0 <__fp_pscA>:
    31d0:	00 24       	eor	r0, r0
    31d2:	0a 94       	dec	r0
    31d4:	16 16       	cp	r1, r22
    31d6:	17 06       	cpc	r1, r23
    31d8:	18 06       	cpc	r1, r24
    31da:	09 06       	cpc	r0, r25
    31dc:	08 95       	ret

000031de <__fp_pscB>:
    31de:	00 24       	eor	r0, r0
    31e0:	0a 94       	dec	r0
    31e2:	12 16       	cp	r1, r18
    31e4:	13 06       	cpc	r1, r19
    31e6:	14 06       	cpc	r1, r20
    31e8:	05 06       	cpc	r0, r21
    31ea:	08 95       	ret
    31ec:	c9 cf       	rjmp	.-110    	; 0x3180 <__fp_nan>

000031ee <__fp_rempio2>:
    31ee:	50 d0       	rcall	.+160    	; 0x3290 <__fp_splitA>
    31f0:	e8 f3       	brcs	.-6      	; 0x31ec <__fp_pscB+0xe>
    31f2:	e8 94       	clt
    31f4:	e0 e0       	ldi	r30, 0x00	; 0
    31f6:	bb 27       	eor	r27, r27
    31f8:	9f 57       	subi	r25, 0x7F	; 127
    31fa:	f0 f0       	brcs	.+60     	; 0x3238 <__fp_rempio2+0x4a>
    31fc:	2a ed       	ldi	r18, 0xDA	; 218
    31fe:	3f e0       	ldi	r19, 0x0F	; 15
    3200:	49 ec       	ldi	r20, 0xC9	; 201
    3202:	06 c0       	rjmp	.+12     	; 0x3210 <__fp_rempio2+0x22>
    3204:	ee 0f       	add	r30, r30
    3206:	bb 0f       	add	r27, r27
    3208:	66 1f       	adc	r22, r22
    320a:	77 1f       	adc	r23, r23
    320c:	88 1f       	adc	r24, r24
    320e:	28 f0       	brcs	.+10     	; 0x321a <__fp_rempio2+0x2c>
    3210:	b2 3a       	cpi	r27, 0xA2	; 162
    3212:	62 07       	cpc	r22, r18
    3214:	73 07       	cpc	r23, r19
    3216:	84 07       	cpc	r24, r20
    3218:	28 f0       	brcs	.+10     	; 0x3224 <__fp_rempio2+0x36>
    321a:	b2 5a       	subi	r27, 0xA2	; 162
    321c:	62 0b       	sbc	r22, r18
    321e:	73 0b       	sbc	r23, r19
    3220:	84 0b       	sbc	r24, r20
    3222:	e3 95       	inc	r30
    3224:	9a 95       	dec	r25
    3226:	72 f7       	brpl	.-36     	; 0x3204 <__fp_rempio2+0x16>
    3228:	80 38       	cpi	r24, 0x80	; 128
    322a:	30 f4       	brcc	.+12     	; 0x3238 <__fp_rempio2+0x4a>
    322c:	9a 95       	dec	r25
    322e:	bb 0f       	add	r27, r27
    3230:	66 1f       	adc	r22, r22
    3232:	77 1f       	adc	r23, r23
    3234:	88 1f       	adc	r24, r24
    3236:	d2 f7       	brpl	.-12     	; 0x322c <__fp_rempio2+0x3e>
    3238:	90 48       	sbci	r25, 0x80	; 128
    323a:	00 c1       	rjmp	.+512    	; 0x343c <__fp_mpack_finite>

0000323c <__fp_round>:
    323c:	09 2e       	mov	r0, r25
    323e:	03 94       	inc	r0
    3240:	00 0c       	add	r0, r0
    3242:	11 f4       	brne	.+4      	; 0x3248 <__fp_round+0xc>
    3244:	88 23       	and	r24, r24
    3246:	52 f0       	brmi	.+20     	; 0x325c <__fp_round+0x20>
    3248:	bb 0f       	add	r27, r27
    324a:	40 f4       	brcc	.+16     	; 0x325c <__fp_round+0x20>
    324c:	bf 2b       	or	r27, r31
    324e:	11 f4       	brne	.+4      	; 0x3254 <__fp_round+0x18>
    3250:	60 ff       	sbrs	r22, 0
    3252:	04 c0       	rjmp	.+8      	; 0x325c <__fp_round+0x20>
    3254:	6f 5f       	subi	r22, 0xFF	; 255
    3256:	7f 4f       	sbci	r23, 0xFF	; 255
    3258:	8f 4f       	sbci	r24, 0xFF	; 255
    325a:	9f 4f       	sbci	r25, 0xFF	; 255
    325c:	08 95       	ret

0000325e <__fp_sinus>:
    325e:	ef 93       	push	r30
    3260:	e0 ff       	sbrs	r30, 0
    3262:	06 c0       	rjmp	.+12     	; 0x3270 <__fp_sinus+0x12>
    3264:	a2 ea       	ldi	r26, 0xA2	; 162
    3266:	2a ed       	ldi	r18, 0xDA	; 218
    3268:	3f e0       	ldi	r19, 0x0F	; 15
    326a:	49 ec       	ldi	r20, 0xC9	; 201
    326c:	5f eb       	ldi	r21, 0xBF	; 191
    326e:	13 de       	rcall	.-986    	; 0x2e96 <__addsf3x>
    3270:	e5 df       	rcall	.-54     	; 0x323c <__fp_round>
    3272:	0f 90       	pop	r0
    3274:	03 94       	inc	r0
    3276:	01 fc       	sbrc	r0, 1
    3278:	90 58       	subi	r25, 0x80	; 128
    327a:	e4 ef       	ldi	r30, 0xF4	; 244
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	f1 c0       	rjmp	.+482    	; 0x3462 <__fp_powsodd>

00003280 <__fp_split3>:
    3280:	57 fd       	sbrc	r21, 7
    3282:	90 58       	subi	r25, 0x80	; 128
    3284:	44 0f       	add	r20, r20
    3286:	55 1f       	adc	r21, r21
    3288:	59 f0       	breq	.+22     	; 0x32a0 <__fp_splitA+0x10>
    328a:	5f 3f       	cpi	r21, 0xFF	; 255
    328c:	71 f0       	breq	.+28     	; 0x32aa <__fp_splitA+0x1a>
    328e:	47 95       	ror	r20

00003290 <__fp_splitA>:
    3290:	88 0f       	add	r24, r24
    3292:	97 fb       	bst	r25, 7
    3294:	99 1f       	adc	r25, r25
    3296:	61 f0       	breq	.+24     	; 0x32b0 <__fp_splitA+0x20>
    3298:	9f 3f       	cpi	r25, 0xFF	; 255
    329a:	79 f0       	breq	.+30     	; 0x32ba <__fp_splitA+0x2a>
    329c:	87 95       	ror	r24
    329e:	08 95       	ret
    32a0:	12 16       	cp	r1, r18
    32a2:	13 06       	cpc	r1, r19
    32a4:	14 06       	cpc	r1, r20
    32a6:	55 1f       	adc	r21, r21
    32a8:	f2 cf       	rjmp	.-28     	; 0x328e <__fp_split3+0xe>
    32aa:	46 95       	lsr	r20
    32ac:	f1 df       	rcall	.-30     	; 0x3290 <__fp_splitA>
    32ae:	08 c0       	rjmp	.+16     	; 0x32c0 <__fp_splitA+0x30>
    32b0:	16 16       	cp	r1, r22
    32b2:	17 06       	cpc	r1, r23
    32b4:	18 06       	cpc	r1, r24
    32b6:	99 1f       	adc	r25, r25
    32b8:	f1 cf       	rjmp	.-30     	; 0x329c <__fp_splitA+0xc>
    32ba:	86 95       	lsr	r24
    32bc:	71 05       	cpc	r23, r1
    32be:	61 05       	cpc	r22, r1
    32c0:	08 94       	sec
    32c2:	08 95       	ret

000032c4 <__fp_zero>:
    32c4:	e8 94       	clt

000032c6 <__fp_szero>:
    32c6:	bb 27       	eor	r27, r27
    32c8:	66 27       	eor	r22, r22
    32ca:	77 27       	eor	r23, r23
    32cc:	cb 01       	movw	r24, r22
    32ce:	97 f9       	bld	r25, 7
    32d0:	08 95       	ret

000032d2 <__gesf2>:
    32d2:	2c df       	rcall	.-424    	; 0x312c <__fp_cmp>
    32d4:	08 f4       	brcc	.+2      	; 0x32d8 <__gesf2+0x6>
    32d6:	8f ef       	ldi	r24, 0xFF	; 255
    32d8:	08 95       	ret

000032da <__mulsf3>:
    32da:	0b d0       	rcall	.+22     	; 0x32f2 <__mulsf3x>
    32dc:	af cf       	rjmp	.-162    	; 0x323c <__fp_round>
    32de:	78 df       	rcall	.-272    	; 0x31d0 <__fp_pscA>
    32e0:	28 f0       	brcs	.+10     	; 0x32ec <__mulsf3+0x12>
    32e2:	7d df       	rcall	.-262    	; 0x31de <__fp_pscB>
    32e4:	18 f0       	brcs	.+6      	; 0x32ec <__mulsf3+0x12>
    32e6:	95 23       	and	r25, r21
    32e8:	09 f0       	breq	.+2      	; 0x32ec <__mulsf3+0x12>
    32ea:	44 cf       	rjmp	.-376    	; 0x3174 <__fp_inf>
    32ec:	49 cf       	rjmp	.-366    	; 0x3180 <__fp_nan>
    32ee:	11 24       	eor	r1, r1
    32f0:	ea cf       	rjmp	.-44     	; 0x32c6 <__fp_szero>

000032f2 <__mulsf3x>:
    32f2:	c6 df       	rcall	.-116    	; 0x3280 <__fp_split3>
    32f4:	a0 f3       	brcs	.-24     	; 0x32de <__mulsf3+0x4>

000032f6 <__mulsf3_pse>:
    32f6:	95 9f       	mul	r25, r21
    32f8:	d1 f3       	breq	.-12     	; 0x32ee <__mulsf3+0x14>
    32fa:	95 0f       	add	r25, r21
    32fc:	50 e0       	ldi	r21, 0x00	; 0
    32fe:	55 1f       	adc	r21, r21
    3300:	62 9f       	mul	r22, r18
    3302:	f0 01       	movw	r30, r0
    3304:	72 9f       	mul	r23, r18
    3306:	bb 27       	eor	r27, r27
    3308:	f0 0d       	add	r31, r0
    330a:	b1 1d       	adc	r27, r1
    330c:	63 9f       	mul	r22, r19
    330e:	aa 27       	eor	r26, r26
    3310:	f0 0d       	add	r31, r0
    3312:	b1 1d       	adc	r27, r1
    3314:	aa 1f       	adc	r26, r26
    3316:	64 9f       	mul	r22, r20
    3318:	66 27       	eor	r22, r22
    331a:	b0 0d       	add	r27, r0
    331c:	a1 1d       	adc	r26, r1
    331e:	66 1f       	adc	r22, r22
    3320:	82 9f       	mul	r24, r18
    3322:	22 27       	eor	r18, r18
    3324:	b0 0d       	add	r27, r0
    3326:	a1 1d       	adc	r26, r1
    3328:	62 1f       	adc	r22, r18
    332a:	73 9f       	mul	r23, r19
    332c:	b0 0d       	add	r27, r0
    332e:	a1 1d       	adc	r26, r1
    3330:	62 1f       	adc	r22, r18
    3332:	83 9f       	mul	r24, r19
    3334:	a0 0d       	add	r26, r0
    3336:	61 1d       	adc	r22, r1
    3338:	22 1f       	adc	r18, r18
    333a:	74 9f       	mul	r23, r20
    333c:	33 27       	eor	r19, r19
    333e:	a0 0d       	add	r26, r0
    3340:	61 1d       	adc	r22, r1
    3342:	23 1f       	adc	r18, r19
    3344:	84 9f       	mul	r24, r20
    3346:	60 0d       	add	r22, r0
    3348:	21 1d       	adc	r18, r1
    334a:	82 2f       	mov	r24, r18
    334c:	76 2f       	mov	r23, r22
    334e:	6a 2f       	mov	r22, r26
    3350:	11 24       	eor	r1, r1
    3352:	9f 57       	subi	r25, 0x7F	; 127
    3354:	50 40       	sbci	r21, 0x00	; 0
    3356:	8a f0       	brmi	.+34     	; 0x337a <__mulsf3_pse+0x84>
    3358:	e1 f0       	breq	.+56     	; 0x3392 <__mulsf3_pse+0x9c>
    335a:	88 23       	and	r24, r24
    335c:	4a f0       	brmi	.+18     	; 0x3370 <__mulsf3_pse+0x7a>
    335e:	ee 0f       	add	r30, r30
    3360:	ff 1f       	adc	r31, r31
    3362:	bb 1f       	adc	r27, r27
    3364:	66 1f       	adc	r22, r22
    3366:	77 1f       	adc	r23, r23
    3368:	88 1f       	adc	r24, r24
    336a:	91 50       	subi	r25, 0x01	; 1
    336c:	50 40       	sbci	r21, 0x00	; 0
    336e:	a9 f7       	brne	.-22     	; 0x335a <__mulsf3_pse+0x64>
    3370:	9e 3f       	cpi	r25, 0xFE	; 254
    3372:	51 05       	cpc	r21, r1
    3374:	70 f0       	brcs	.+28     	; 0x3392 <__mulsf3_pse+0x9c>
    3376:	fe ce       	rjmp	.-516    	; 0x3174 <__fp_inf>
    3378:	a6 cf       	rjmp	.-180    	; 0x32c6 <__fp_szero>
    337a:	5f 3f       	cpi	r21, 0xFF	; 255
    337c:	ec f3       	brlt	.-6      	; 0x3378 <__mulsf3_pse+0x82>
    337e:	98 3e       	cpi	r25, 0xE8	; 232
    3380:	dc f3       	brlt	.-10     	; 0x3378 <__mulsf3_pse+0x82>
    3382:	86 95       	lsr	r24
    3384:	77 95       	ror	r23
    3386:	67 95       	ror	r22
    3388:	b7 95       	ror	r27
    338a:	f7 95       	ror	r31
    338c:	e7 95       	ror	r30
    338e:	9f 5f       	subi	r25, 0xFF	; 255
    3390:	c1 f7       	brne	.-16     	; 0x3382 <__mulsf3_pse+0x8c>
    3392:	fe 2b       	or	r31, r30
    3394:	88 0f       	add	r24, r24
    3396:	91 1d       	adc	r25, r1
    3398:	96 95       	lsr	r25
    339a:	87 95       	ror	r24
    339c:	97 f9       	bld	r25, 7
    339e:	08 95       	ret

000033a0 <sin>:
    33a0:	9f 93       	push	r25
    33a2:	25 df       	rcall	.-438    	; 0x31ee <__fp_rempio2>
    33a4:	0f 90       	pop	r0
    33a6:	07 fc       	sbrc	r0, 7
    33a8:	ee 5f       	subi	r30, 0xFE	; 254
    33aa:	59 cf       	rjmp	.-334    	; 0x325e <__fp_sinus>
    33ac:	11 f4       	brne	.+4      	; 0x33b2 <sin+0x12>
    33ae:	0e f4       	brtc	.+2      	; 0x33b2 <sin+0x12>
    33b0:	e7 ce       	rjmp	.-562    	; 0x3180 <__fp_nan>
    33b2:	42 c0       	rjmp	.+132    	; 0x3438 <__fp_mpack>

000033b4 <sqrt>:
    33b4:	6d df       	rcall	.-294    	; 0x3290 <__fp_splitA>
    33b6:	d0 f3       	brcs	.-12     	; 0x33ac <sin+0xc>
    33b8:	99 23       	and	r25, r25
    33ba:	d9 f3       	breq	.-10     	; 0x33b2 <sin+0x12>
    33bc:	ce f3       	brts	.-14     	; 0x33b0 <sin+0x10>
    33be:	9f 57       	subi	r25, 0x7F	; 127
    33c0:	55 0b       	sbc	r21, r21
    33c2:	87 ff       	sbrs	r24, 7
    33c4:	47 d0       	rcall	.+142    	; 0x3454 <__fp_norm2>
    33c6:	00 24       	eor	r0, r0
    33c8:	a0 e6       	ldi	r26, 0x60	; 96
    33ca:	40 ea       	ldi	r20, 0xA0	; 160
    33cc:	90 01       	movw	r18, r0
    33ce:	80 58       	subi	r24, 0x80	; 128
    33d0:	56 95       	lsr	r21
    33d2:	97 95       	ror	r25
    33d4:	28 f4       	brcc	.+10     	; 0x33e0 <sqrt+0x2c>
    33d6:	80 5c       	subi	r24, 0xC0	; 192
    33d8:	66 0f       	add	r22, r22
    33da:	77 1f       	adc	r23, r23
    33dc:	88 1f       	adc	r24, r24
    33de:	20 f0       	brcs	.+8      	; 0x33e8 <sqrt+0x34>
    33e0:	26 17       	cp	r18, r22
    33e2:	37 07       	cpc	r19, r23
    33e4:	48 07       	cpc	r20, r24
    33e6:	30 f4       	brcc	.+12     	; 0x33f4 <sqrt+0x40>
    33e8:	62 1b       	sub	r22, r18
    33ea:	73 0b       	sbc	r23, r19
    33ec:	84 0b       	sbc	r24, r20
    33ee:	20 29       	or	r18, r0
    33f0:	31 29       	or	r19, r1
    33f2:	4a 2b       	or	r20, r26
    33f4:	a6 95       	lsr	r26
    33f6:	17 94       	ror	r1
    33f8:	07 94       	ror	r0
    33fa:	20 25       	eor	r18, r0
    33fc:	31 25       	eor	r19, r1
    33fe:	4a 27       	eor	r20, r26
    3400:	58 f7       	brcc	.-42     	; 0x33d8 <sqrt+0x24>
    3402:	66 0f       	add	r22, r22
    3404:	77 1f       	adc	r23, r23
    3406:	88 1f       	adc	r24, r24
    3408:	20 f0       	brcs	.+8      	; 0x3412 <sqrt+0x5e>
    340a:	26 17       	cp	r18, r22
    340c:	37 07       	cpc	r19, r23
    340e:	48 07       	cpc	r20, r24
    3410:	30 f4       	brcc	.+12     	; 0x341e <sqrt+0x6a>
    3412:	62 0b       	sbc	r22, r18
    3414:	73 0b       	sbc	r23, r19
    3416:	84 0b       	sbc	r24, r20
    3418:	20 0d       	add	r18, r0
    341a:	31 1d       	adc	r19, r1
    341c:	41 1d       	adc	r20, r1
    341e:	a0 95       	com	r26
    3420:	81 f7       	brne	.-32     	; 0x3402 <sqrt+0x4e>
    3422:	b9 01       	movw	r22, r18
    3424:	84 2f       	mov	r24, r20
    3426:	91 58       	subi	r25, 0x81	; 129
    3428:	88 0f       	add	r24, r24
    342a:	96 95       	lsr	r25
    342c:	87 95       	ror	r24
    342e:	08 95       	ret

00003430 <__unordsf2>:
    3430:	7d de       	rcall	.-774    	; 0x312c <__fp_cmp>
    3432:	88 0b       	sbc	r24, r24
    3434:	99 0b       	sbc	r25, r25
    3436:	08 95       	ret

00003438 <__fp_mpack>:
    3438:	9f 3f       	cpi	r25, 0xFF	; 255
    343a:	31 f0       	breq	.+12     	; 0x3448 <__fp_mpack_finite+0xc>

0000343c <__fp_mpack_finite>:
    343c:	91 50       	subi	r25, 0x01	; 1
    343e:	20 f4       	brcc	.+8      	; 0x3448 <__fp_mpack_finite+0xc>
    3440:	87 95       	ror	r24
    3442:	77 95       	ror	r23
    3444:	67 95       	ror	r22
    3446:	b7 95       	ror	r27
    3448:	88 0f       	add	r24, r24
    344a:	91 1d       	adc	r25, r1
    344c:	96 95       	lsr	r25
    344e:	87 95       	ror	r24
    3450:	97 f9       	bld	r25, 7
    3452:	08 95       	ret

00003454 <__fp_norm2>:
    3454:	91 50       	subi	r25, 0x01	; 1
    3456:	50 40       	sbci	r21, 0x00	; 0
    3458:	66 0f       	add	r22, r22
    345a:	77 1f       	adc	r23, r23
    345c:	88 1f       	adc	r24, r24
    345e:	d2 f7       	brpl	.-12     	; 0x3454 <__fp_norm2>
    3460:	08 95       	ret

00003462 <__fp_powsodd>:
    3462:	9f 93       	push	r25
    3464:	8f 93       	push	r24
    3466:	7f 93       	push	r23
    3468:	6f 93       	push	r22
    346a:	ff 93       	push	r31
    346c:	ef 93       	push	r30
    346e:	9b 01       	movw	r18, r22
    3470:	ac 01       	movw	r20, r24
    3472:	33 df       	rcall	.-410    	; 0x32da <__mulsf3>
    3474:	ef 91       	pop	r30
    3476:	ff 91       	pop	r31
    3478:	86 de       	rcall	.-756    	; 0x3186 <__fp_powser>
    347a:	2f 91       	pop	r18
    347c:	3f 91       	pop	r19
    347e:	4f 91       	pop	r20
    3480:	5f 91       	pop	r21
    3482:	2b cf       	rjmp	.-426    	; 0x32da <__mulsf3>

00003484 <__itoa_ncheck>:
    3484:	bb 27       	eor	r27, r27
    3486:	4a 30       	cpi	r20, 0x0A	; 10
    3488:	31 f4       	brne	.+12     	; 0x3496 <__itoa_ncheck+0x12>
    348a:	99 23       	and	r25, r25
    348c:	22 f4       	brpl	.+8      	; 0x3496 <__itoa_ncheck+0x12>
    348e:	bd e2       	ldi	r27, 0x2D	; 45
    3490:	90 95       	com	r25
    3492:	81 95       	neg	r24
    3494:	9f 4f       	sbci	r25, 0xFF	; 255
    3496:	01 c0       	rjmp	.+2      	; 0x349a <__utoa_common>

00003498 <__utoa_ncheck>:
    3498:	bb 27       	eor	r27, r27

0000349a <__utoa_common>:
    349a:	fb 01       	movw	r30, r22
    349c:	55 27       	eor	r21, r21
    349e:	aa 27       	eor	r26, r26
    34a0:	88 0f       	add	r24, r24
    34a2:	99 1f       	adc	r25, r25
    34a4:	aa 1f       	adc	r26, r26
    34a6:	a4 17       	cp	r26, r20
    34a8:	10 f0       	brcs	.+4      	; 0x34ae <__utoa_common+0x14>
    34aa:	a4 1b       	sub	r26, r20
    34ac:	83 95       	inc	r24
    34ae:	50 51       	subi	r21, 0x10	; 16
    34b0:	b9 f7       	brne	.-18     	; 0x34a0 <__utoa_common+0x6>
    34b2:	a0 5d       	subi	r26, 0xD0	; 208
    34b4:	aa 33       	cpi	r26, 0x3A	; 58
    34b6:	08 f0       	brcs	.+2      	; 0x34ba <__utoa_common+0x20>
    34b8:	a9 5d       	subi	r26, 0xD9	; 217
    34ba:	a1 93       	st	Z+, r26
    34bc:	00 97       	sbiw	r24, 0x00	; 0
    34be:	79 f7       	brne	.-34     	; 0x349e <__utoa_common+0x4>
    34c0:	b1 11       	cpse	r27, r1
    34c2:	b1 93       	st	Z+, r27
    34c4:	11 92       	st	Z+, r1
    34c6:	cb 01       	movw	r24, r22
    34c8:	02 c2       	rjmp	.+1028   	; 0x38ce <strrev>

000034ca <fdevopen>:
    34ca:	0f 93       	push	r16
    34cc:	1f 93       	push	r17
    34ce:	cf 93       	push	r28
    34d0:	df 93       	push	r29
    34d2:	ec 01       	movw	r28, r24
    34d4:	8b 01       	movw	r16, r22
    34d6:	00 97       	sbiw	r24, 0x00	; 0
    34d8:	31 f4       	brne	.+12     	; 0x34e6 <fdevopen+0x1c>
    34da:	61 15       	cp	r22, r1
    34dc:	71 05       	cpc	r23, r1
    34de:	19 f4       	brne	.+6      	; 0x34e6 <fdevopen+0x1c>
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	37 c0       	rjmp	.+110    	; 0x3554 <fdevopen+0x8a>
    34e6:	6e e0       	ldi	r22, 0x0E	; 14
    34e8:	70 e0       	ldi	r23, 0x00	; 0
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	a7 d0       	rcall	.+334    	; 0x363e <calloc>
    34f0:	fc 01       	movw	r30, r24
    34f2:	00 97       	sbiw	r24, 0x00	; 0
    34f4:	a9 f3       	breq	.-22     	; 0x34e0 <fdevopen+0x16>
    34f6:	80 e8       	ldi	r24, 0x80	; 128
    34f8:	83 83       	std	Z+3, r24	; 0x03
    34fa:	01 15       	cp	r16, r1
    34fc:	11 05       	cpc	r17, r1
    34fe:	71 f0       	breq	.+28     	; 0x351c <fdevopen+0x52>
    3500:	13 87       	std	Z+11, r17	; 0x0b
    3502:	02 87       	std	Z+10, r16	; 0x0a
    3504:	81 e8       	ldi	r24, 0x81	; 129
    3506:	83 83       	std	Z+3, r24	; 0x03
    3508:	80 91 c2 04 	lds	r24, 0x04C2
    350c:	90 91 c3 04 	lds	r25, 0x04C3
    3510:	89 2b       	or	r24, r25
    3512:	21 f4       	brne	.+8      	; 0x351c <fdevopen+0x52>
    3514:	f0 93 c3 04 	sts	0x04C3, r31
    3518:	e0 93 c2 04 	sts	0x04C2, r30
    351c:	20 97       	sbiw	r28, 0x00	; 0
    351e:	c9 f0       	breq	.+50     	; 0x3552 <fdevopen+0x88>
    3520:	d1 87       	std	Z+9, r29	; 0x09
    3522:	c0 87       	std	Z+8, r28	; 0x08
    3524:	83 81       	ldd	r24, Z+3	; 0x03
    3526:	82 60       	ori	r24, 0x02	; 2
    3528:	83 83       	std	Z+3, r24	; 0x03
    352a:	80 91 c4 04 	lds	r24, 0x04C4
    352e:	90 91 c5 04 	lds	r25, 0x04C5
    3532:	89 2b       	or	r24, r25
    3534:	71 f4       	brne	.+28     	; 0x3552 <fdevopen+0x88>
    3536:	f0 93 c5 04 	sts	0x04C5, r31
    353a:	e0 93 c4 04 	sts	0x04C4, r30
    353e:	80 91 c6 04 	lds	r24, 0x04C6
    3542:	90 91 c7 04 	lds	r25, 0x04C7
    3546:	89 2b       	or	r24, r25
    3548:	21 f4       	brne	.+8      	; 0x3552 <fdevopen+0x88>
    354a:	f0 93 c7 04 	sts	0x04C7, r31
    354e:	e0 93 c6 04 	sts	0x04C6, r30
    3552:	cf 01       	movw	r24, r30
    3554:	df 91       	pop	r29
    3556:	cf 91       	pop	r28
    3558:	1f 91       	pop	r17
    355a:	0f 91       	pop	r16
    355c:	08 95       	ret

0000355e <fgetc>:
    355e:	cf 93       	push	r28
    3560:	df 93       	push	r29
    3562:	ec 01       	movw	r28, r24
    3564:	2b 81       	ldd	r18, Y+3	; 0x03
    3566:	20 ff       	sbrs	r18, 0
    3568:	33 c0       	rjmp	.+102    	; 0x35d0 <fgetc+0x72>
    356a:	26 ff       	sbrs	r18, 6
    356c:	0a c0       	rjmp	.+20     	; 0x3582 <fgetc+0x24>
    356e:	2f 7b       	andi	r18, 0xBF	; 191
    3570:	2b 83       	std	Y+3, r18	; 0x03
    3572:	8e 81       	ldd	r24, Y+6	; 0x06
    3574:	9f 81       	ldd	r25, Y+7	; 0x07
    3576:	01 96       	adiw	r24, 0x01	; 1
    3578:	9f 83       	std	Y+7, r25	; 0x07
    357a:	8e 83       	std	Y+6, r24	; 0x06
    357c:	8a 81       	ldd	r24, Y+2	; 0x02
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	29 c0       	rjmp	.+82     	; 0x35d4 <fgetc+0x76>
    3582:	22 ff       	sbrs	r18, 2
    3584:	0f c0       	rjmp	.+30     	; 0x35a4 <fgetc+0x46>
    3586:	e8 81       	ld	r30, Y
    3588:	f9 81       	ldd	r31, Y+1	; 0x01
    358a:	80 81       	ld	r24, Z
    358c:	99 27       	eor	r25, r25
    358e:	87 fd       	sbrc	r24, 7
    3590:	90 95       	com	r25
    3592:	00 97       	sbiw	r24, 0x00	; 0
    3594:	19 f4       	brne	.+6      	; 0x359c <fgetc+0x3e>
    3596:	20 62       	ori	r18, 0x20	; 32
    3598:	2b 83       	std	Y+3, r18	; 0x03
    359a:	1a c0       	rjmp	.+52     	; 0x35d0 <fgetc+0x72>
    359c:	31 96       	adiw	r30, 0x01	; 1
    359e:	f9 83       	std	Y+1, r31	; 0x01
    35a0:	e8 83       	st	Y, r30
    35a2:	0e c0       	rjmp	.+28     	; 0x35c0 <fgetc+0x62>
    35a4:	ea 85       	ldd	r30, Y+10	; 0x0a
    35a6:	fb 85       	ldd	r31, Y+11	; 0x0b
    35a8:	19 95       	eicall
    35aa:	97 ff       	sbrs	r25, 7
    35ac:	09 c0       	rjmp	.+18     	; 0x35c0 <fgetc+0x62>
    35ae:	2b 81       	ldd	r18, Y+3	; 0x03
    35b0:	01 96       	adiw	r24, 0x01	; 1
    35b2:	11 f4       	brne	.+4      	; 0x35b8 <fgetc+0x5a>
    35b4:	80 e1       	ldi	r24, 0x10	; 16
    35b6:	01 c0       	rjmp	.+2      	; 0x35ba <fgetc+0x5c>
    35b8:	80 e2       	ldi	r24, 0x20	; 32
    35ba:	82 2b       	or	r24, r18
    35bc:	8b 83       	std	Y+3, r24	; 0x03
    35be:	08 c0       	rjmp	.+16     	; 0x35d0 <fgetc+0x72>
    35c0:	2e 81       	ldd	r18, Y+6	; 0x06
    35c2:	3f 81       	ldd	r19, Y+7	; 0x07
    35c4:	2f 5f       	subi	r18, 0xFF	; 255
    35c6:	3f 4f       	sbci	r19, 0xFF	; 255
    35c8:	3f 83       	std	Y+7, r19	; 0x07
    35ca:	2e 83       	std	Y+6, r18	; 0x06
    35cc:	99 27       	eor	r25, r25
    35ce:	02 c0       	rjmp	.+4      	; 0x35d4 <fgetc+0x76>
    35d0:	8f ef       	ldi	r24, 0xFF	; 255
    35d2:	9f ef       	ldi	r25, 0xFF	; 255
    35d4:	df 91       	pop	r29
    35d6:	cf 91       	pop	r28
    35d8:	08 95       	ret

000035da <putchar>:
    35da:	60 91 c4 04 	lds	r22, 0x04C4
    35de:	70 91 c5 04 	lds	r23, 0x04C5
    35e2:	85 c1       	rjmp	.+778    	; 0x38ee <fputc>

000035e4 <puts>:
    35e4:	0f 93       	push	r16
    35e6:	1f 93       	push	r17
    35e8:	cf 93       	push	r28
    35ea:	df 93       	push	r29
    35ec:	e0 91 c4 04 	lds	r30, 0x04C4
    35f0:	f0 91 c5 04 	lds	r31, 0x04C5
    35f4:	23 81       	ldd	r18, Z+3	; 0x03
    35f6:	21 ff       	sbrs	r18, 1
    35f8:	1b c0       	rjmp	.+54     	; 0x3630 <puts+0x4c>
    35fa:	ec 01       	movw	r28, r24
    35fc:	00 e0       	ldi	r16, 0x00	; 0
    35fe:	10 e0       	ldi	r17, 0x00	; 0
    3600:	89 91       	ld	r24, Y+
    3602:	60 91 c4 04 	lds	r22, 0x04C4
    3606:	70 91 c5 04 	lds	r23, 0x04C5
    360a:	db 01       	movw	r26, r22
    360c:	18 96       	adiw	r26, 0x08	; 8
    360e:	ed 91       	ld	r30, X+
    3610:	fc 91       	ld	r31, X
    3612:	19 97       	sbiw	r26, 0x09	; 9
    3614:	88 23       	and	r24, r24
    3616:	31 f0       	breq	.+12     	; 0x3624 <puts+0x40>
    3618:	19 95       	eicall
    361a:	89 2b       	or	r24, r25
    361c:	89 f3       	breq	.-30     	; 0x3600 <puts+0x1c>
    361e:	0f ef       	ldi	r16, 0xFF	; 255
    3620:	1f ef       	ldi	r17, 0xFF	; 255
    3622:	ee cf       	rjmp	.-36     	; 0x3600 <puts+0x1c>
    3624:	8a e0       	ldi	r24, 0x0A	; 10
    3626:	19 95       	eicall
    3628:	89 2b       	or	r24, r25
    362a:	11 f4       	brne	.+4      	; 0x3630 <puts+0x4c>
    362c:	c8 01       	movw	r24, r16
    362e:	02 c0       	rjmp	.+4      	; 0x3634 <puts+0x50>
    3630:	8f ef       	ldi	r24, 0xFF	; 255
    3632:	9f ef       	ldi	r25, 0xFF	; 255
    3634:	df 91       	pop	r29
    3636:	cf 91       	pop	r28
    3638:	1f 91       	pop	r17
    363a:	0f 91       	pop	r16
    363c:	08 95       	ret

0000363e <calloc>:
    363e:	0f 93       	push	r16
    3640:	1f 93       	push	r17
    3642:	cf 93       	push	r28
    3644:	df 93       	push	r29
    3646:	86 9f       	mul	r24, r22
    3648:	80 01       	movw	r16, r0
    364a:	87 9f       	mul	r24, r23
    364c:	10 0d       	add	r17, r0
    364e:	96 9f       	mul	r25, r22
    3650:	10 0d       	add	r17, r0
    3652:	11 24       	eor	r1, r1
    3654:	c8 01       	movw	r24, r16
    3656:	0d d0       	rcall	.+26     	; 0x3672 <malloc>
    3658:	ec 01       	movw	r28, r24
    365a:	00 97       	sbiw	r24, 0x00	; 0
    365c:	21 f0       	breq	.+8      	; 0x3666 <calloc+0x28>
    365e:	a8 01       	movw	r20, r16
    3660:	60 e0       	ldi	r22, 0x00	; 0
    3662:	70 e0       	ldi	r23, 0x00	; 0
    3664:	2d d1       	rcall	.+602    	; 0x38c0 <memset>
    3666:	ce 01       	movw	r24, r28
    3668:	df 91       	pop	r29
    366a:	cf 91       	pop	r28
    366c:	1f 91       	pop	r17
    366e:	0f 91       	pop	r16
    3670:	08 95       	ret

00003672 <malloc>:
    3672:	cf 93       	push	r28
    3674:	df 93       	push	r29
    3676:	82 30       	cpi	r24, 0x02	; 2
    3678:	91 05       	cpc	r25, r1
    367a:	10 f4       	brcc	.+4      	; 0x3680 <malloc+0xe>
    367c:	82 e0       	ldi	r24, 0x02	; 2
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	e0 91 ca 04 	lds	r30, 0x04CA
    3684:	f0 91 cb 04 	lds	r31, 0x04CB
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	a0 e0       	ldi	r26, 0x00	; 0
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	30 97       	sbiw	r30, 0x00	; 0
    3692:	39 f1       	breq	.+78     	; 0x36e2 <malloc+0x70>
    3694:	40 81       	ld	r20, Z
    3696:	51 81       	ldd	r21, Z+1	; 0x01
    3698:	48 17       	cp	r20, r24
    369a:	59 07       	cpc	r21, r25
    369c:	b8 f0       	brcs	.+46     	; 0x36cc <malloc+0x5a>
    369e:	48 17       	cp	r20, r24
    36a0:	59 07       	cpc	r21, r25
    36a2:	71 f4       	brne	.+28     	; 0x36c0 <malloc+0x4e>
    36a4:	82 81       	ldd	r24, Z+2	; 0x02
    36a6:	93 81       	ldd	r25, Z+3	; 0x03
    36a8:	10 97       	sbiw	r26, 0x00	; 0
    36aa:	29 f0       	breq	.+10     	; 0x36b6 <malloc+0x44>
    36ac:	13 96       	adiw	r26, 0x03	; 3
    36ae:	9c 93       	st	X, r25
    36b0:	8e 93       	st	-X, r24
    36b2:	12 97       	sbiw	r26, 0x02	; 2
    36b4:	2c c0       	rjmp	.+88     	; 0x370e <malloc+0x9c>
    36b6:	90 93 cb 04 	sts	0x04CB, r25
    36ba:	80 93 ca 04 	sts	0x04CA, r24
    36be:	27 c0       	rjmp	.+78     	; 0x370e <malloc+0x9c>
    36c0:	21 15       	cp	r18, r1
    36c2:	31 05       	cpc	r19, r1
    36c4:	31 f0       	breq	.+12     	; 0x36d2 <malloc+0x60>
    36c6:	42 17       	cp	r20, r18
    36c8:	53 07       	cpc	r21, r19
    36ca:	18 f0       	brcs	.+6      	; 0x36d2 <malloc+0x60>
    36cc:	a9 01       	movw	r20, r18
    36ce:	db 01       	movw	r26, r22
    36d0:	01 c0       	rjmp	.+2      	; 0x36d4 <malloc+0x62>
    36d2:	ef 01       	movw	r28, r30
    36d4:	9a 01       	movw	r18, r20
    36d6:	bd 01       	movw	r22, r26
    36d8:	df 01       	movw	r26, r30
    36da:	02 80       	ldd	r0, Z+2	; 0x02
    36dc:	f3 81       	ldd	r31, Z+3	; 0x03
    36de:	e0 2d       	mov	r30, r0
    36e0:	d7 cf       	rjmp	.-82     	; 0x3690 <malloc+0x1e>
    36e2:	21 15       	cp	r18, r1
    36e4:	31 05       	cpc	r19, r1
    36e6:	f9 f0       	breq	.+62     	; 0x3726 <malloc+0xb4>
    36e8:	28 1b       	sub	r18, r24
    36ea:	39 0b       	sbc	r19, r25
    36ec:	24 30       	cpi	r18, 0x04	; 4
    36ee:	31 05       	cpc	r19, r1
    36f0:	80 f4       	brcc	.+32     	; 0x3712 <malloc+0xa0>
    36f2:	8a 81       	ldd	r24, Y+2	; 0x02
    36f4:	9b 81       	ldd	r25, Y+3	; 0x03
    36f6:	61 15       	cp	r22, r1
    36f8:	71 05       	cpc	r23, r1
    36fa:	21 f0       	breq	.+8      	; 0x3704 <malloc+0x92>
    36fc:	fb 01       	movw	r30, r22
    36fe:	93 83       	std	Z+3, r25	; 0x03
    3700:	82 83       	std	Z+2, r24	; 0x02
    3702:	04 c0       	rjmp	.+8      	; 0x370c <malloc+0x9a>
    3704:	90 93 cb 04 	sts	0x04CB, r25
    3708:	80 93 ca 04 	sts	0x04CA, r24
    370c:	fe 01       	movw	r30, r28
    370e:	32 96       	adiw	r30, 0x02	; 2
    3710:	44 c0       	rjmp	.+136    	; 0x379a <malloc+0x128>
    3712:	fe 01       	movw	r30, r28
    3714:	e2 0f       	add	r30, r18
    3716:	f3 1f       	adc	r31, r19
    3718:	81 93       	st	Z+, r24
    371a:	91 93       	st	Z+, r25
    371c:	22 50       	subi	r18, 0x02	; 2
    371e:	31 09       	sbc	r19, r1
    3720:	39 83       	std	Y+1, r19	; 0x01
    3722:	28 83       	st	Y, r18
    3724:	3a c0       	rjmp	.+116    	; 0x379a <malloc+0x128>
    3726:	20 91 c8 04 	lds	r18, 0x04C8
    372a:	30 91 c9 04 	lds	r19, 0x04C9
    372e:	23 2b       	or	r18, r19
    3730:	41 f4       	brne	.+16     	; 0x3742 <malloc+0xd0>
    3732:	20 91 04 02 	lds	r18, 0x0204
    3736:	30 91 05 02 	lds	r19, 0x0205
    373a:	30 93 c9 04 	sts	0x04C9, r19
    373e:	20 93 c8 04 	sts	0x04C8, r18
    3742:	20 91 02 02 	lds	r18, 0x0202
    3746:	30 91 03 02 	lds	r19, 0x0203
    374a:	21 15       	cp	r18, r1
    374c:	31 05       	cpc	r19, r1
    374e:	41 f4       	brne	.+16     	; 0x3760 <malloc+0xee>
    3750:	2d b7       	in	r18, 0x3d	; 61
    3752:	3e b7       	in	r19, 0x3e	; 62
    3754:	40 91 06 02 	lds	r20, 0x0206
    3758:	50 91 07 02 	lds	r21, 0x0207
    375c:	24 1b       	sub	r18, r20
    375e:	35 0b       	sbc	r19, r21
    3760:	e0 91 c8 04 	lds	r30, 0x04C8
    3764:	f0 91 c9 04 	lds	r31, 0x04C9
    3768:	e2 17       	cp	r30, r18
    376a:	f3 07       	cpc	r31, r19
    376c:	a0 f4       	brcc	.+40     	; 0x3796 <malloc+0x124>
    376e:	2e 1b       	sub	r18, r30
    3770:	3f 0b       	sbc	r19, r31
    3772:	28 17       	cp	r18, r24
    3774:	39 07       	cpc	r19, r25
    3776:	78 f0       	brcs	.+30     	; 0x3796 <malloc+0x124>
    3778:	ac 01       	movw	r20, r24
    377a:	4e 5f       	subi	r20, 0xFE	; 254
    377c:	5f 4f       	sbci	r21, 0xFF	; 255
    377e:	24 17       	cp	r18, r20
    3780:	35 07       	cpc	r19, r21
    3782:	48 f0       	brcs	.+18     	; 0x3796 <malloc+0x124>
    3784:	4e 0f       	add	r20, r30
    3786:	5f 1f       	adc	r21, r31
    3788:	50 93 c9 04 	sts	0x04C9, r21
    378c:	40 93 c8 04 	sts	0x04C8, r20
    3790:	81 93       	st	Z+, r24
    3792:	91 93       	st	Z+, r25
    3794:	02 c0       	rjmp	.+4      	; 0x379a <malloc+0x128>
    3796:	e0 e0       	ldi	r30, 0x00	; 0
    3798:	f0 e0       	ldi	r31, 0x00	; 0
    379a:	cf 01       	movw	r24, r30
    379c:	df 91       	pop	r29
    379e:	cf 91       	pop	r28
    37a0:	08 95       	ret

000037a2 <free>:
    37a2:	cf 93       	push	r28
    37a4:	df 93       	push	r29
    37a6:	00 97       	sbiw	r24, 0x00	; 0
    37a8:	09 f4       	brne	.+2      	; 0x37ac <free+0xa>
    37aa:	87 c0       	rjmp	.+270    	; 0x38ba <free+0x118>
    37ac:	fc 01       	movw	r30, r24
    37ae:	32 97       	sbiw	r30, 0x02	; 2
    37b0:	13 82       	std	Z+3, r1	; 0x03
    37b2:	12 82       	std	Z+2, r1	; 0x02
    37b4:	c0 91 ca 04 	lds	r28, 0x04CA
    37b8:	d0 91 cb 04 	lds	r29, 0x04CB
    37bc:	20 97       	sbiw	r28, 0x00	; 0
    37be:	81 f4       	brne	.+32     	; 0x37e0 <free+0x3e>
    37c0:	20 81       	ld	r18, Z
    37c2:	31 81       	ldd	r19, Z+1	; 0x01
    37c4:	28 0f       	add	r18, r24
    37c6:	39 1f       	adc	r19, r25
    37c8:	80 91 c8 04 	lds	r24, 0x04C8
    37cc:	90 91 c9 04 	lds	r25, 0x04C9
    37d0:	82 17       	cp	r24, r18
    37d2:	93 07       	cpc	r25, r19
    37d4:	79 f5       	brne	.+94     	; 0x3834 <free+0x92>
    37d6:	f0 93 c9 04 	sts	0x04C9, r31
    37da:	e0 93 c8 04 	sts	0x04C8, r30
    37de:	6d c0       	rjmp	.+218    	; 0x38ba <free+0x118>
    37e0:	de 01       	movw	r26, r28
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	ae 17       	cp	r26, r30
    37e8:	bf 07       	cpc	r27, r31
    37ea:	50 f4       	brcc	.+20     	; 0x3800 <free+0x5e>
    37ec:	12 96       	adiw	r26, 0x02	; 2
    37ee:	4d 91       	ld	r20, X+
    37f0:	5c 91       	ld	r21, X
    37f2:	13 97       	sbiw	r26, 0x03	; 3
    37f4:	9d 01       	movw	r18, r26
    37f6:	41 15       	cp	r20, r1
    37f8:	51 05       	cpc	r21, r1
    37fa:	09 f1       	breq	.+66     	; 0x383e <free+0x9c>
    37fc:	da 01       	movw	r26, r20
    37fe:	f3 cf       	rjmp	.-26     	; 0x37e6 <free+0x44>
    3800:	b3 83       	std	Z+3, r27	; 0x03
    3802:	a2 83       	std	Z+2, r26	; 0x02
    3804:	40 81       	ld	r20, Z
    3806:	51 81       	ldd	r21, Z+1	; 0x01
    3808:	84 0f       	add	r24, r20
    380a:	95 1f       	adc	r25, r21
    380c:	8a 17       	cp	r24, r26
    380e:	9b 07       	cpc	r25, r27
    3810:	71 f4       	brne	.+28     	; 0x382e <free+0x8c>
    3812:	8d 91       	ld	r24, X+
    3814:	9c 91       	ld	r25, X
    3816:	11 97       	sbiw	r26, 0x01	; 1
    3818:	84 0f       	add	r24, r20
    381a:	95 1f       	adc	r25, r21
    381c:	02 96       	adiw	r24, 0x02	; 2
    381e:	91 83       	std	Z+1, r25	; 0x01
    3820:	80 83       	st	Z, r24
    3822:	12 96       	adiw	r26, 0x02	; 2
    3824:	8d 91       	ld	r24, X+
    3826:	9c 91       	ld	r25, X
    3828:	13 97       	sbiw	r26, 0x03	; 3
    382a:	93 83       	std	Z+3, r25	; 0x03
    382c:	82 83       	std	Z+2, r24	; 0x02
    382e:	21 15       	cp	r18, r1
    3830:	31 05       	cpc	r19, r1
    3832:	29 f4       	brne	.+10     	; 0x383e <free+0x9c>
    3834:	f0 93 cb 04 	sts	0x04CB, r31
    3838:	e0 93 ca 04 	sts	0x04CA, r30
    383c:	3e c0       	rjmp	.+124    	; 0x38ba <free+0x118>
    383e:	d9 01       	movw	r26, r18
    3840:	13 96       	adiw	r26, 0x03	; 3
    3842:	fc 93       	st	X, r31
    3844:	ee 93       	st	-X, r30
    3846:	12 97       	sbiw	r26, 0x02	; 2
    3848:	4d 91       	ld	r20, X+
    384a:	5d 91       	ld	r21, X+
    384c:	a4 0f       	add	r26, r20
    384e:	b5 1f       	adc	r27, r21
    3850:	ea 17       	cp	r30, r26
    3852:	fb 07       	cpc	r31, r27
    3854:	79 f4       	brne	.+30     	; 0x3874 <free+0xd2>
    3856:	80 81       	ld	r24, Z
    3858:	91 81       	ldd	r25, Z+1	; 0x01
    385a:	84 0f       	add	r24, r20
    385c:	95 1f       	adc	r25, r21
    385e:	02 96       	adiw	r24, 0x02	; 2
    3860:	d9 01       	movw	r26, r18
    3862:	11 96       	adiw	r26, 0x01	; 1
    3864:	9c 93       	st	X, r25
    3866:	8e 93       	st	-X, r24
    3868:	82 81       	ldd	r24, Z+2	; 0x02
    386a:	93 81       	ldd	r25, Z+3	; 0x03
    386c:	13 96       	adiw	r26, 0x03	; 3
    386e:	9c 93       	st	X, r25
    3870:	8e 93       	st	-X, r24
    3872:	12 97       	sbiw	r26, 0x02	; 2
    3874:	e0 e0       	ldi	r30, 0x00	; 0
    3876:	f0 e0       	ldi	r31, 0x00	; 0
    3878:	8a 81       	ldd	r24, Y+2	; 0x02
    387a:	9b 81       	ldd	r25, Y+3	; 0x03
    387c:	00 97       	sbiw	r24, 0x00	; 0
    387e:	19 f0       	breq	.+6      	; 0x3886 <free+0xe4>
    3880:	fe 01       	movw	r30, r28
    3882:	ec 01       	movw	r28, r24
    3884:	f9 cf       	rjmp	.-14     	; 0x3878 <free+0xd6>
    3886:	ce 01       	movw	r24, r28
    3888:	02 96       	adiw	r24, 0x02	; 2
    388a:	28 81       	ld	r18, Y
    388c:	39 81       	ldd	r19, Y+1	; 0x01
    388e:	82 0f       	add	r24, r18
    3890:	93 1f       	adc	r25, r19
    3892:	20 91 c8 04 	lds	r18, 0x04C8
    3896:	30 91 c9 04 	lds	r19, 0x04C9
    389a:	28 17       	cp	r18, r24
    389c:	39 07       	cpc	r19, r25
    389e:	69 f4       	brne	.+26     	; 0x38ba <free+0x118>
    38a0:	30 97       	sbiw	r30, 0x00	; 0
    38a2:	29 f4       	brne	.+10     	; 0x38ae <free+0x10c>
    38a4:	10 92 cb 04 	sts	0x04CB, r1
    38a8:	10 92 ca 04 	sts	0x04CA, r1
    38ac:	02 c0       	rjmp	.+4      	; 0x38b2 <free+0x110>
    38ae:	13 82       	std	Z+3, r1	; 0x03
    38b0:	12 82       	std	Z+2, r1	; 0x02
    38b2:	d0 93 c9 04 	sts	0x04C9, r29
    38b6:	c0 93 c8 04 	sts	0x04C8, r28
    38ba:	df 91       	pop	r29
    38bc:	cf 91       	pop	r28
    38be:	08 95       	ret

000038c0 <memset>:
    38c0:	dc 01       	movw	r26, r24
    38c2:	01 c0       	rjmp	.+2      	; 0x38c6 <memset+0x6>
    38c4:	6d 93       	st	X+, r22
    38c6:	41 50       	subi	r20, 0x01	; 1
    38c8:	50 40       	sbci	r21, 0x00	; 0
    38ca:	e0 f7       	brcc	.-8      	; 0x38c4 <memset+0x4>
    38cc:	08 95       	ret

000038ce <strrev>:
    38ce:	dc 01       	movw	r26, r24
    38d0:	fc 01       	movw	r30, r24
    38d2:	67 2f       	mov	r22, r23
    38d4:	71 91       	ld	r23, Z+
    38d6:	77 23       	and	r23, r23
    38d8:	e1 f7       	brne	.-8      	; 0x38d2 <strrev+0x4>
    38da:	32 97       	sbiw	r30, 0x02	; 2
    38dc:	04 c0       	rjmp	.+8      	; 0x38e6 <strrev+0x18>
    38de:	7c 91       	ld	r23, X
    38e0:	6d 93       	st	X+, r22
    38e2:	70 83       	st	Z, r23
    38e4:	62 91       	ld	r22, -Z
    38e6:	ae 17       	cp	r26, r30
    38e8:	bf 07       	cpc	r27, r31
    38ea:	c8 f3       	brcs	.-14     	; 0x38de <strrev+0x10>
    38ec:	08 95       	ret

000038ee <fputc>:
    38ee:	0f 93       	push	r16
    38f0:	1f 93       	push	r17
    38f2:	cf 93       	push	r28
    38f4:	df 93       	push	r29
    38f6:	18 2f       	mov	r17, r24
    38f8:	09 2f       	mov	r16, r25
    38fa:	eb 01       	movw	r28, r22
    38fc:	8b 81       	ldd	r24, Y+3	; 0x03
    38fe:	81 fd       	sbrc	r24, 1
    3900:	03 c0       	rjmp	.+6      	; 0x3908 <fputc+0x1a>
    3902:	8f ef       	ldi	r24, 0xFF	; 255
    3904:	9f ef       	ldi	r25, 0xFF	; 255
    3906:	20 c0       	rjmp	.+64     	; 0x3948 <fputc+0x5a>
    3908:	82 ff       	sbrs	r24, 2
    390a:	10 c0       	rjmp	.+32     	; 0x392c <fputc+0x3e>
    390c:	4e 81       	ldd	r20, Y+6	; 0x06
    390e:	5f 81       	ldd	r21, Y+7	; 0x07
    3910:	2c 81       	ldd	r18, Y+4	; 0x04
    3912:	3d 81       	ldd	r19, Y+5	; 0x05
    3914:	42 17       	cp	r20, r18
    3916:	53 07       	cpc	r21, r19
    3918:	7c f4       	brge	.+30     	; 0x3938 <fputc+0x4a>
    391a:	e8 81       	ld	r30, Y
    391c:	f9 81       	ldd	r31, Y+1	; 0x01
    391e:	9f 01       	movw	r18, r30
    3920:	2f 5f       	subi	r18, 0xFF	; 255
    3922:	3f 4f       	sbci	r19, 0xFF	; 255
    3924:	39 83       	std	Y+1, r19	; 0x01
    3926:	28 83       	st	Y, r18
    3928:	10 83       	st	Z, r17
    392a:	06 c0       	rjmp	.+12     	; 0x3938 <fputc+0x4a>
    392c:	e8 85       	ldd	r30, Y+8	; 0x08
    392e:	f9 85       	ldd	r31, Y+9	; 0x09
    3930:	81 2f       	mov	r24, r17
    3932:	19 95       	eicall
    3934:	89 2b       	or	r24, r25
    3936:	29 f7       	brne	.-54     	; 0x3902 <fputc+0x14>
    3938:	2e 81       	ldd	r18, Y+6	; 0x06
    393a:	3f 81       	ldd	r19, Y+7	; 0x07
    393c:	2f 5f       	subi	r18, 0xFF	; 255
    393e:	3f 4f       	sbci	r19, 0xFF	; 255
    3940:	3f 83       	std	Y+7, r19	; 0x07
    3942:	2e 83       	std	Y+6, r18	; 0x06
    3944:	81 2f       	mov	r24, r17
    3946:	90 2f       	mov	r25, r16
    3948:	df 91       	pop	r29
    394a:	cf 91       	pop	r28
    394c:	1f 91       	pop	r17
    394e:	0f 91       	pop	r16
    3950:	08 95       	ret

00003952 <_exit>:
    3952:	f8 94       	cli

00003954 <__stop_program>:
    3954:	ff cf       	rjmp	.-2      	; 0x3954 <__stop_program>
